
solar_tracker_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800778c  0800778c  0000878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079a8  080079a8  000089a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b0  080079b0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b0  080079b0  000089b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079b4  080079b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080079b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d24  20000060  08007a18  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d84  08007a18  00009d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdf1  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d4  00000000  00000000  00024e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00028f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001136  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abf3  00000000  00000000  0002b6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af92  00000000  00000000  000462c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a479e  00000000  00000000  0006125b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001059f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006134  00000000  00000000  00105a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0010bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007774 	.word	0x08007774

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007774 	.word	0x08007774

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005d0:	4a3d      	ldr	r2, [pc, #244]	@ (80006c8 <MX_ADC1_Init+0x10c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005e2:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e8:	4b36      	ldr	r3, [pc, #216]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005fe:	4a33      	ldr	r2, [pc, #204]	@ (80006cc <MX_ADC1_Init+0x110>)
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000608:	4b2e      	ldr	r3, [pc, #184]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800060a:	2205      	movs	r2, #5
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800060e:	4b2d      	ldr	r3, [pc, #180]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000610:	2201      	movs	r2, #1
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4829      	ldr	r0, [pc, #164]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800061e:	f000 fe8f 	bl	8001340 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 fc62 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800062c:	2309      	movs	r3, #9
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000634:	2304      	movs	r3, #4
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4821      	ldr	r0, [pc, #132]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800063e:	f000 ffd5 	bl	80015ec <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 fc52 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800064c:	230a      	movs	r3, #10
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800065a:	f000 ffc7 	bl	80015ec <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000664:	f000 fc44 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000668:	230b      	movs	r3, #11
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800066c:	2303      	movs	r3, #3
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000676:	f000 ffb9 	bl	80015ec <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000680:	f000 fc36 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000684:	230c      	movs	r3, #12
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000692:	f000 ffab 	bl	80015ec <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800069c:	f000 fc28 	bl	8000ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006a0:	230d      	movs	r3, #13
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80006a4:	2305      	movs	r3, #5
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80006ae:	f000 ff9d 	bl	80015ec <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006b8:	f000 fc1a 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a28      	ldr	r2, [pc, #160]	@ (8000790 <HAL_ADC_MspInit+0xc0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d149      	bne.n	8000786 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000700:	6453      	str	r3, [r2, #68]	@ 0x44
 8000702:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    /* DMA controller clock enable */
    MX_DMA_Init();
 800070e:	f000 f849 	bl	80007a4 <MX_DMA_Init>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a1e      	ldr	r2, [pc, #120]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <HAL_ADC_MspInit+0xc4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NORTE_Pin|SUR_Pin|ESTE_Pin|OESTE_Pin;
 800074a:	230f      	movs	r3, #15
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074e:	2303      	movs	r3, #3
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480e      	ldr	r0, [pc, #56]	@ (8000798 <HAL_ADC_MspInit+0xc8>)
 800075e:	f001 fe37 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CENTRO_Pin;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000766:	2303      	movs	r3, #3
 8000768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CENTRO_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4809      	ldr	r0, [pc, #36]	@ (800079c <HAL_ADC_MspInit+0xcc>)
 8000776:	f001 fe2b 	bl	80023d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    __HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <HAL_ADC_MspInit+0xd0>)
 800077e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <HAL_ADC_MspInit+0xd0>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	@ 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	200000c4 	.word	0x200000c4

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_DMA_Init+0x90>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <MX_DMA_Init+0x90>)
 80007b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_DMA_Init+0x90>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_adc1 on DMA2_Stream0 */
  hdma_adc1.Instance = DMA2_Stream0;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_DMA_Init+0x94>)
 80007c8:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_DMA_Init+0x98>)
 80007ca:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_DMA_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_DMA_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_DMA_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_DMA_Init+0x94>)
 80007e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007e4:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_DMA_Init+0x94>)
 80007e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007ec:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_DMA_Init+0x94>)
 80007f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007f4:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_DMA_Init+0x94>)
 80007f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007fc:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_DMA_Init+0x94>)
 8000800:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000804:	621a      	str	r2, [r3, #32]
  hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_DMA_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800080c:	480a      	ldr	r0, [pc, #40]	@ (8000838 <MX_DMA_Init+0x94>)
 800080e:	f001 fa6f 	bl	8001cf0 <HAL_DMA_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_DMA_Init+0x78>
  {
    Error_Handler();
 8000818:	f000 fb6a 	bl	8000ef0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2038      	movs	r0, #56	@ 0x38
 8000822:	f001 fa3b 	bl	8001c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000826:	2038      	movs	r0, #56	@ 0x38
 8000828:	f001 fa54 	bl	8001cd4 <HAL_NVIC_EnableIRQ>

}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	200000c4 	.word	0x200000c4
 800083c:	40026410 	.word	0x40026410

08000840 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorAzQueue */
  motorAzQueueHandle = osMessageQueueNew (5, sizeof(int32_t), &motorAzQueue_attributes);
 8000844:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <MX_FREERTOS_Init+0x88>)
 8000846:	2104      	movs	r1, #4
 8000848:	2005      	movs	r0, #5
 800084a:	f003 fbee 	bl	800402a <osMessageQueueNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a1e      	ldr	r2, [pc, #120]	@ (80008cc <MX_FREERTOS_Init+0x8c>)
 8000852:	6013      	str	r3, [r2, #0]

  /* creation of motorElQueue */
  motorElQueueHandle = osMessageQueueNew (5, sizeof(int32_t), &motorElQueue_attributes);
 8000854:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <MX_FREERTOS_Init+0x90>)
 8000856:	2104      	movs	r1, #4
 8000858:	2005      	movs	r0, #5
 800085a:	f003 fbe6 	bl	800402a <osMessageQueueNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_FREERTOS_Init+0x94>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (1, sizeof(SensorData_t), &sensorQueue_attributes);
 8000864:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <MX_FREERTOS_Init+0x98>)
 8000866:	2114      	movs	r1, #20
 8000868:	2001      	movs	r0, #1
 800086a:	f003 fbde 	bl	800402a <osMessageQueueNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a1a      	ldr	r2, [pc, #104]	@ (80008dc <MX_FREERTOS_Init+0x9c>)
 8000872:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000874:	4a1a      	ldr	r2, [pc, #104]	@ (80008e0 <MX_FREERTOS_Init+0xa0>)
 8000876:	2100      	movs	r1, #0
 8000878:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <MX_FREERTOS_Init+0xa4>)
 800087a:	f003 fb29 	bl	8003ed0 <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <MX_FREERTOS_Init+0xa8>)
 8000882:	6013      	str	r3, [r2, #0]

  /* creation of controlTask */
  controlTaskHandle = osThreadNew(ControlTask, NULL, &controlTask_attributes);
 8000884:	4a19      	ldr	r2, [pc, #100]	@ (80008ec <MX_FREERTOS_Init+0xac>)
 8000886:	2100      	movs	r1, #0
 8000888:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <MX_FREERTOS_Init+0xb0>)
 800088a:	f003 fb21 	bl	8003ed0 <osThreadNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <MX_FREERTOS_Init+0xb4>)
 8000892:	6013      	str	r3, [r2, #0]

  /* creation of motorAzTask */
  motorAzTaskHandle = osThreadNew(MotorAzTask, NULL, &motorAzTask_attributes);
 8000894:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_FREERTOS_Init+0xb8>)
 8000896:	2100      	movs	r1, #0
 8000898:	4818      	ldr	r0, [pc, #96]	@ (80008fc <MX_FREERTOS_Init+0xbc>)
 800089a:	f003 fb19 	bl	8003ed0 <osThreadNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a17      	ldr	r2, [pc, #92]	@ (8000900 <MX_FREERTOS_Init+0xc0>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* creation of motorElTask */
  motorElTaskHandle = osThreadNew(MotorElTask, NULL, &motorElTask_attributes);
 80008a4:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <MX_FREERTOS_Init+0xc4>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4817      	ldr	r0, [pc, #92]	@ (8000908 <MX_FREERTOS_Init+0xc8>)
 80008aa:	f003 fb11 	bl	8003ed0 <osThreadNew>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a16      	ldr	r2, [pc, #88]	@ (800090c <MX_FREERTOS_Init+0xcc>)
 80008b2:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(SensorTask, NULL, &sensorTask_attributes);
 80008b4:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <MX_FREERTOS_Init+0xd0>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4816      	ldr	r0, [pc, #88]	@ (8000914 <MX_FREERTOS_Init+0xd4>)
 80008ba:	f003 fb09 	bl	8003ed0 <osThreadNew>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_FREERTOS_Init+0xd8>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	0800790c 	.word	0x0800790c
 80008cc:	20000138 	.word	0x20000138
 80008d0:	08007924 	.word	0x08007924
 80008d4:	2000013c 	.word	0x2000013c
 80008d8:	0800793c 	.word	0x0800793c
 80008dc:	20000140 	.word	0x20000140
 80008e0:	08007858 	.word	0x08007858
 80008e4:	0800091d 	.word	0x0800091d
 80008e8:	20000124 	.word	0x20000124
 80008ec:	0800787c 	.word	0x0800787c
 80008f0:	0800093d 	.word	0x0800093d
 80008f4:	20000128 	.word	0x20000128
 80008f8:	080078a0 	.word	0x080078a0
 80008fc:	08000a19 	.word	0x08000a19
 8000900:	2000012c 	.word	0x2000012c
 8000904:	080078c4 	.word	0x080078c4
 8000908:	08000a95 	.word	0x08000a95
 800090c:	20000130 	.word	0x20000130
 8000910:	080078e8 	.word	0x080078e8
 8000914:	08000b11 	.word	0x08000b11
 8000918:	20000134 	.word	0x20000134

0800091c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000924:	2120      	movs	r1, #32
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <StartDefaultTask+0x1c>)
 8000928:	f001 feef 	bl	800270a <HAL_GPIO_TogglePin>
		osDelay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000930:	f003 fb60 	bl	8003ff4 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000934:	bf00      	nop
 8000936:	e7f5      	b.n	8000924 <StartDefaultTask+0x8>
 8000938:	40020000 	.word	0x40020000

0800093c <ControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b091      	sub	sp, #68	@ 0x44
 8000940:	af04      	add	r7, sp, #16
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlTask */
	SensorData_t received_data; // Una "caja" vacía para recibir los datos
	osStatus_t status;

	int32_t pasos_az_prueba = 20000;
 8000944:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000948:	617b      	str	r3, [r7, #20]
	int32_t pasos_el_prueba = 10000;
 800094a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800094e:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	for (;;) {
		// 1. Leer los 5 LDRs (usando el ADC)
		// La tarea se duerme aquí, esperando a recibir un mensaje de la cola
		status = osMessageQueueGet(sensorQueueHandle, &received_data, NULL, osWaitForever);
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <ControlTask+0xbc>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f107 0118 	add.w	r1, r7, #24
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	2200      	movs	r2, #0
 800095e:	f003 fc37 	bl	80041d0 <osMessageQueueGet>
 8000962:	62f8      	str	r0, [r7, #44]	@ 0x2c

		// Si el mensaje se recibió correctamente...
		if(status == osOK)
 8000964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000966:	2b00      	cmp	r3, #0
 8000968:	d118      	bne.n	800099c <ControlTask+0x60>
		{
			// ...imprimimos los datos que acabamos de recibir.
			sprintf(uart_buf, "ControlTask LDRs: %lu, %lu, %lu, %lu, %lu\r\n",
 800096a:	69b8      	ldr	r0, [r7, #24]
 800096c:	69fc      	ldr	r4, [r7, #28]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000974:	9102      	str	r1, [sp, #8]
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	4623      	mov	r3, r4
 800097c:	4602      	mov	r2, r0
 800097e:	491f      	ldr	r1, [pc, #124]	@ (80009fc <ControlTask+0xc0>)
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <ControlTask+0xc4>)
 8000982:	f006 f9f9 	bl	8006d78 <siprintf>
			                  received_data.ldr[1],
			                  received_data.ldr[2],
			                  received_data.ldr[3],
			                  received_data.ldr[4]);
			HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf,
			strlen(uart_buf), 1000);
 8000986:	481e      	ldr	r0, [pc, #120]	@ (8000a00 <ControlTask+0xc4>)
 8000988:	f7ff fc2a 	bl	80001e0 <strlen>
 800098c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf,
 800098e:	b29a      	uxth	r2, r3
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	491a      	ldr	r1, [pc, #104]	@ (8000a00 <ControlTask+0xc4>)
 8000996:	481b      	ldr	r0, [pc, #108]	@ (8000a04 <ControlTask+0xc8>)
 8000998:	f002 fe50 	bl	800363c <HAL_UART_Transmit>
//
//		// 6. Dormir esta tarea por 50ms (para el bucle de control)
//		vTaskDelay(pdMS_TO_TICKS(50));

// Enviar 20000 al motor Azimuth
		osMessageQueuePut(motorAzQueueHandle, &pasos_az_prueba, 0U, 0U);
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <ControlTask+0xcc>)
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	2300      	movs	r3, #0
 80009a6:	2200      	movs	r2, #0
 80009a8:	f003 fbb2 	bl	8004110 <osMessageQueuePut>
		// Enviar 10000 al motor Elevación
		osMessageQueuePut(motorElQueueHandle, &pasos_el_prueba, 0U, 0U);
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <ControlTask+0xd0>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	f107 0110 	add.w	r1, r7, #16
 80009b4:	2300      	movs	r3, #0
 80009b6:	2200      	movs	r2, #0
 80009b8:	f003 fbaa 	bl	8004110 <osMessageQueuePut>

		// 2. Dormir 5 segundos (para ver el movimiento)
		osDelay(5000);
 80009bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80009c0:	f003 fb18 	bl	8003ff4 <osDelay>

		// 3. Enviar órdenes de regreso
		int32_t pasos_az_regreso = -20000;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <ControlTask+0xd4>)
 80009c6:	60fb      	str	r3, [r7, #12]
		int32_t pasos_el_regreso = -10000;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <ControlTask+0xd8>)
 80009ca:	60bb      	str	r3, [r7, #8]
		osMessageQueuePut(motorAzQueueHandle, &pasos_az_regreso, 0U, 0U);
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <ControlTask+0xcc>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f107 010c 	add.w	r1, r7, #12
 80009d4:	2300      	movs	r3, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	f003 fb9a 	bl	8004110 <osMessageQueuePut>
		osMessageQueuePut(motorElQueueHandle, &pasos_el_regreso, 0U, 0U);
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <ControlTask+0xd0>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f107 0108 	add.w	r1, r7, #8
 80009e4:	2300      	movs	r3, #0
 80009e6:	2200      	movs	r2, #0
 80009e8:	f003 fb92 	bl	8004110 <osMessageQueuePut>

		// 4. Dormir 5 segundos
		osDelay(5000);
 80009ec:	f241 3088 	movw	r0, #5000	@ 0x1388
 80009f0:	f003 fb00 	bl	8003ff4 <osDelay>
	for (;;) {
 80009f4:	e7ac      	b.n	8000950 <ControlTask+0x14>
 80009f6:	bf00      	nop
 80009f8:	20000140 	.word	0x20000140
 80009fc:	080077f4 	.word	0x080077f4
 8000a00:	20000158 	.word	0x20000158
 8000a04:	20000208 	.word	0x20000208
 8000a08:	20000138 	.word	0x20000138
 8000a0c:	2000013c 	.word	0x2000013c
 8000a10:	ffffb1e0 	.word	0xffffb1e0
 8000a14:	ffffd8f0 	.word	0xffffd8f0

08000a18 <MotorAzTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MotorAzTask */
void MotorAzTask(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorAzTask */
	int32_t pasos_a_mover = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
	uint8_t paso_actual_az = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	75fb      	strb	r3, [r7, #23]
	/* Infinite loop */
	for (;;) {
		// 1. Esperar (bloqueado) hasta recibir una orden en la cola de AZIMUTH
		if (osMessageQueueGet(motorAzQueueHandle, &pasos_a_mover, NULL,
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MotorAzTask+0x78>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	f107 0108 	add.w	r1, r7, #8
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	2200      	movs	r2, #0
 8000a36:	f003 fbcb 	bl	80041d0 <osMessageQueueGet>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f3      	bne.n	8000a28 <MotorAzTask+0x10>
		osWaitForever) == osOK) {

			// 2. Ejecutar la orden
			int32_t pasos_abs =
					(pasos_a_mover > 0) ? pasos_a_mover : -pasos_a_mover;
 8000a40:	68bb      	ldr	r3, [r7, #8]
			int32_t pasos_abs =
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bfb8      	it	lt
 8000a46:	425b      	neglt	r3, r3
 8000a48:	60fb      	str	r3, [r7, #12]

			for (int i = 0; i < pasos_abs; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	e019      	b.n	8000a84 <MotorAzTask+0x6c>
				if (pasos_a_mover > 0) {
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	dd08      	ble.n	8000a68 <MotorAzTask+0x50>
					paso_actual_az++;
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_az > 7)
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	d905      	bls.n	8000a6e <MotorAzTask+0x56>
						paso_actual_az = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	75fb      	strb	r3, [r7, #23]
 8000a66:	e002      	b.n	8000a6e <MotorAzTask+0x56>
				} else {
					paso_actual_az--;
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_az < 0)
						paso_actual_az = 7;
				}
				setStep(paso_actual_az, MOTOR_AZIMUTH);
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f874 	bl	8000b60 <setStep>
				osDelay(4);
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f003 fabb 	bl	8003ff4 <osDelay>
			for (int i = 0; i < pasos_abs; i++) {
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	3301      	adds	r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbe1      	blt.n	8000a50 <MotorAzTask+0x38>
		if (osMessageQueueGet(motorAzQueueHandle, &pasos_a_mover, NULL,
 8000a8c:	e7cc      	b.n	8000a28 <MotorAzTask+0x10>
 8000a8e:	bf00      	nop
 8000a90:	20000138 	.word	0x20000138

08000a94 <MotorElTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MotorElTask */
void MotorElTask(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorElTask */
	int32_t pasos_a_mover = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
	uint8_t paso_actual_el = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	75fb      	strb	r3, [r7, #23]
	/* Infinite loop */
	for (;;) {
		if (osMessageQueueGet(motorElQueueHandle, &pasos_a_mover, NULL,
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MotorElTask+0x78>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f107 0108 	add.w	r1, r7, #8
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f003 fb8d 	bl	80041d0 <osMessageQueueGet>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f3      	bne.n	8000aa4 <MotorElTask+0x10>
		osWaitForever) == osOK) {
			int32_t pasos_abs =
					(pasos_a_mover > 0) ? pasos_a_mover : -pasos_a_mover;
 8000abc:	68bb      	ldr	r3, [r7, #8]
			int32_t pasos_abs =
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bfb8      	it	lt
 8000ac2:	425b      	neglt	r3, r3
 8000ac4:	60fb      	str	r3, [r7, #12]

			for (int i = 0; i < pasos_abs; i++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	e019      	b.n	8000b00 <MotorElTask+0x6c>
				if (pasos_a_mover > 0) {
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd08      	ble.n	8000ae4 <MotorElTask+0x50>
					paso_actual_el++;
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_el > 7)
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
 8000ada:	2b07      	cmp	r3, #7
 8000adc:	d905      	bls.n	8000aea <MotorElTask+0x56>
						paso_actual_el = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75fb      	strb	r3, [r7, #23]
 8000ae2:	e002      	b.n	8000aea <MotorElTask+0x56>
				} else {
					paso_actual_el--;
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_el < 0)
						paso_actual_el = 7;
				}
				setStep(paso_actual_el, MOTOR_ELEVATION);
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f836 	bl	8000b60 <setStep>
				osDelay(4);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f003 fa7d 	bl	8003ff4 <osDelay>
			for (int i = 0; i < pasos_abs; i++) {
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	3301      	adds	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbe1      	blt.n	8000acc <MotorElTask+0x38>
		if (osMessageQueueGet(motorElQueueHandle, &pasos_a_mover, NULL,
 8000b08:	e7cc      	b.n	8000aa4 <MotorElTask+0x10>
 8000b0a:	bf00      	nop
 8000b0c:	2000013c 	.word	0x2000013c

08000b10 <SensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorTask */
void SensorTask(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	SensorData_t sensor_data;// Creamos una "caja" para nuestros datos
  /* Infinite loop */
  for(;;)
  {
	// Copiamos los 5 valores leídos por el DMA a nuestra "caja"
	for(int i = 0; i<5; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	e00c      	b.n	8000b38 <SensorTask+0x28>
	{
		sensor_data.ldr[i] = adc_values[i];
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <SensorTask+0x48>)
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	3320      	adds	r3, #32
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f843 2c18 	str.w	r2, [r3, #-24]
	for(int i = 0; i<5; i++)
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	ddef      	ble.n	8000b1e <SensorTask+0xe>
	}
	// Ponemos la "caja" (el paquete de datos) en la cola de mensajes
	osMessageQueuePut(sensorQueueHandle, &sensor_data, 0U, 0U);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <SensorTask+0x4c>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	f107 0108 	add.w	r1, r7, #8
 8000b46:	2300      	movs	r3, #0
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f003 fae1 	bl	8004110 <osMessageQueuePut>

	osDelay(100);
 8000b4e:	2064      	movs	r0, #100	@ 0x64
 8000b50:	f003 fa50 	bl	8003ff4 <osDelay>
	for(int i = 0; i<5; i++)
 8000b54:	e7e0      	b.n	8000b18 <SensorTask+0x8>
 8000b56:	bf00      	nop
 8000b58:	20000144 	.word	0x20000144
 8000b5c:	20000140 	.word	0x20000140

08000b60 <setStep>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void setStep(uint8_t step, enum Motor_Id motor_id) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
// Asegurarse de que el índice esté en el rango 0-7
	step = step % 8;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	71fb      	strb	r3, [r7, #7]

	switch (motor_id) {
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d03d      	beq.n	8000bfa <setStep+0x9a>
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d177      	bne.n	8000c72 <setStep+0x112>
	case MOTOR_AZIMUTH:
		HAL_GPIO_WritePin(M_AZ_1_GPIO_Port, M_AZ_1_Pin,
				step_sequence[step][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a3d      	ldr	r2, [pc, #244]	@ (8000c7c <setStep+0x11c>)
 8000b86:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(M_AZ_1_GPIO_Port, M_AZ_1_Pin,
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	2101      	movs	r1, #1
 8000b98:	4839      	ldr	r0, [pc, #228]	@ (8000c80 <setStep+0x120>)
 8000b9a:	f001 fd9d 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_2_GPIO_Port, M_AZ_2_Pin,
				step_sequence[step][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a36      	ldr	r2, [pc, #216]	@ (8000c7c <setStep+0x11c>)
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(M_AZ_2_GPIO_Port, M_AZ_2_Pin,
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4832      	ldr	r0, [pc, #200]	@ (8000c80 <setStep+0x120>)
 8000bb8:	f001 fd8e 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_3_GPIO_Port, M_AZ_3_Pin,
				step_sequence[step][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8000c7c <setStep+0x11c>)
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(M_AZ_3_GPIO_Port, M_AZ_3_Pin,
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	bf14      	ite	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	2300      	moveq	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	482a      	ldr	r0, [pc, #168]	@ (8000c80 <setStep+0x120>)
 8000bd6:	f001 fd7f 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_4_GPIO_Port, M_AZ_4_Pin,
				step_sequence[step][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a27      	ldr	r2, [pc, #156]	@ (8000c7c <setStep+0x11c>)
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(M_AZ_4_GPIO_Port, M_AZ_4_Pin,
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4824      	ldr	r0, [pc, #144]	@ (8000c84 <setStep+0x124>)
 8000bf4:	f001 fd70 	bl	80026d8 <HAL_GPIO_WritePin>
		break;
 8000bf8:	e03c      	b.n	8000c74 <setStep+0x114>
	case MOTOR_ELEVATION:
		HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin,
				step_sequence[step][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <setStep+0x11c>)
 8000bfe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin,
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	481d      	ldr	r0, [pc, #116]	@ (8000c88 <setStep+0x128>)
 8000c12:	f001 fd61 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_2_GPIO_Port, M_EL_2_Pin,
				step_sequence[step][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a18      	ldr	r2, [pc, #96]	@ (8000c7c <setStep+0x11c>)
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(M_EL_2_GPIO_Port, M_EL_2_Pin,
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2140      	movs	r1, #64	@ 0x40
 8000c2e:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <setStep+0x124>)
 8000c30:	f001 fd52 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_3_GPIO_Port, M_EL_3_Pin,
				step_sequence[step][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <setStep+0x11c>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(M_EL_3_GPIO_Port, M_EL_3_Pin,
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf14      	ite	ne
 8000c42:	2301      	movne	r3, #1
 8000c44:	2300      	moveq	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	2180      	movs	r1, #128	@ 0x80
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <setStep+0x120>)
 8000c4e:	f001 fd43 	bl	80026d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_4_GPIO_Port, M_EL_4_Pin,
				step_sequence[step][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <setStep+0x11c>)
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(M_EL_4_GPIO_Port, M_EL_4_Pin,
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <setStep+0x120>)
 8000c6c:	f001 fd34 	bl	80026d8 <HAL_GPIO_WritePin>
		break;
 8000c70:	e000      	b.n	8000c74 <setStep+0x114>
	default:
		break;
 8000c72:	bf00      	nop
	}
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	08007838 	.word	0x08007838
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020800 	.word	0x40020800

08000c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b40      	ldr	r3, [pc, #256]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a3f      	ldr	r2, [pc, #252]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a38      	ldr	r2, [pc, #224]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b32      	ldr	r3, [pc, #200]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a31      	ldr	r2, [pc, #196]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_AZ_1_Pin|M_AZ_2_Pin|M_AZ_3_Pin|LD2_Pin
 8000d12:	2200      	movs	r2, #0
 8000d14:	21f3      	movs	r1, #243	@ 0xf3
 8000d16:	4825      	ldr	r0, [pc, #148]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d18:	f001 fcde 	bl	80026d8 <HAL_GPIO_WritePin>
                          |M_EL_4_Pin|M_EL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_AZ_4_Pin|M_EL_2_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2141      	movs	r1, #65	@ 0x41
 8000d20:	4823      	ldr	r0, [pc, #140]	@ (8000db0 <MX_GPIO_Init+0x124>)
 8000d22:	f001 fcd9 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	4822      	ldr	r0, [pc, #136]	@ (8000db4 <MX_GPIO_Init+0x128>)
 8000d2c:	f001 fcd4 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	481b      	ldr	r0, [pc, #108]	@ (8000db4 <MX_GPIO_Init+0x128>)
 8000d48:	f001 fb42 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_AZ_1_Pin M_AZ_2_Pin M_AZ_3_Pin LD2_Pin
                           M_EL_4_Pin M_EL_3_Pin */
  GPIO_InitStruct.Pin = M_AZ_1_Pin|M_AZ_2_Pin|M_AZ_3_Pin|LD2_Pin
 8000d4c:	23f3      	movs	r3, #243	@ 0xf3
 8000d4e:	617b      	str	r3, [r7, #20]
                          |M_EL_4_Pin|M_EL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d64:	f001 fb34 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_AZ_4_Pin M_EL_2_Pin */
  GPIO_InitStruct.Pin = M_AZ_4_Pin|M_EL_2_Pin;
 8000d68:	2341      	movs	r3, #65	@ 0x41
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_GPIO_Init+0x124>)
 8000d80:	f001 fb26 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EL_1_Pin */
  GPIO_InitStruct.Pin = M_EL_1_Pin;
 8000d84:	2380      	movs	r3, #128	@ 0x80
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EL_1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_GPIO_Init+0x128>)
 8000d9c:	f001 fb18 	bl	80023d0 <HAL_GPIO_Init>

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40020800 	.word	0x40020800

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 fa7e 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f818 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f7ff ff62 	bl	8000c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dc8:	f000 f9dc 	bl	8001184 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000dcc:	f7ff fbf6 	bl	80005bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 5);//INICIAR LA CONVERSIÓN ADC/DMA
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	4906      	ldr	r1, [pc, #24]	@ (8000dec <main+0x34>)
 8000dd4:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <main+0x38>)
 8000dd6:	f000 faf7 	bl	80013c8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000dda:	f003 f82f 	bl	8003e3c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000dde:	f7ff fd2f 	bl	8000840 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000de2:	f003 f84f 	bl	8003e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <main+0x2e>
 8000dea:	bf00      	nop
 8000dec:	20000144 	.word	0x20000144
 8000df0:	2000007c 	.word	0x2000007c

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	@ 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2230      	movs	r2, #48	@ 0x30
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 ffda 	bl	8006dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <SystemClock_Config+0xd0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <SystemClock_Config+0xd0>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <SystemClock_Config+0xd0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <SystemClock_Config+0xd4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <SystemClock_Config+0xd4>)
 8000e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <SystemClock_Config+0xd4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e76:	2307      	movs	r3, #7
 8000e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fc5e 	bl	8002740 <HAL_RCC_OscConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e8a:	f000 f831 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	230f      	movs	r3, #15
 8000e90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e92:	2302      	movs	r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fec0 	bl	8002c30 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eb6:	f000 f81b 	bl	8000ef0 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	@ 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ede:	f000 fa0f 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40000800 	.word	0x40000800

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_MspInit+0x54>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a11      	ldr	r2, [pc, #68]	@ (8000f50 <HAL_MspInit+0x54>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <HAL_MspInit+0x54>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_MspInit+0x54>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_MspInit+0x54>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <HAL_MspInit+0x54>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	f06f 0001 	mvn.w	r0, #1
 8000f42:	f000 feab 	bl	8001c9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	@ 0x38
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <HAL_InitTick+0xe4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a32      	ldr	r2, [pc, #200]	@ (8001038 <HAL_InitTick+0xe4>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <HAL_InitTick+0xe4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f80:	f107 0210 	add.w	r2, r7, #16
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 f870 	bl	8003070 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f9a:	f002 f841 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8000f9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fa0:	e004      	b.n	8000fac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fa2:	f002 f83d 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <HAL_InitTick+0xe8>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	0c9b      	lsrs	r3, r3, #18
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <HAL_InitTick+0xec>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fbe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <HAL_InitTick+0xec>)
 8000fc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001040 <HAL_InitTick+0xec>)
 8000fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fcc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <HAL_InitTick+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_InitTick+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_InitTick+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000fe0:	4817      	ldr	r0, [pc, #92]	@ (8001040 <HAL_InitTick+0xec>)
 8000fe2:	f002 f877 	bl	80030d4 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11b      	bne.n	800102c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000ff4:	4812      	ldr	r0, [pc, #72]	@ (8001040 <HAL_InitTick+0xec>)
 8000ff6:	f002 f8bd 	bl	8003174 <HAL_TIM_Base_Start_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001000:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001004:	2b00      	cmp	r3, #0
 8001006:	d111      	bne.n	800102c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001008:	201e      	movs	r0, #30
 800100a:	f000 fe63 	bl	8001cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d808      	bhi.n	8001026 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	201e      	movs	r0, #30
 800101a:	f000 fe3f 	bl	8001c9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_InitTick+0xf4>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e002      	b.n	800102c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800102c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001030:	4618      	mov	r0, r3
 8001032:	3738      	adds	r7, #56	@ 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	431bde83 	.word	0x431bde83
 8001040:	200001bc 	.word	0x200001bc
 8001044:	40000800 	.word	0x40000800
 8001048:	20000004 	.word	0x20000004

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(hadc1.DMA_Handle);
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <DMA2_Stream0_IRQHandler+0x14>)
 800108a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108c:	4618      	mov	r0, r3
 800108e:	f000 ff35 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000007c 	.word	0x2000007c

0800109c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <TIM4_IRQHandler+0x10>)
 80010a2:	f002 f8c9 	bl	8003238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001bc 	.word	0x200001bc

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f005 fed2 	bl	8006e88 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20018000 	.word	0x20018000
 8001110:	00000400 	.word	0x00000400
 8001114:	20000204 	.word	0x20000204
 8001118:	20004d88 	.word	0x20004d88

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim1);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_TIM_Base_MspInit+0x3c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10d      	bne.n	800116e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_TIM_Base_MspInit+0x40>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_TIM_Base_MspInit+0x40>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_TIM_Base_MspInit+0x40>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40010000 	.word	0x40010000
 8001180:	40023800 	.word	0x40023800

08001184 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_USART2_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011bc:	f002 f9ee 	bl	800359c <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f7ff fe93 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000208 	.word	0x20000208
 80011d4:	40004400 	.word	0x40004400

080011d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_UART_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12b      	bne.n	8001252 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_UART_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001242:	2307      	movs	r3, #7
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 800124e:	f001 f8bf 	bl	80023d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800126c:	f7ff ff56 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	@ (80012a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001296:	f005 fdfd 	bl	8006e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fd8d 	bl	8000db8 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012ac:	080079b8 	.word	0x080079b8
  ldr r2, =_sbss
 80012b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012b4:	20004d84 	.word	0x20004d84

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <HAL_Init+0x40>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <HAL_Init+0x40>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_Init+0x40>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 fcce 	bl	8001c86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff fe32 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fe04 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	20000250 	.word	0x20000250

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000250 	.word	0x20000250

08001340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e033      	b.n	80013be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff f9b6 	bl	80006d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d118      	bne.n	80013b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001386:	f023 0302 	bic.w	r3, r3, #2
 800138a:	f043 0202 	orr.w	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fa4c 	bl	8001830 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f023 0303 	bic.w	r3, r3, #3
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ae:	e001      	b.n	80013b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start_DMA+0x22>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0d0      	b.n	800158c <HAL_ADC_Start_DMA+0x1c4>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d018      	beq.n	8001432 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001410:	4b60      	ldr	r3, [pc, #384]	@ (8001594 <HAL_ADC_Start_DMA+0x1cc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a60      	ldr	r2, [pc, #384]	@ (8001598 <HAL_ADC_Start_DMA+0x1d0>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0c9a      	lsrs	r2, r3, #18
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3b01      	subs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001440:	d107      	bne.n	8001452 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001450:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	f040 8088 	bne.w	8001572 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800148c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014a0:	d106      	bne.n	80014b0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f023 0206 	bic.w	r2, r3, #6
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014be:	4b37      	ldr	r3, [pc, #220]	@ (800159c <HAL_ADC_Start_DMA+0x1d4>)
 80014c0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	4a36      	ldr	r2, [pc, #216]	@ (80015a0 <HAL_ADC_Start_DMA+0x1d8>)
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ce:	4a35      	ldr	r2, [pc, #212]	@ (80015a4 <HAL_ADC_Start_DMA+0x1dc>)
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d6:	4a34      	ldr	r2, [pc, #208]	@ (80015a8 <HAL_ADC_Start_DMA+0x1e0>)
 80014d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80014e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80014f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001502:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	334c      	adds	r3, #76	@ 0x4c
 800150e:	4619      	mov	r1, r3
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f000 fc9a 	bl	8001e4c <HAL_DMA_Start_IT>
 8001518:	4603      	mov	r3, r0
 800151a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10f      	bne.n	8001548 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d129      	bne.n	800158a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	e020      	b.n	800158a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_ADC_Start_DMA+0x1e4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11b      	bne.n	800158a <HAL_ADC_Start_DMA+0x1c2>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d114      	bne.n	800158a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e00b      	b.n	800158a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f043 0210 	orr.w	r2, r3, #16
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800158a:	7ffb      	ldrb	r3, [r7, #31]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000000 	.word	0x20000000
 8001598:	431bde83 	.word	0x431bde83
 800159c:	40012300 	.word	0x40012300
 80015a0:	08001a29 	.word	0x08001a29
 80015a4:	08001ae3 	.word	0x08001ae3
 80015a8:	08001aff 	.word	0x08001aff
 80015ac:	40012000 	.word	0x40012000

080015b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1c>
 8001604:	2302      	movs	r3, #2
 8001606:	e105      	b.n	8001814 <HAL_ADC_ConfigChannel+0x228>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d925      	bls.n	8001664 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d9      	ldr	r1, [r3, #12]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	3b1e      	subs	r3, #30
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68d9      	ldr	r1, [r3, #12]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4403      	add	r3, r0
 8001656:	3b1e      	subs	r3, #30
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	e022      	b.n	80016aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	2207      	movs	r2, #7
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	4603      	mov	r3, r0
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4403      	add	r3, r0
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d824      	bhi.n	80016fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b05      	subs	r3, #5
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b05      	subs	r3, #5
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016fa:	e04c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d824      	bhi.n	800174e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b23      	subs	r3, #35	@ 0x23
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b23      	subs	r3, #35	@ 0x23
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	@ 0x30
 800174c:	e023      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	@ 0x41
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	@ 0x41
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_ADC_ConfigChannel+0x234>)
 8001798:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a21      	ldr	r2, [pc, #132]	@ (8001824 <HAL_ADC_ConfigChannel+0x238>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1cc>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d105      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	@ (8001824 <HAL_ADC_ConfigChannel+0x238>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d123      	bne.n	800180a <HAL_ADC_ConfigChannel+0x21e>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d003      	beq.n	80017d2 <HAL_ADC_ConfigChannel+0x1e6>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b11      	cmp	r3, #17
 80017d0:	d11b      	bne.n	800180a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d111      	bne.n	800180a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_ADC_ConfigChannel+0x23c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a10      	ldr	r2, [pc, #64]	@ (800182c <HAL_ADC_ConfigChannel+0x240>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9a      	lsrs	r2, r3, #18
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017fc:	e002      	b.n	8001804 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3b01      	subs	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40012300 	.word	0x40012300
 8001824:	40012000 	.word	0x40012000
 8001828:	20000000 	.word	0x20000000
 800182c:	431bde83 	.word	0x431bde83

08001830 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001838:	4b79      	ldr	r3, [pc, #484]	@ (8001a20 <ADC_Init+0x1f0>)
 800183a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	021a      	lsls	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c2:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <ADC_Init+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d022      	beq.n	800190e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e00f      	b.n	800192e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800192c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0202 	bic.w	r2, r2, #2
 800193c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e1b      	ldrb	r3, [r3, #24]
 8001948:	005a      	lsls	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01b      	beq.n	8001994 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800196a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800197a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	3b01      	subs	r3, #1
 8001988:	035a      	lsls	r2, r3, #13
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e007      	b.n	80019a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	3b01      	subs	r3, #1
 80019c0:	051a      	lsls	r2, r3, #20
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019e6:	025a      	lsls	r2, r3, #9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	029a      	lsls	r2, r3, #10
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40012300 	.word	0x40012300
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d13c      	bne.n	8001abc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d12b      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d127      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d119      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0220 	bic.w	r2, r2, #32
 8001a8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fd7b 	bl	80015b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aba:	e00e      	b.n	8001ada <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fd85 	bl	80015d8 <HAL_ADC_ErrorCallback>
}
 8001ace:	e004      	b.n	8001ada <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fd67 	bl	80015c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2240      	movs	r2, #64	@ 0x40
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f043 0204 	orr.w	r2, r3, #4
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff fd5a 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff4c 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cae:	f7ff ff61 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	6978      	ldr	r0, [r7, #20]
 8001cba:	f7ff ffb1 	bl	8001c20 <NVIC_EncodePriority>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff80 	bl	8001bcc <__NVIC_SetPriority>
}
 8001ccc:	bf00      	nop
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff54 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fb14 	bl	8001328 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e099      	b.n	8001e40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	e00f      	b.n	8001d4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2e:	f7ff fafb 	bl	8001328 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d908      	bls.n	8001d4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e078      	b.n	8001e40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e8      	bne.n	8001d2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_DMA_Init+0x158>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	4313      	orrs	r3, r2
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d117      	bne.n	8001e12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fa6f 	bl	80022d8 <DMA_CheckFifoParam>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e016      	b.n	8001e40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa26 	bl	800226c <DMA_CalcBaseAndBitshift>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	223f      	movs	r2, #63	@ 0x3f
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	f010803f 	.word	0xf010803f

08001e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_DMA_Start_IT+0x26>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e040      	b.n	8001ef4 <HAL_DMA_Start_IT+0xa8>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d12f      	bne.n	8001ee6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f9b8 	bl	8002210 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	223f      	movs	r2, #63	@ 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0216 	orr.w	r2, r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e005      	b.n	8001ef2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f08:	4b8e      	ldr	r3, [pc, #568]	@ (8002144 <HAL_DMA_IRQHandler+0x248>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a8e      	ldr	r2, [pc, #568]	@ (8002148 <HAL_DMA_IRQHandler+0x24c>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0a9b      	lsrs	r3, r3, #10
 8001f14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	2208      	movs	r2, #8
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01a      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	2208      	movs	r2, #8
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d012      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2210      	movs	r2, #16
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d043      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d03c      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d018      	beq.n	800203e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d024      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
 800202a:	e01f      	b.n	800206c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e016      	b.n	800206c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0208 	bic.w	r2, r2, #8
 800205a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2220      	movs	r2, #32
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 808f 	beq.w	800219c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8087 	beq.w	800219c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	2220      	movs	r2, #32
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d136      	bne.n	8002114 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0216 	bic.w	r2, r2, #22
 80020b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_DMA_IRQHandler+0x1da>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0208 	bic.w	r2, r2, #8
 80020e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	223f      	movs	r2, #63	@ 0x3f
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002106:	2b00      	cmp	r3, #0
 8002108:	d07e      	beq.n	8002208 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
        }
        return;
 8002112:	e079      	b.n	8002208 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01d      	beq.n	800215e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002134:	2b00      	cmp	r3, #0
 8002136:	d031      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e02c      	b.n	800219c <HAL_DMA_IRQHandler+0x2a0>
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000
 8002148:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e01e      	b.n	800219c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10f      	bne.n	800218c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0210 	bic.w	r2, r2, #16
 800217a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d032      	beq.n	800220a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d022      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2205      	movs	r2, #5
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d307      	bcc.n	80021e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f2      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x2cc>
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
 8002206:	e000      	b.n	800220a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002208:	bf00      	nop
    }
  }
}
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800222c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b40      	cmp	r3, #64	@ 0x40
 800223c:	d108      	bne.n	8002250 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800224e:	e007      	b.n	8002260 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3b10      	subs	r3, #16
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <DMA_CalcBaseAndBitshift+0x64>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002286:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d909      	bls.n	80022ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	1d1a      	adds	r2, r3, #4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80022ac:	e007      	b.n	80022be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	aaaaaaab 	.word	0xaaaaaaab
 80022d4:	0800796c 	.word	0x0800796c

080022d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11f      	bne.n	8002332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d856      	bhi.n	80023a6 <DMA_CheckFifoParam+0xce>
 80022f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002300 <DMA_CheckFifoParam+0x28>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002311 	.word	0x08002311
 8002304:	08002323 	.word	0x08002323
 8002308:	08002311 	.word	0x08002311
 800230c:	080023a7 	.word	0x080023a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d046      	beq.n	80023aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002320:	e043      	b.n	80023aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800232a:	d140      	bne.n	80023ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002330:	e03d      	b.n	80023ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800233a:	d121      	bne.n	8002380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d837      	bhi.n	80023b2 <DMA_CheckFifoParam+0xda>
 8002342:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <DMA_CheckFifoParam+0x70>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002359 	.word	0x08002359
 800234c:	0800235f 	.word	0x0800235f
 8002350:	08002359 	.word	0x08002359
 8002354:	08002371 	.word	0x08002371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e030      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d025      	beq.n	80023b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236e:	e022      	b.n	80023b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002378:	d11f      	bne.n	80023ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800237e:	e01c      	b.n	80023ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d903      	bls.n	800238e <DMA_CheckFifoParam+0xb6>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d003      	beq.n	8002394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800238c:	e018      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      break;
 8002392:	e015      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e00b      	b.n	80023be <DMA_CheckFifoParam+0xe6>
      break;
 80023a6:	bf00      	nop
 80023a8:	e00a      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
 80023ac:	e008      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ae:	bf00      	nop
 80023b0:	e006      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
 80023b4:	e004      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023b6:	bf00      	nop
 80023b8:	e002      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ba:	bf00      	nop
 80023bc:	e000      	b.n	80023c0 <DMA_CheckFifoParam+0xe8>
      break;
 80023be:	bf00      	nop
    }
  } 
  
  return status; 
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e159      	b.n	80026a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8148 	bne.w	800269a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d005      	beq.n	8002422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	2b02      	cmp	r3, #2
 8002420:	d130      	bne.n	8002484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 0201 	and.w	r2, r3, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b03      	cmp	r3, #3
 800248e:	d017      	beq.n	80024c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d123      	bne.n	8002514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a2 	beq.w	800269a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b57      	ldr	r3, [pc, #348]	@ (80026b8 <HAL_GPIO_Init+0x2e8>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	4a56      	ldr	r2, [pc, #344]	@ (80026b8 <HAL_GPIO_Init+0x2e8>)
 8002560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002564:	6453      	str	r3, [r2, #68]	@ 0x44
 8002566:	4b54      	ldr	r3, [pc, #336]	@ (80026b8 <HAL_GPIO_Init+0x2e8>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002572:	4a52      	ldr	r2, [pc, #328]	@ (80026bc <HAL_GPIO_Init+0x2ec>)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a49      	ldr	r2, [pc, #292]	@ (80026c0 <HAL_GPIO_Init+0x2f0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x202>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a48      	ldr	r2, [pc, #288]	@ (80026c4 <HAL_GPIO_Init+0x2f4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x1fe>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a47      	ldr	r2, [pc, #284]	@ (80026c8 <HAL_GPIO_Init+0x2f8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a46      	ldr	r2, [pc, #280]	@ (80026cc <HAL_GPIO_Init+0x2fc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x1f6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a45      	ldr	r2, [pc, #276]	@ (80026d0 <HAL_GPIO_Init+0x300>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x1f2>
 80025be:	2304      	movs	r3, #4
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x204>
 80025c2:	2307      	movs	r3, #7
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x204>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x204>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x204>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x204>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	@ (80026bc <HAL_GPIO_Init+0x2ec>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b38      	ldr	r3, [pc, #224]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a2f      	ldr	r2, [pc, #188]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a24      	ldr	r2, [pc, #144]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266a:	4a1a      	ldr	r2, [pc, #104]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002670:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002694:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <HAL_GPIO_Init+0x304>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f aea2 	bls.w	80023ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f4:	e003      	b.n	80026fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800271c:	887a      	ldrh	r2, [r7, #2]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	041a      	lsls	r2, r3, #16
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43d9      	mvns	r1, r3
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	400b      	ands	r3, r1
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e267      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800275e:	4b88      	ldr	r3, [pc, #544]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b85      	ldr	r3, [pc, #532]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002772:	2b08      	cmp	r3, #8
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b82      	ldr	r3, [pc, #520]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e242      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x74>
 80027a6:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b70      	ldr	r3, [pc, #448]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027d8:	4b69      	ldr	r3, [pc, #420]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a68      	ldr	r2, [pc, #416]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b66      	ldr	r3, [pc, #408]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fd96 	bl	8001328 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fd92 	bl	8001328 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	@ 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e207      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b5b      	ldr	r3, [pc, #364]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xc0>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fd82 	bl	8001328 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fd7e 	bl	8001328 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	@ 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1f3      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0xe8>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002856:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1c7      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCC_OscConfig+0x244>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fd37 	bl	8001328 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fd33 	bl	8001328 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1a8      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <HAL_RCC_OscConfig+0x244>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fd16 	bl	8001328 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fd12 	bl	8001328 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e187      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_RCC_OscConfig+0x248>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fcf6 	bl	8001328 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fcf2 	bl	8001328 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e167      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x200>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_OscConfig+0x248>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fcdf 	bl	8001328 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fcdb 	bl	8001328 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e150      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b81      	ldr	r3, [pc, #516]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b77      	ldr	r3, [pc, #476]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b74      	ldr	r3, [pc, #464]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fc9b 	bl	8001328 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe fc97 	bl	8001328 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e10c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
 8002a1c:	4b64      	ldr	r3, [pc, #400]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	4a63      	ldr	r2, [pc, #396]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x30c>
 8002a32:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a4c:	4b58      	ldr	r3, [pc, #352]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a57      	ldr	r2, [pc, #348]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a54      	ldr	r2, [pc, #336]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fc5c 	bl	8001328 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fc58 	bl	8001328 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0cb      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x334>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fc46 	bl	8001328 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fc42 	bl	8001328 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0b5      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	4a38      	ldr	r2, [pc, #224]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a1 	beq.w	8002c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d05c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d141      	bne.n	8002b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b31      	ldr	r3, [pc, #196]	@ (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fc16 	bl	8001328 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fc12 	bl	8001328 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e087      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	491b      	ldr	r1, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fbeb 	bl	8001328 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe fbe7 	bl	8001328 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e05c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x416>
 8002b74:	e054      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fbd4 	bl	8001328 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fbd0 	bl	8001328 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e045      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x444>
 8002ba2:	e03d      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e038      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d121      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0cc      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d90c      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b65      	ldr	r3, [pc, #404]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a58      	ldr	r2, [pc, #352]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d044      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e067      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4934      	ldr	r1, [pc, #208]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fe fb02 	bl	8001328 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe fafe 	bl	8001328 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e04f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d20c      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f8bc 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023c00 	.word	0x40023c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08007954 	.word	0x08007954
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e00:	b094      	sub	sp, #80	@ 0x50
 8002e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e14:	4b79      	ldr	r3, [pc, #484]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d00d      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x40>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	f200 80e1 	bhi.w	8002fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e2e:	e0db      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b73      	ldr	r3, [pc, #460]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e34:	e0db      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e36:	4b73      	ldr	r3, [pc, #460]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e3a:	e0d8      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e46:	4b6d      	ldr	r3, [pc, #436]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e6e:	4622      	mov	r2, r4
 8002e70:	462b      	mov	r3, r5
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	0159      	lsls	r1, r3, #5
 8002e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e80:	0150      	lsls	r0, r2, #5
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4621      	mov	r1, r4
 8002e88:	1a51      	subs	r1, r2, r1
 8002e8a:	6139      	str	r1, [r7, #16]
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	4651      	mov	r1, sl
 8002ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eaa:	4651      	mov	r1, sl
 8002eac:	018a      	lsls	r2, r1, #6
 8002eae:	4651      	mov	r1, sl
 8002eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	eb18 0303 	adds.w	r3, r8, r3
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	462b      	mov	r3, r5
 8002edc:	eb49 0303 	adc.w	r3, r9, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	024b      	lsls	r3, r1, #9
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ef8:	4621      	mov	r1, r4
 8002efa:	024a      	lsls	r2, r1, #9
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f0c:	f7fd f9c0 	bl	8000290 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f18:	e058      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b38      	ldr	r3, [pc, #224]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	4611      	mov	r1, r2
 8002f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f34:	4642      	mov	r2, r8
 8002f36:	464b      	mov	r3, r9
 8002f38:	f04f 0000 	mov.w	r0, #0
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	0159      	lsls	r1, r3, #5
 8002f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f46:	0150      	lsls	r0, r2, #5
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f52:	4649      	mov	r1, r9
 8002f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f70:	eb63 050b 	sbc.w	r5, r3, fp
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	00eb      	lsls	r3, r5, #3
 8002f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f82:	00e2      	lsls	r2, r4, #3
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	4643      	mov	r3, r8
 8002f8a:	18e3      	adds	r3, r4, r3
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	464b      	mov	r3, r9
 8002f90:	eb45 0303 	adc.w	r3, r5, r3
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	028b      	lsls	r3, r1, #10
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fac:	4621      	mov	r1, r4
 8002fae:	028a      	lsls	r2, r1, #10
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	f7fd f966 	bl	8000290 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3750      	adds	r7, #80	@ 0x50
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	00f42400 	.word	0x00f42400
 8003004:	007a1200 	.word	0x007a1200

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_RCC_GetHCLKFreq+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003024:	f7ff fff0 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0a9b      	lsrs	r3, r3, #10
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	@ (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	08007964 	.word	0x08007964

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff ffdc 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	@ (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08007964 	.word	0x08007964

08003070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220f      	movs	r2, #15
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003080:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_RCC_GetClockConfig+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0207 	and.w	r2, r3, #7
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f820 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 f9a8 	bl	8003468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e044      	b.n	8003216 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003224 <HAL_TIM_Base_Start_IT+0xb0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d013      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_TIM_Base_Start_IT+0xb4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a19      	ldr	r2, [pc, #100]	@ (800322c <HAL_TIM_Base_Start_IT+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <HAL_TIM_Base_Start_IT+0xbc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x6c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <HAL_TIM_Base_Start_IT+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d111      	bne.n	8003204 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d010      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	e007      	b.n	8003214 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40014000 	.word	0x40014000

08003238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d020      	beq.n	800329c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0202 	mvn.w	r2, #2
 800326c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8d2 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8c4 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8d5 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d020      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0204 	mvn.w	r2, #4
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8ac 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f89e 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8af 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d020      	beq.n	8003334 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0208 	mvn.w	r2, #8
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f886 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f878 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f889 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01b      	beq.n	8003380 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0210 	mvn.w	r2, #16
 8003350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2208      	movs	r2, #8
 8003356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f860 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f852 	bl	8003418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f863 	bl	8003440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0201 	mvn.w	r2, #1
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fd94 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8e0 	bl	8003588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f834 	bl	8003454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0220 	mvn.w	r2, #32
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8b2 	bl	8003574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a37      	ldr	r2, [pc, #220]	@ (8003558 <TIM_Base_SetConfig+0xf0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a34      	ldr	r2, [pc, #208]	@ (800355c <TIM_Base_SetConfig+0xf4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a33      	ldr	r2, [pc, #204]	@ (8003560 <TIM_Base_SetConfig+0xf8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x38>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a32      	ldr	r2, [pc, #200]	@ (8003564 <TIM_Base_SetConfig+0xfc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <TIM_Base_SetConfig+0xf0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01b      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d017      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a25      	ldr	r2, [pc, #148]	@ (800355c <TIM_Base_SetConfig+0xf4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a24      	ldr	r2, [pc, #144]	@ (8003560 <TIM_Base_SetConfig+0xf8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a23      	ldr	r2, [pc, #140]	@ (8003564 <TIM_Base_SetConfig+0xfc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <TIM_Base_SetConfig+0x100>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a21      	ldr	r2, [pc, #132]	@ (800356c <TIM_Base_SetConfig+0x104>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <TIM_Base_SetConfig+0x108>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0c      	ldr	r2, [pc, #48]	@ (8003558 <TIM_Base_SetConfig+0xf0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d103      	bne.n	8003532 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800

08003574 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e042      	b.n	8003634 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd fe08 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	@ 0x24
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f973 	bl	80038cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d175      	bne.n	8003748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_UART_Transmit+0x2c>
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e06e      	b.n	800374a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2221      	movs	r2, #33	@ 0x21
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367a:	f7fd fe55 	bl	8001328 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003694:	d108      	bne.n	80036a8 <HAL_UART_Transmit+0x6c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e003      	b.n	80036b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036b0:	e02e      	b.n	8003710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2180      	movs	r1, #128	@ 0x80
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f848 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e03a      	b.n	800374a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3302      	adds	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e007      	b.n	8003702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3301      	adds	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1cb      	bne.n	80036b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f814 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e006      	b.n	800374a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003762:	e03b      	b.n	80037dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d037      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376c:	f7fd fddc 	bl	8001328 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	429a      	cmp	r2, r3
 800377a:	d302      	bcc.n	8003782 <UART_WaitOnFlagUntilTimeout+0x30>
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e03a      	b.n	80037fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b80      	cmp	r3, #128	@ 0x80
 8003798:	d020      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b40      	cmp	r3, #64	@ 0x40
 800379e:	d01d      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d116      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f81d 	bl	8003804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2208      	movs	r2, #8
 80037ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e00f      	b.n	80037fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d0b4      	beq.n	8003764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b095      	sub	sp, #84	@ 0x54
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800382c:	643a      	str	r2, [r7, #64]	@ 0x40
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e5      	bne.n	8003840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	d119      	bne.n	80038b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	60bb      	str	r3, [r7, #8]
   return(result);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 0310 	bic.w	r3, r3, #16
 8003892:	647b      	str	r3, [r7, #68]	@ 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800389c:	61ba      	str	r2, [r7, #24]
 800389e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	613b      	str	r3, [r7, #16]
   return(result);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038be:	bf00      	nop
 80038c0:	3754      	adds	r7, #84	@ 0x54
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b0c0      	sub	sp, #256	@ 0x100
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	68d9      	ldr	r1, [r3, #12]
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	ea40 0301 	orr.w	r3, r0, r1
 80038f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	431a      	orrs	r2, r3
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003924:	f021 010c 	bic.w	r1, r1, #12
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003932:	430b      	orrs	r3, r1
 8003934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	6999      	ldr	r1, [r3, #24]
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	ea40 0301 	orr.w	r3, r0, r1
 8003952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b8f      	ldr	r3, [pc, #572]	@ (8003b98 <UART_SetConfig+0x2cc>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d005      	beq.n	800396c <UART_SetConfig+0xa0>
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b8d      	ldr	r3, [pc, #564]	@ (8003b9c <UART_SetConfig+0x2d0>)
 8003968:	429a      	cmp	r2, r3
 800396a:	d104      	bne.n	8003976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fb6c 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 8003970:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003974:	e003      	b.n	800397e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003976:	f7ff fb53 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 800397a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003988:	f040 810c 	bne.w	8003ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003996:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800399a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039a6:	415b      	adcs	r3, r3
 80039a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ae:	4621      	mov	r1, r4
 80039b0:	eb12 0801 	adds.w	r8, r2, r1
 80039b4:	4629      	mov	r1, r5
 80039b6:	eb43 0901 	adc.w	r9, r3, r1
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ce:	4690      	mov	r8, r2
 80039d0:	4699      	mov	r9, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	eb18 0303 	adds.w	r3, r8, r3
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039dc:	462b      	mov	r3, r5
 80039de:	eb49 0303 	adc.w	r3, r9, r3
 80039e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039fa:	460b      	mov	r3, r1
 80039fc:	18db      	adds	r3, r3, r3
 80039fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a00:	4613      	mov	r3, r2
 8003a02:	eb42 0303 	adc.w	r3, r2, r3
 8003a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a10:	f7fc fc3e 	bl	8000290 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4b61      	ldr	r3, [pc, #388]	@ (8003ba0 <UART_SetConfig+0x2d4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	011c      	lsls	r4, r3, #4
 8003a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a44:	4641      	mov	r1, r8
 8003a46:	eb12 0a01 	adds.w	sl, r2, r1
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a64:	4692      	mov	sl, r2
 8003a66:	469b      	mov	fp, r3
 8003a68:	4643      	mov	r3, r8
 8003a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a72:	464b      	mov	r3, r9
 8003a74:	eb4b 0303 	adc.w	r3, fp, r3
 8003a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a90:	460b      	mov	r3, r1
 8003a92:	18db      	adds	r3, r3, r3
 8003a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a96:	4613      	mov	r3, r2
 8003a98:	eb42 0303 	adc.w	r3, r2, r3
 8003a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003aa6:	f7fc fbf3 	bl	8000290 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <UART_SetConfig+0x2d4>)
 8003ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2264      	movs	r2, #100	@ 0x64
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	1acb      	subs	r3, r1, r3
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ac6:	4b36      	ldr	r3, [pc, #216]	@ (8003ba0 <UART_SetConfig+0x2d4>)
 8003ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003af0:	415b      	adcs	r3, r3
 8003af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	460a      	mov	r2, r1
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	18db      	adds	r3, r3, r3
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b52:	4613      	mov	r3, r2
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b62:	f7fc fb95 	bl	8000290 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <UART_SetConfig+0x2d4>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	@ 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	3332      	adds	r3, #50	@ 0x32
 8003b7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ba0 <UART_SetConfig+0x2d4>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 0207 	and.w	r2, r3, #7
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4422      	add	r2, r4
 8003b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b94:	e106      	b.n	8003da4 <UART_SetConfig+0x4d8>
 8003b96:	bf00      	nop
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	464b      	mov	r3, r9
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	6239      	str	r1, [r7, #32]
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	1854      	adds	r4, r2, r1
 8003bca:	4649      	mov	r1, r9
 8003bcc:	eb43 0501 	adc.w	r5, r3, r1
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	00eb      	lsls	r3, r5, #3
 8003bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bde:	00e2      	lsls	r2, r4, #3
 8003be0:	4614      	mov	r4, r2
 8003be2:	461d      	mov	r5, r3
 8003be4:	4643      	mov	r3, r8
 8003be6:	18e3      	adds	r3, r4, r3
 8003be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bec:	464b      	mov	r3, r9
 8003bee:	eb45 0303 	adc.w	r3, r5, r3
 8003bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c12:	4629      	mov	r1, r5
 8003c14:	008b      	lsls	r3, r1, #2
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	008a      	lsls	r2, r1, #2
 8003c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c24:	f7fc fb34 	bl	8000290 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b60      	ldr	r3, [pc, #384]	@ (8003db0 <UART_SetConfig+0x4e4>)
 8003c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	011c      	lsls	r4, r3, #4
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	61b9      	str	r1, [r7, #24]
 8003c50:	415b      	adcs	r3, r3
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c58:	4641      	mov	r1, r8
 8003c5a:	1851      	adds	r1, r2, r1
 8003c5c:	6139      	str	r1, [r7, #16]
 8003c5e:	4649      	mov	r1, r9
 8003c60:	414b      	adcs	r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	00cb      	lsls	r3, r1, #3
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	00ca      	lsls	r2, r1, #3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	4642      	mov	r2, r8
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	460a      	mov	r2, r1
 8003c90:	eb42 0303 	adc.w	r3, r2, r3
 8003c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	008b      	lsls	r3, r1, #2
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cba:	4641      	mov	r1, r8
 8003cbc:	008a      	lsls	r2, r1, #2
 8003cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cc2:	f7fc fae5 	bl	8000290 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4b38      	ldr	r3, [pc, #224]	@ (8003db0 <UART_SetConfig+0x4e4>)
 8003cce:	fba3 2301 	umull	r2, r3, r3, r1
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2264      	movs	r2, #100	@ 0x64
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	@ 0x32
 8003ce0:	4a33      	ldr	r2, [pc, #204]	@ (8003db0 <UART_SetConfig+0x4e4>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cec:	441c      	add	r4, r3
 8003cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	415b      	adcs	r3, r3
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	1851      	adds	r1, r2, r1
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	4649      	mov	r1, r9
 8003d14:	414b      	adcs	r3, r1
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d24:	4659      	mov	r1, fp
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4651      	mov	r1, sl
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d3e:	464b      	mov	r3, r9
 8003d40:	460a      	mov	r2, r1
 8003d42:	eb42 0303 	adc.w	r3, r2, r3
 8003d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d52:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d60:	4649      	mov	r1, r9
 8003d62:	008b      	lsls	r3, r1, #2
 8003d64:	4641      	mov	r1, r8
 8003d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	008a      	lsls	r2, r1, #2
 8003d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d72:	f7fc fa8d 	bl	8000290 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <UART_SetConfig+0x4e4>)
 8003d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2164      	movs	r1, #100	@ 0x64
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	3332      	adds	r3, #50	@ 0x32
 8003d8e:	4a08      	ldr	r2, [pc, #32]	@ (8003db0 <UART_SetConfig+0x4e4>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4422      	add	r2, r4
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003daa:	46bd      	mov	sp, r7
 8003dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db0:	51eb851f 	.word	0x51eb851f

08003db4 <__NVIC_SetPriority>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	490c      	ldr	r1, [pc, #48]	@ (8003e00 <__NVIC_SetPriority+0x4c>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ddc:	e00a      	b.n	8003df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4908      	ldr	r1, [pc, #32]	@ (8003e04 <__NVIC_SetPriority+0x50>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	3b04      	subs	r3, #4
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	440b      	add	r3, r1
 8003df2:	761a      	strb	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <SysTick_Handler+0x1c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e10:	f001 ff34 	bl	8005c7c <xTaskGetSchedulerState>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d001      	beq.n	8003e1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e1a:	f002 fd2d 	bl	8006878 <xPortSysTickHandler>
  }
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f06f 0004 	mvn.w	r0, #4
 8003e32:	f7ff ffbf 	bl	8003db4 <__NVIC_SetPriority>
#endif
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e42:	f3ef 8305 	mrs	r3, IPSR
 8003e46:	603b      	str	r3, [r7, #0]
  return(result);
 8003e48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e4e:	f06f 0305 	mvn.w	r3, #5
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e00c      	b.n	8003e70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <osKernelInitialize+0x44>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e5e:	4b08      	ldr	r3, [pc, #32]	@ (8003e80 <osKernelInitialize+0x44>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	e002      	b.n	8003e70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000254 	.word	0x20000254

08003e84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e8a:	f3ef 8305 	mrs	r3, IPSR
 8003e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e96:	f06f 0305 	mvn.w	r3, #5
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e010      	b.n	8003ec0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <osKernelStart+0x48>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d109      	bne.n	8003eba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ea6:	f7ff ffbf 	bl	8003e28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <osKernelStart+0x48>)
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003eb0:	f001 fa80 	bl	80053b4 <vTaskStartScheduler>
      stat = osOK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e002      	b.n	8003ec0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ec0:	687b      	ldr	r3, [r7, #4]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000254 	.word	0x20000254

08003ed0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08e      	sub	sp, #56	@ 0x38
 8003ed4:	af04      	add	r7, sp, #16
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee0:	f3ef 8305 	mrs	r3, IPSR
 8003ee4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d17e      	bne.n	8003fea <osThreadNew+0x11a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d07b      	beq.n	8003fea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ef6:	2318      	movs	r3, #24
 8003ef8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d045      	beq.n	8003f96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <osThreadNew+0x48>
        name = attr->name;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <osThreadNew+0x6e>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b38      	cmp	r3, #56	@ 0x38
 8003f30:	d805      	bhi.n	8003f3e <osThreadNew+0x6e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <osThreadNew+0x72>
        return (NULL);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e054      	b.n	8003fec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <osThreadNew+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003f60:	d90a      	bls.n	8003f78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <osThreadNew+0xa8>
        mem = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e010      	b.n	8003f9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10c      	bne.n	8003f9a <osThreadNew+0xca>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <osThreadNew+0xca>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <osThreadNew+0xca>
          mem = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e001      	b.n	8003f9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d110      	bne.n	8003fc2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fa8:	9202      	str	r2, [sp, #8]
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f001 f808 	bl	8004fcc <xTaskCreateStatic>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e013      	b.n	8003fea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f001 f856 	bl	800508c <xTaskCreate>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <osThreadNew+0x11a>
            hTask = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fea:	693b      	ldr	r3, [r7, #16]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	@ 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffc:	f3ef 8305 	mrs	r3, IPSR
 8004000:	60bb      	str	r3, [r7, #8]
  return(result);
 8004002:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <osDelay+0x1c>
    stat = osErrorISR;
 8004008:	f06f 0305 	mvn.w	r3, #5
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e007      	b.n	8004020 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <osDelay+0x2c>
      vTaskDelay(ticks);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f001 f994 	bl	8005348 <vTaskDelay>
    }
  }

  return (stat);
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800402a:	b580      	push	{r7, lr}
 800402c:	b08a      	sub	sp, #40	@ 0x28
 800402e:	af02      	add	r7, sp, #8
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800403a:	f3ef 8305 	mrs	r3, IPSR
 800403e:	613b      	str	r3, [r7, #16]
  return(result);
 8004040:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004042:	2b00      	cmp	r3, #0
 8004044:	d15f      	bne.n	8004106 <osMessageQueueNew+0xdc>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05c      	beq.n	8004106 <osMessageQueueNew+0xdc>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d059      	beq.n	8004106 <osMessageQueueNew+0xdc>
    mem = -1;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d029      	beq.n	80040b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d012      	beq.n	800408c <osMessageQueueNew+0x62>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b4f      	cmp	r3, #79	@ 0x4f
 800406c:	d90e      	bls.n	800408c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <osMessageQueueNew+0x62>
        mem = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e014      	b.n	80040b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d110      	bne.n	80040b6 <osMessageQueueNew+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10c      	bne.n	80040b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d108      	bne.n	80040b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <osMessageQueueNew+0x8c>
          mem = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e001      	b.n	80040b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10b      	bne.n	80040d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2100      	movs	r1, #0
 80040c6:	9100      	str	r1, [sp, #0]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fa30 	bl	8004530 <xQueueGenericCreateStatic>
 80040d0:	61f8      	str	r0, [r7, #28]
 80040d2:	e008      	b.n	80040e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80040da:	2200      	movs	r2, #0
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 faa3 	bl	800462a <xQueueGenericCreate>
 80040e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <osMessageQueueNew+0xd0>
        name = attr->name;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e001      	b.n	80040fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	69f8      	ldr	r0, [r7, #28]
 8004102:	f000 ff05 	bl	8004f10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004106:	69fb      	ldr	r3, [r7, #28]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004128:	f3ef 8305 	mrs	r3, IPSR
 800412c:	617b      	str	r3, [r7, #20]
  return(result);
 800412e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004130:	2b00      	cmp	r3, #0
 8004132:	d028      	beq.n	8004186 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <osMessageQueuePut+0x36>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <osMessageQueuePut+0x36>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004146:	f06f 0303 	mvn.w	r3, #3
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e038      	b.n	80041c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004152:	f107 0210 	add.w	r2, r7, #16
 8004156:	2300      	movs	r3, #0
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	69b8      	ldr	r0, [r7, #24]
 800415c:	f000 fbc6 	bl	80048ec <xQueueGenericSendFromISR>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d003      	beq.n	800416e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004166:	f06f 0302 	mvn.w	r3, #2
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e028      	b.n	80041c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d025      	beq.n	80041c0 <osMessageQueuePut+0xb0>
 8004174:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <osMessageQueuePut+0xbc>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	e01c      	b.n	80041c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <osMessageQueuePut+0x82>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004192:	f06f 0303 	mvn.w	r3, #3
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e012      	b.n	80041c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800419a:	2300      	movs	r3, #0
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	69b8      	ldr	r0, [r7, #24]
 80041a2:	f000 faa1 	bl	80046e8 <xQueueGenericSend>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d009      	beq.n	80041c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80041b2:	f06f 0301 	mvn.w	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e002      	b.n	80041c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80041ba:	f06f 0302 	mvn.w	r3, #2
 80041be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80041c0:	69fb      	ldr	r3, [r7, #28]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e6:	f3ef 8305 	mrs	r3, IPSR
 80041ea:	617b      	str	r3, [r7, #20]
  return(result);
 80041ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d028      	beq.n	8004244 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <osMessageQueueGet+0x34>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <osMessageQueueGet+0x34>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004204:	f06f 0303 	mvn.w	r3, #3
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	e037      	b.n	800427c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004210:	f107 0310 	add.w	r3, r7, #16
 8004214:	461a      	mov	r2, r3
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	69b8      	ldr	r0, [r7, #24]
 800421a:	f000 fce7 	bl	8004bec <xQueueReceiveFromISR>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d003      	beq.n	800422c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004224:	f06f 0302 	mvn.w	r3, #2
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	e027      	b.n	800427c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d024      	beq.n	800427c <osMessageQueueGet+0xac>
 8004232:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <osMessageQueueGet+0xb8>)
 8004234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	e01b      	b.n	800427c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <osMessageQueueGet+0x80>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004250:	f06f 0303 	mvn.w	r3, #3
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e011      	b.n	800427c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	69b8      	ldr	r0, [r7, #24]
 800425e:	f000 fbe3 	bl	8004a28 <xQueueReceive>
 8004262:	4603      	mov	r3, r0
 8004264:	2b01      	cmp	r3, #1
 8004266:	d009      	beq.n	800427c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800426e:	f06f 0301 	mvn.w	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e002      	b.n	800427c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004276:	f06f 0302 	mvn.w	r3, #2
 800427a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800427c:	69fb      	ldr	r3, [r7, #28]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a07      	ldr	r2, [pc, #28]	@ (80042b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800429c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4a06      	ldr	r2, [pc, #24]	@ (80042bc <vApplicationGetIdleTaskMemory+0x30>)
 80042a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2280      	movs	r2, #128	@ 0x80
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000258 	.word	0x20000258
 80042bc:	20000300 	.word	0x20000300

080042c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a07      	ldr	r2, [pc, #28]	@ (80042ec <vApplicationGetTimerTaskMemory+0x2c>)
 80042d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a06      	ldr	r2, [pc, #24]	@ (80042f0 <vApplicationGetTimerTaskMemory+0x30>)
 80042d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042de:	601a      	str	r2, [r3, #0]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000500 	.word	0x20000500
 80042f0:	200005a8 	.word	0x200005a8

080042f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f103 0208 	add.w	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 0208 	add.w	r2, r3, #8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f103 0208 	add.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d103      	bne.n	80043b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e00c      	b.n	80043d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3308      	adds	r3, #8
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e002      	b.n	80043c4 <vListInsert+0x2e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d2f6      	bcs.n	80043be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6892      	ldr	r2, [r2, #8]
 800441e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6852      	ldr	r2, [r2, #4]
 8004428:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d103      	bne.n	800443c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004488:	f002 f966 	bl	8006758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	441a      	add	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b8:	3b01      	subs	r3, #1
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	22ff      	movs	r2, #255	@ 0xff
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	22ff      	movs	r2, #255	@ 0xff
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d114      	bne.n	8004508 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01a      	beq.n	800451c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3310      	adds	r3, #16
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fa00 	bl	80058f0 <xTaskRemoveFromEventList>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d012      	beq.n	800451c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <xQueueGenericReset+0xd0>)
 80044f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	e009      	b.n	800451c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3310      	adds	r3, #16
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fef1 	bl	80042f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3324      	adds	r3, #36	@ 0x24
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff feec 	bl	80042f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800451c:	f002 f94e 	bl	80067bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004520:	2301      	movs	r3, #1
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	e000ed04 	.word	0xe000ed04

08004530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	@ 0x38
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	e7fd      	b.n	8004576 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <xQueueGenericCreateStatic+0x56>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <xQueueGenericCreateStatic+0x5a>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueGenericCreateStatic+0x5c>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <xQueueGenericCreateStatic+0x84>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <xQueueGenericCreateStatic+0x88>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <xQueueGenericCreateStatic+0x8a>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	61fb      	str	r3, [r7, #28]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d6:	2350      	movs	r3, #80	@ 0x50
 80045d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b50      	cmp	r3, #80	@ 0x50
 80045de:	d00b      	beq.n	80045f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	61bb      	str	r3, [r7, #24]
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80045fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800460c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f840 	bl	80046a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004622:	4618      	mov	r0, r3
 8004624:	3730      	adds	r7, #48	@ 0x30
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800462a:	b580      	push	{r7, lr}
 800462c:	b08a      	sub	sp, #40	@ 0x28
 800462e:	af02      	add	r7, sp, #8
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xQueueGenericCreate+0x2c>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	613b      	str	r3, [r7, #16]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3350      	adds	r3, #80	@ 0x50
 8004664:	4618      	mov	r0, r3
 8004666:	f002 f999 	bl	800699c <pvPortMalloc>
 800466a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d011      	beq.n	8004696 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3350      	adds	r3, #80	@ 0x50
 800467a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004684:	79fa      	ldrb	r2, [r7, #7]
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f805 	bl	80046a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004696:	69bb      	ldr	r3, [r7, #24]
	}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d103      	bne.n	80046bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e002      	b.n	80046c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046ce:	2101      	movs	r1, #1
 80046d0:	69b8      	ldr	r0, [r7, #24]
 80046d2:	f7ff fec3 	bl	800445c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08e      	sub	sp, #56	@ 0x38
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046f6:	2300      	movs	r3, #0
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <xQueueGenericSend+0x34>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <xQueueGenericSend+0x42>
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <xQueueGenericSend+0x46>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <xQueueGenericSend+0x48>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <xQueueGenericSend+0x64>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d103      	bne.n	800475a <xQueueGenericSend+0x72>
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <xQueueGenericSend+0x76>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericSend+0x78>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <xQueueGenericSend+0x94>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	623b      	str	r3, [r7, #32]
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800477c:	f001 fa7e 	bl	8005c7c <xTaskGetSchedulerState>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <xQueueGenericSend+0xa4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <xQueueGenericSend+0xa8>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <xQueueGenericSend+0xaa>
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <xQueueGenericSend+0xc6>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	61fb      	str	r3, [r7, #28]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ae:	f001 ffd3 	bl	8006758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <xQueueGenericSend+0xdc>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d129      	bne.n	8004818 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ca:	f000 fa91 	bl	8004cf0 <prvCopyDataToQueue>
 80047ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	3324      	adds	r3, #36	@ 0x24
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 f887 	bl	80058f0 <xTaskRemoveFromEventList>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d013      	beq.n	8004810 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047e8:	4b3f      	ldr	r3, [pc, #252]	@ (80048e8 <xQueueGenericSend+0x200>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	e00a      	b.n	8004810 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004800:	4b39      	ldr	r3, [pc, #228]	@ (80048e8 <xQueueGenericSend+0x200>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004810:	f001 ffd4 	bl	80067bc <vPortExitCritical>
				return pdPASS;
 8004814:	2301      	movs	r3, #1
 8004816:	e063      	b.n	80048e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800481e:	f001 ffcd 	bl	80067bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004822:	2300      	movs	r3, #0
 8004824:	e05c      	b.n	80048e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4618      	mov	r0, r3
 8004832:	f001 f8c1 	bl	80059b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004836:	2301      	movs	r3, #1
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800483a:	f001 ffbf 	bl	80067bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800483e:	f000 fe29 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004842:	f001 ff89 	bl	8006758 <vPortEnterCritical>
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800484c:	b25b      	sxtb	r3, r3
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d103      	bne.n	800485c <xQueueGenericSend+0x174>
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004862:	b25b      	sxtb	r3, r3
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d103      	bne.n	8004872 <xQueueGenericSend+0x18a>
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004872:	f001 ffa3 	bl	80067bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f8b0 	bl	80059e4 <xTaskCheckForTimeOut>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d124      	bne.n	80048d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800488a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800488c:	f000 fb28 	bl	8004ee0 <prvIsQueueFull>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	3310      	adds	r3, #16
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 ffd4 	bl	800584c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048a6:	f000 fab3 	bl	8004e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048aa:	f000 fe01 	bl	80054b0 <xTaskResumeAll>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f af7c 	bne.w	80047ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048b6:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <xQueueGenericSend+0x200>)
 80048b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	e772      	b.n	80047ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ca:	f000 faa1 	bl	8004e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ce:	f000 fdef 	bl	80054b0 <xTaskResumeAll>
 80048d2:	e76c      	b.n	80047ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d6:	f000 fa9b 	bl	8004e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048da:	f000 fde9 	bl	80054b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3738      	adds	r7, #56	@ 0x38
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b090      	sub	sp, #64	@ 0x40
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <xQueueGenericSendFromISR+0x3e>
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <xQueueGenericSendFromISR+0x42>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueGenericSendFromISR+0x44>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d103      	bne.n	800495a <xQueueGenericSendFromISR+0x6e>
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <xQueueGenericSendFromISR+0x72>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueGenericSendFromISR+0x74>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	623b      	str	r3, [r7, #32]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800497c:	f001 ffcc 	bl	8006918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004980:	f3ef 8211 	mrs	r2, BASEPRI
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004998:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <xQueueGenericSendFromISR+0xc2>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d12f      	bne.n	8004a0e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049c4:	f000 f994 	bl	8004cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d112      	bne.n	80049f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	3324      	adds	r3, #36	@ 0x24
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ff86 	bl	80058f0 <xTaskRemoveFromEventList>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e007      	b.n	8004a08 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049fc:	3301      	adds	r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	b25a      	sxtb	r2, r3
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a0c:	e001      	b.n	8004a12 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3740      	adds	r7, #64	@ 0x40
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	@ 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <xQueueReceive+0x32>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	623b      	str	r3, [r7, #32]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <xQueueReceive+0x40>
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <xQueueReceive+0x44>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <xQueueReceive+0x46>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <xQueueReceive+0x62>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	61fb      	str	r3, [r7, #28]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a8a:	f001 f8f7 	bl	8005c7c <xTaskGetSchedulerState>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <xQueueReceive+0x72>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xQueueReceive+0x76>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueReceive+0x78>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <xQueueReceive+0x94>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61bb      	str	r3, [r7, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004abc:	f001 fe4c 	bl	8006758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01f      	beq.n	8004b0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad0:	f000 f978 	bl	8004dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	1e5a      	subs	r2, r3, #1
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00f      	beq.n	8004b04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	3310      	adds	r3, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 ff01 	bl	80058f0 <xTaskRemoveFromEventList>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004af4:	4b3c      	ldr	r3, [pc, #240]	@ (8004be8 <xQueueReceive+0x1c0>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b04:	f001 fe5a 	bl	80067bc <vPortExitCritical>
				return pdPASS;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e069      	b.n	8004be0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b12:	f001 fe53 	bl	80067bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e062      	b.n	8004be0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b20:	f107 0310 	add.w	r3, r7, #16
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 ff47 	bl	80059b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b2e:	f001 fe45 	bl	80067bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b32:	f000 fcaf 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b36:	f001 fe0f 	bl	8006758 <vPortEnterCritical>
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d103      	bne.n	8004b50 <xQueueReceive+0x128>
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b56:	b25b      	sxtb	r3, r3
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d103      	bne.n	8004b66 <xQueueReceive+0x13e>
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b66:	f001 fe29 	bl	80067bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b6a:	1d3a      	adds	r2, r7, #4
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 ff36 	bl	80059e4 <xTaskCheckForTimeOut>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d123      	bne.n	8004bc6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b80:	f000 f998 	bl	8004eb4 <prvIsQueueEmpty>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d017      	beq.n	8004bba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	3324      	adds	r3, #36	@ 0x24
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fe5a 	bl	800584c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b9a:	f000 f939 	bl	8004e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b9e:	f000 fc87 	bl	80054b0 <xTaskResumeAll>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d189      	bne.n	8004abc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <xQueueReceive+0x1c0>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	e780      	b.n	8004abc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bbc:	f000 f928 	bl	8004e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc0:	f000 fc76 	bl	80054b0 <xTaskResumeAll>
 8004bc4:	e77a      	b.n	8004abc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc8:	f000 f922 	bl	8004e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bcc:	f000 fc70 	bl	80054b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd2:	f000 f96f 	bl	8004eb4 <prvIsQueueEmpty>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f43f af6f 	beq.w	8004abc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3730      	adds	r7, #48	@ 0x30
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08e      	sub	sp, #56	@ 0x38
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	623b      	str	r3, [r7, #32]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <xQueueReceiveFromISR+0x3c>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <xQueueReceiveFromISR+0x40>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <xQueueReceiveFromISR+0x42>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	61fb      	str	r3, [r7, #28]
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	e7fd      	b.n	8004c46 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c4a:	f001 fe65 	bl	8006918 <vPortValidateInterruptPriority>
	__asm volatile
 8004c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	61ba      	str	r2, [r7, #24]
 8004c64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02f      	beq.n	8004cd6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c84:	f000 f89e 	bl	8004dc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	1e5a      	subs	r2, r3, #1
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d112      	bne.n	8004cc0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	3310      	adds	r3, #16
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fe22 	bl	80058f0 <xTaskRemoveFromEventList>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e007      	b.n	8004cd0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	b25a      	sxtb	r2, r3
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd4:	e001      	b.n	8004cda <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f383 8811 	msr	BASEPRI, r3
}
 8004ce4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3738      	adds	r7, #56	@ 0x38
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d14d      	bne.n	8004db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 ffcc 	bl	8005cb8 <xTaskPriorityDisinherit>
 8004d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	e043      	b.n	8004db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d119      	bne.n	8004d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6858      	ldr	r0, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	f002 f8d0 	bl	8006ee0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d32b      	bcc.n	8004db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	e026      	b.n	8004db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68d8      	ldr	r0, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	f002 f8b6 	bl	8006ee0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d207      	bcs.n	8004da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	425b      	negs	r3, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d105      	bne.n	8004db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004dba:	697b      	ldr	r3, [r7, #20]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	441a      	add	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d303      	bcc.n	8004df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68d9      	ldr	r1, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	461a      	mov	r2, r3
 8004e02:	6838      	ldr	r0, [r7, #0]
 8004e04:	f002 f86c 	bl	8006ee0 <memcpy>
	}
}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e18:	f001 fc9e 	bl	8006758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e24:	e011      	b.n	8004e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3324      	adds	r3, #36	@ 0x24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fd5c 	bl	80058f0 <xTaskRemoveFromEventList>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e3e:	f000 fe35 	bl	8005aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	dce9      	bgt.n	8004e26 <prvUnlockQueue+0x16>
 8004e52:	e000      	b.n	8004e56 <prvUnlockQueue+0x46>
					break;
 8004e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	22ff      	movs	r2, #255	@ 0xff
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e5e:	f001 fcad 	bl	80067bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e62:	f001 fc79 	bl	8006758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e6e:	e011      	b.n	8004e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3310      	adds	r3, #16
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fd37 	bl	80058f0 <xTaskRemoveFromEventList>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e88:	f000 fe10 	bl	8005aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dce9      	bgt.n	8004e70 <prvUnlockQueue+0x60>
 8004e9c:	e000      	b.n	8004ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	22ff      	movs	r2, #255	@ 0xff
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ea8:	f001 fc88 	bl	80067bc <vPortExitCritical>
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ebc:	f001 fc4c 	bl	8006758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e001      	b.n	8004ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ed2:	f001 fc73 	bl	80067bc <vPortExitCritical>

	return xReturn;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ee8:	f001 fc36 	bl	8006758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d102      	bne.n	8004efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e001      	b.n	8004f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f02:	f001 fc5b 	bl	80067bc <vPortExitCritical>

	return xReturn;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e014      	b.n	8004f4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f20:	4a0f      	ldr	r2, [pc, #60]	@ (8004f60 <vQueueAddToRegistry+0x50>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f2c:	490c      	ldr	r1, [pc, #48]	@ (8004f60 <vQueueAddToRegistry+0x50>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f36:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <vQueueAddToRegistry+0x50>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f42:	e006      	b.n	8004f52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d9e7      	bls.n	8004f20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	200009a8 	.word	0x200009a8

08004f64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f74:	f001 fbf0 	bl	8006758 <vPortEnterCritical>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d103      	bne.n	8004f8e <vQueueWaitForMessageRestricted+0x2a>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d103      	bne.n	8004fa4 <vQueueWaitForMessageRestricted+0x40>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa4:	f001 fc0a 	bl	80067bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3324      	adds	r3, #36	@ 0x24
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fc6d 	bl	8005898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff ff26 	bl	8004e10 <prvUnlockQueue>
	}
 8004fc4:	bf00      	nop
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	@ 0x38
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	623b      	str	r3, [r7, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	61fb      	str	r3, [r7, #28]
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop
 8005014:	e7fd      	b.n	8005012 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005016:	23a8      	movs	r3, #168	@ 0xa8
 8005018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2ba8      	cmp	r3, #168	@ 0xa8
 800501e:	d00b      	beq.n	8005038 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	61bb      	str	r3, [r7, #24]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005038:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01e      	beq.n	800507e <xTaskCreateStatic+0xb2>
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	2202      	movs	r2, #2
 8005054:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005058:	2300      	movs	r3, #0
 800505a:	9303      	str	r3, [sp, #12]
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	9302      	str	r3, [sp, #8]
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f851 	bl	8005118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005078:	f000 f8f6 	bl	8005268 <prvAddNewTaskToReadyList>
 800507c:	e001      	b.n	8005082 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005082:	697b      	ldr	r3, [r7, #20]
	}
 8005084:	4618      	mov	r0, r3
 8005086:	3728      	adds	r7, #40	@ 0x28
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08c      	sub	sp, #48	@ 0x30
 8005090:	af04      	add	r7, sp, #16
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 fc7b 	bl	800699c <pvPortMalloc>
 80050a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00e      	beq.n	80050cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050ae:	20a8      	movs	r0, #168	@ 0xa8
 80050b0:	f001 fc74 	bl	800699c <pvPortMalloc>
 80050b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80050c2:	e005      	b.n	80050d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050c4:	6978      	ldr	r0, [r7, #20]
 80050c6:	f001 fd37 	bl	8006b38 <vPortFree>
 80050ca:	e001      	b.n	80050d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9303      	str	r3, [sp, #12]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	9302      	str	r3, [sp, #8]
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f80f 	bl	8005118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050fa:	69f8      	ldr	r0, [r7, #28]
 80050fc:	f000 f8b4 	bl	8005268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005100:	2301      	movs	r3, #1
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e002      	b.n	800510c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800510c:	69bb      	ldr	r3, [r7, #24]
	}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	21a5      	movs	r1, #165	@ 0xa5
 8005132:	f001 fe43 	bl	8006dbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005140:	3b01      	subs	r3, #1
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	617b      	str	r3, [r7, #20]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01f      	beq.n	80051b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e012      	b.n	80051a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	7819      	ldrb	r1, [r3, #0]
 8005186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	3334      	adds	r3, #52	@ 0x34
 800518e:	460a      	mov	r2, r1
 8005190:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3301      	adds	r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	d9e9      	bls.n	800517e <prvInitialiseNewTask+0x66>
 80051aa:	e000      	b.n	80051ae <prvInitialiseNewTask+0x96>
			{
				break;
 80051ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051b6:	e003      	b.n	80051c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	2b37      	cmp	r3, #55	@ 0x37
 80051c4:	d901      	bls.n	80051ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051c6:	2337      	movs	r3, #55	@ 0x37
 80051c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2200      	movs	r2, #0
 80051da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	3304      	adds	r3, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f8a7 	bl	8004334 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	3318      	adds	r3, #24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff f8a2 	bl	8004334 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005204:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	2200      	movs	r2, #0
 800520a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	3354      	adds	r3, #84	@ 0x54
 800521a:	224c      	movs	r2, #76	@ 0x4c
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fdcc 	bl	8006dbc <memset>
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	4a0d      	ldr	r2, [pc, #52]	@ (800525c <prvInitialiseNewTask+0x144>)
 8005228:	659a      	str	r2, [r3, #88]	@ 0x58
 800522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522c:	4a0c      	ldr	r2, [pc, #48]	@ (8005260 <prvInitialiseNewTask+0x148>)
 800522e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	4a0c      	ldr	r2, [pc, #48]	@ (8005264 <prvInitialiseNewTask+0x14c>)
 8005234:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	68f9      	ldr	r1, [r7, #12]
 800523a:	69b8      	ldr	r0, [r7, #24]
 800523c:	f001 f95a 	bl	80064f4 <pxPortInitialiseStack>
 8005240:	4602      	mov	r2, r0
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005252:	bf00      	nop
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20004c3c 	.word	0x20004c3c
 8005260:	20004ca4 	.word	0x20004ca4
 8005264:	20004d0c 	.word	0x20004d0c

08005268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005270:	f001 fa72 	bl	8006758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005274:	4b2d      	ldr	r3, [pc, #180]	@ (800532c <prvAddNewTaskToReadyList+0xc4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	4a2c      	ldr	r2, [pc, #176]	@ (800532c <prvAddNewTaskToReadyList+0xc4>)
 800527c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800527e:	4b2c      	ldr	r3, [pc, #176]	@ (8005330 <prvAddNewTaskToReadyList+0xc8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005286:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <prvAddNewTaskToReadyList+0xc8>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800528c:	4b27      	ldr	r3, [pc, #156]	@ (800532c <prvAddNewTaskToReadyList+0xc4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d110      	bne.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005294:	f000 fc2e 	bl	8005af4 <prvInitialiseTaskLists>
 8005298:	e00d      	b.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800529a:	4b26      	ldr	r3, [pc, #152]	@ (8005334 <prvAddNewTaskToReadyList+0xcc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052a2:	4b23      	ldr	r3, [pc, #140]	@ (8005330 <prvAddNewTaskToReadyList+0xc8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d802      	bhi.n	80052b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005330 <prvAddNewTaskToReadyList+0xc8>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052b6:	4b20      	ldr	r3, [pc, #128]	@ (8005338 <prvAddNewTaskToReadyList+0xd0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <prvAddNewTaskToReadyList+0xd0>)
 80052be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <prvAddNewTaskToReadyList+0xd0>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <prvAddNewTaskToReadyList+0xd4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d903      	bls.n	80052dc <prvAddNewTaskToReadyList+0x74>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d8:	4a18      	ldr	r2, [pc, #96]	@ (800533c <prvAddNewTaskToReadyList+0xd4>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a15      	ldr	r2, [pc, #84]	@ (8005340 <prvAddNewTaskToReadyList+0xd8>)
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f7ff f82b 	bl	800434e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 fa60 	bl	80067bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <prvAddNewTaskToReadyList+0xcc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <prvAddNewTaskToReadyList+0xc8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530e:	429a      	cmp	r2, r3
 8005310:	d207      	bcs.n	8005322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005312:	4b0c      	ldr	r3, [pc, #48]	@ (8005344 <prvAddNewTaskToReadyList+0xdc>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000ebc 	.word	0x20000ebc
 8005330:	200009e8 	.word	0x200009e8
 8005334:	20000ec8 	.word	0x20000ec8
 8005338:	20000ed8 	.word	0x20000ed8
 800533c:	20000ec4 	.word	0x20000ec4
 8005340:	200009ec 	.word	0x200009ec
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d018      	beq.n	800538c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800535a:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <vTaskDelay+0x64>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <vTaskDelay+0x32>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800537a:	f000 f88b 	bl	8005494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800537e:	2100      	movs	r1, #0
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fd09 	bl	8005d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005386:	f000 f893 	bl	80054b0 <xTaskResumeAll>
 800538a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005392:	4b07      	ldr	r3, [pc, #28]	@ (80053b0 <vTaskDelay+0x68>)
 8005394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000ee4 	.word	0x20000ee4
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053c2:	463a      	mov	r2, r7
 80053c4:	1d39      	adds	r1, r7, #4
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe ff5e 	bl	800428c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	9202      	str	r2, [sp, #8]
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2300      	movs	r3, #0
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	460a      	mov	r2, r1
 80053e2:	4924      	ldr	r1, [pc, #144]	@ (8005474 <vTaskStartScheduler+0xc0>)
 80053e4:	4824      	ldr	r0, [pc, #144]	@ (8005478 <vTaskStartScheduler+0xc4>)
 80053e6:	f7ff fdf1 	bl	8004fcc <xTaskCreateStatic>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a23      	ldr	r2, [pc, #140]	@ (800547c <vTaskStartScheduler+0xc8>)
 80053ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053f0:	4b22      	ldr	r3, [pc, #136]	@ (800547c <vTaskStartScheduler+0xc8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053f8:	2301      	movs	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e001      	b.n	8005402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d102      	bne.n	800540e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005408:	f000 fd1a 	bl	8005e40 <xTimerCreateTimerTask>
 800540c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d11b      	bne.n	800544c <vTaskStartScheduler+0x98>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	613b      	str	r3, [r7, #16]
}
 8005426:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005428:	4b15      	ldr	r3, [pc, #84]	@ (8005480 <vTaskStartScheduler+0xcc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3354      	adds	r3, #84	@ 0x54
 800542e:	4a15      	ldr	r2, [pc, #84]	@ (8005484 <vTaskStartScheduler+0xd0>)
 8005430:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <vTaskStartScheduler+0xd4>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800543a:	4b14      	ldr	r3, [pc, #80]	@ (800548c <vTaskStartScheduler+0xd8>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005440:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <vTaskStartScheduler+0xdc>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005446:	f001 f8e3 	bl	8006610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800544a:	e00f      	b.n	800546c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d10b      	bne.n	800546c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60fb      	str	r3, [r7, #12]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <vTaskStartScheduler+0xb4>
}
 800546c:	bf00      	nop
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	08007820 	.word	0x08007820
 8005478:	08005ac5 	.word	0x08005ac5
 800547c:	20000ee0 	.word	0x20000ee0
 8005480:	200009e8 	.word	0x200009e8
 8005484:	20000010 	.word	0x20000010
 8005488:	20000edc 	.word	0x20000edc
 800548c:	20000ec8 	.word	0x20000ec8
 8005490:	20000ec0 	.word	0x20000ec0

08005494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <vTaskSuspendAll+0x18>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a03      	ldr	r2, [pc, #12]	@ (80054ac <vTaskSuspendAll+0x18>)
 80054a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	20000ee4 	.word	0x20000ee4

080054b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054be:	4b42      	ldr	r3, [pc, #264]	@ (80055c8 <xTaskResumeAll+0x118>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <xTaskResumeAll+0x2e>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	603b      	str	r3, [r7, #0]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054de:	f001 f93b 	bl	8006758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054e2:	4b39      	ldr	r3, [pc, #228]	@ (80055c8 <xTaskResumeAll+0x118>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	4a37      	ldr	r2, [pc, #220]	@ (80055c8 <xTaskResumeAll+0x118>)
 80054ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ec:	4b36      	ldr	r3, [pc, #216]	@ (80055c8 <xTaskResumeAll+0x118>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d162      	bne.n	80055ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054f4:	4b35      	ldr	r3, [pc, #212]	@ (80055cc <xTaskResumeAll+0x11c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d05e      	beq.n	80055ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054fc:	e02f      	b.n	800555e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054fe:	4b34      	ldr	r3, [pc, #208]	@ (80055d0 <xTaskResumeAll+0x120>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3318      	adds	r3, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe ff7c 	bl	8004408 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3304      	adds	r3, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe ff77 	bl	8004408 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551e:	4b2d      	ldr	r3, [pc, #180]	@ (80055d4 <xTaskResumeAll+0x124>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d903      	bls.n	800552e <xTaskResumeAll+0x7e>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <xTaskResumeAll+0x124>)
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4a27      	ldr	r2, [pc, #156]	@ (80055d8 <xTaskResumeAll+0x128>)
 800553c:	441a      	add	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f7fe ff02 	bl	800434e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554e:	4b23      	ldr	r3, [pc, #140]	@ (80055dc <xTaskResumeAll+0x12c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	429a      	cmp	r2, r3
 8005556:	d302      	bcc.n	800555e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005558:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <xTaskResumeAll+0x130>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800555e:	4b1c      	ldr	r3, [pc, #112]	@ (80055d0 <xTaskResumeAll+0x120>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1cb      	bne.n	80054fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800556c:	f000 fb66 	bl	8005c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005570:	4b1c      	ldr	r3, [pc, #112]	@ (80055e4 <xTaskResumeAll+0x134>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d010      	beq.n	800559e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800557c:	f000 f846 	bl	800560c <xTaskIncrementTick>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005586:	4b16      	ldr	r3, [pc, #88]	@ (80055e0 <xTaskResumeAll+0x130>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f1      	bne.n	800557c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005598:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <xTaskResumeAll+0x134>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800559e:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <xTaskResumeAll+0x130>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055a6:	2301      	movs	r3, #1
 80055a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055aa:	4b0f      	ldr	r3, [pc, #60]	@ (80055e8 <xTaskResumeAll+0x138>)
 80055ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ba:	f001 f8ff 	bl	80067bc <vPortExitCritical>

	return xAlreadyYielded;
 80055be:	68bb      	ldr	r3, [r7, #8]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000ee4 	.word	0x20000ee4
 80055cc:	20000ebc 	.word	0x20000ebc
 80055d0:	20000e7c 	.word	0x20000e7c
 80055d4:	20000ec4 	.word	0x20000ec4
 80055d8:	200009ec 	.word	0x200009ec
 80055dc:	200009e8 	.word	0x200009e8
 80055e0:	20000ed0 	.word	0x20000ed0
 80055e4:	20000ecc 	.word	0x20000ecc
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055f2:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <xTaskGetTickCount+0x1c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055f8:	687b      	ldr	r3, [r7, #4]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000ec0 	.word	0x20000ec0

0800560c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005616:	4b4f      	ldr	r3, [pc, #316]	@ (8005754 <xTaskIncrementTick+0x148>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 8090 	bne.w	8005740 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005620:	4b4d      	ldr	r3, [pc, #308]	@ (8005758 <xTaskIncrementTick+0x14c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005628:	4a4b      	ldr	r2, [pc, #300]	@ (8005758 <xTaskIncrementTick+0x14c>)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d121      	bne.n	8005678 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005634:	4b49      	ldr	r3, [pc, #292]	@ (800575c <xTaskIncrementTick+0x150>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <xTaskIncrementTick+0x4a>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	603b      	str	r3, [r7, #0]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <xTaskIncrementTick+0x46>
 8005656:	4b41      	ldr	r3, [pc, #260]	@ (800575c <xTaskIncrementTick+0x150>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	4b40      	ldr	r3, [pc, #256]	@ (8005760 <xTaskIncrementTick+0x154>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a3e      	ldr	r2, [pc, #248]	@ (800575c <xTaskIncrementTick+0x150>)
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4a3e      	ldr	r2, [pc, #248]	@ (8005760 <xTaskIncrementTick+0x154>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <xTaskIncrementTick+0x158>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	4a3c      	ldr	r2, [pc, #240]	@ (8005764 <xTaskIncrementTick+0x158>)
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	f000 fae2 	bl	8005c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005678:	4b3b      	ldr	r3, [pc, #236]	@ (8005768 <xTaskIncrementTick+0x15c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d349      	bcc.n	8005716 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005682:	4b36      	ldr	r3, [pc, #216]	@ (800575c <xTaskIncrementTick+0x150>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568c:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <xTaskIncrementTick+0x15c>)
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	601a      	str	r2, [r3, #0]
					break;
 8005694:	e03f      	b.n	8005716 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b31      	ldr	r3, [pc, #196]	@ (800575c <xTaskIncrementTick+0x150>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d203      	bcs.n	80056b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005768 <xTaskIncrementTick+0x15c>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056b4:	e02f      	b.n	8005716 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fea4 	bl	8004408 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3318      	adds	r3, #24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe fe9b 	bl	8004408 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d6:	4b25      	ldr	r3, [pc, #148]	@ (800576c <xTaskIncrementTick+0x160>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d903      	bls.n	80056e6 <xTaskIncrementTick+0xda>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	4a22      	ldr	r2, [pc, #136]	@ (800576c <xTaskIncrementTick+0x160>)
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <xTaskIncrementTick+0x164>)
 80056f4:	441a      	add	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe fe26 	bl	800434e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <xTaskIncrementTick+0x168>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	429a      	cmp	r2, r3
 800570e:	d3b8      	bcc.n	8005682 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005714:	e7b5      	b.n	8005682 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005716:	4b17      	ldr	r3, [pc, #92]	@ (8005774 <xTaskIncrementTick+0x168>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4914      	ldr	r1, [pc, #80]	@ (8005770 <xTaskIncrementTick+0x164>)
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d901      	bls.n	8005732 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005732:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <xTaskIncrementTick+0x16c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e004      	b.n	800574a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005740:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <xTaskIncrementTick+0x170>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	4a0d      	ldr	r2, [pc, #52]	@ (800577c <xTaskIncrementTick+0x170>)
 8005748:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800574a:	697b      	ldr	r3, [r7, #20]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000ee4 	.word	0x20000ee4
 8005758:	20000ec0 	.word	0x20000ec0
 800575c:	20000e74 	.word	0x20000e74
 8005760:	20000e78 	.word	0x20000e78
 8005764:	20000ed4 	.word	0x20000ed4
 8005768:	20000edc 	.word	0x20000edc
 800576c:	20000ec4 	.word	0x20000ec4
 8005770:	200009ec 	.word	0x200009ec
 8005774:	200009e8 	.word	0x200009e8
 8005778:	20000ed0 	.word	0x20000ed0
 800577c:	20000ecc 	.word	0x20000ecc

08005780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005786:	4b2b      	ldr	r3, [pc, #172]	@ (8005834 <vTaskSwitchContext+0xb4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800578e:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <vTaskSwitchContext+0xb8>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005794:	e047      	b.n	8005826 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005796:	4b28      	ldr	r3, [pc, #160]	@ (8005838 <vTaskSwitchContext+0xb8>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579c:	4b27      	ldr	r3, [pc, #156]	@ (800583c <vTaskSwitchContext+0xbc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e011      	b.n	80057c8 <vTaskSwitchContext+0x48>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <vTaskSwitchContext+0x3e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	491d      	ldr	r1, [pc, #116]	@ (8005840 <vTaskSwitchContext+0xc0>)
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0e3      	beq.n	80057a4 <vTaskSwitchContext+0x24>
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <vTaskSwitchContext+0xc0>)
 80057e8:	4413      	add	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	3308      	adds	r3, #8
 80057fe:	429a      	cmp	r2, r3
 8005800:	d104      	bne.n	800580c <vTaskSwitchContext+0x8c>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4a0c      	ldr	r2, [pc, #48]	@ (8005844 <vTaskSwitchContext+0xc4>)
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4a09      	ldr	r2, [pc, #36]	@ (800583c <vTaskSwitchContext+0xbc>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <vTaskSwitchContext+0xc4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3354      	adds	r3, #84	@ 0x54
 8005822:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <vTaskSwitchContext+0xc8>)
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000ee4 	.word	0x20000ee4
 8005838:	20000ed0 	.word	0x20000ed0
 800583c:	20000ec4 	.word	0x20000ec4
 8005840:	200009ec 	.word	0x200009ec
 8005844:	200009e8 	.word	0x200009e8
 8005848:	20000010 	.word	0x20000010

0800584c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60fb      	str	r3, [r7, #12]
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005874:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <vTaskPlaceOnEventList+0x48>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3318      	adds	r3, #24
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fe fd8a 	bl	8004396 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005882:	2101      	movs	r1, #1
 8005884:	6838      	ldr	r0, [r7, #0]
 8005886:	f000 fa87 	bl	8005d98 <prvAddCurrentTaskToDelayedList>
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200009e8 	.word	0x200009e8

08005898 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	617b      	str	r3, [r7, #20]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058c2:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <vTaskPlaceOnEventListRestricted+0x54>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3318      	adds	r3, #24
 80058c8:	4619      	mov	r1, r3
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7fe fd3f 	bl	800434e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
 80058da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68b8      	ldr	r0, [r7, #8]
 80058e0:	f000 fa5a 	bl	8005d98 <prvAddCurrentTaskToDelayedList>
	}
 80058e4:	bf00      	nop
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200009e8 	.word	0x200009e8

080058f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3318      	adds	r3, #24
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe fd70 	bl	8004408 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005928:	4b1d      	ldr	r3, [pc, #116]	@ (80059a0 <xTaskRemoveFromEventList+0xb0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d11d      	bne.n	800596c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	3304      	adds	r3, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe fd67 	bl	8004408 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593e:	4b19      	ldr	r3, [pc, #100]	@ (80059a4 <xTaskRemoveFromEventList+0xb4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d903      	bls.n	800594e <xTaskRemoveFromEventList+0x5e>
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <xTaskRemoveFromEventList+0xb4>)
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a13      	ldr	r2, [pc, #76]	@ (80059a8 <xTaskRemoveFromEventList+0xb8>)
 800595c:	441a      	add	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3304      	adds	r3, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7fe fcf2 	bl	800434e <vListInsertEnd>
 800596a:	e005      	b.n	8005978 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3318      	adds	r3, #24
 8005970:	4619      	mov	r1, r3
 8005972:	480e      	ldr	r0, [pc, #56]	@ (80059ac <xTaskRemoveFromEventList+0xbc>)
 8005974:	f7fe fceb 	bl	800434e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597c:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <xTaskRemoveFromEventList+0xc0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005982:	429a      	cmp	r2, r3
 8005984:	d905      	bls.n	8005992 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800598a:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <xTaskRemoveFromEventList+0xc4>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e001      	b.n	8005996 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005996:	697b      	ldr	r3, [r7, #20]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000ee4 	.word	0x20000ee4
 80059a4:	20000ec4 	.word	0x20000ec4
 80059a8:	200009ec 	.word	0x200009ec
 80059ac:	20000e7c 	.word	0x20000e7c
 80059b0:	200009e8 	.word	0x200009e8
 80059b4:	20000ed0 	.word	0x20000ed0

080059b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <vTaskInternalSetTimeOutState+0x24>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <vTaskInternalSetTimeOutState+0x28>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000ed4 	.word	0x20000ed4
 80059e0:	20000ec0 	.word	0x20000ec0

080059e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	613b      	str	r3, [r7, #16]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10b      	bne.n	8005a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	60fb      	str	r3, [r7, #12]
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	e7fd      	b.n	8005a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a2a:	f000 fe95 	bl	8006758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <xTaskCheckForTimeOut+0xc0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d102      	bne.n	8005a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e023      	b.n	8005a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b15      	ldr	r3, [pc, #84]	@ (8005aa8 <xTaskCheckForTimeOut+0xc4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d007      	beq.n	8005a6a <xTaskCheckForTimeOut+0x86>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d302      	bcc.n	8005a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e015      	b.n	8005a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d20b      	bcs.n	8005a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff99 	bl	80059b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e004      	b.n	8005a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a96:	f000 fe91 	bl	80067bc <vPortExitCritical>

	return xReturn;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000ec0 	.word	0x20000ec0
 8005aa8:	20000ed4 	.word	0x20000ed4

08005aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	@ (8005ac0 <vTaskMissedYield+0x14>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000ed0 	.word	0x20000ed0

08005ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005acc:	f000 f852 	bl	8005b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <prvIdleTask+0x28>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d9f9      	bls.n	8005acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <prvIdleTask+0x2c>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ae8:	e7f0      	b.n	8005acc <prvIdleTask+0x8>
 8005aea:	bf00      	nop
 8005aec:	200009ec 	.word	0x200009ec
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	e00c      	b.n	8005b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4a12      	ldr	r2, [pc, #72]	@ (8005b54 <prvInitialiseTaskLists+0x60>)
 8005b0c:	4413      	add	r3, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fbf0 	bl	80042f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b37      	cmp	r3, #55	@ 0x37
 8005b1e:	d9ef      	bls.n	8005b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b20:	480d      	ldr	r0, [pc, #52]	@ (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b22:	f7fe fbe7 	bl	80042f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b26:	480d      	ldr	r0, [pc, #52]	@ (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b28:	f7fe fbe4 	bl	80042f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b2c:	480c      	ldr	r0, [pc, #48]	@ (8005b60 <prvInitialiseTaskLists+0x6c>)
 8005b2e:	f7fe fbe1 	bl	80042f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b32:	480c      	ldr	r0, [pc, #48]	@ (8005b64 <prvInitialiseTaskLists+0x70>)
 8005b34:	f7fe fbde 	bl	80042f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b38:	480b      	ldr	r0, [pc, #44]	@ (8005b68 <prvInitialiseTaskLists+0x74>)
 8005b3a:	f7fe fbdb 	bl	80042f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <prvInitialiseTaskLists+0x78>)
 8005b40:	4a05      	ldr	r2, [pc, #20]	@ (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <prvInitialiseTaskLists+0x7c>)
 8005b46:	4a05      	ldr	r2, [pc, #20]	@ (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200009ec 	.word	0x200009ec
 8005b58:	20000e4c 	.word	0x20000e4c
 8005b5c:	20000e60 	.word	0x20000e60
 8005b60:	20000e7c 	.word	0x20000e7c
 8005b64:	20000e90 	.word	0x20000e90
 8005b68:	20000ea8 	.word	0x20000ea8
 8005b6c:	20000e74 	.word	0x20000e74
 8005b70:	20000e78 	.word	0x20000e78

08005b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7a:	e019      	b.n	8005bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b7c:	f000 fdec 	bl	8006758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <prvCheckTasksWaitingTermination+0x50>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe fc3b 	bl	8004408 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ba6:	f000 fe09 	bl	80067bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f810 	bl	8005bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e1      	bne.n	8005b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000e90 	.word	0x20000e90
 8005bc8:	20000ebc 	.word	0x20000ebc
 8005bcc:	20000ea4 	.word	0x20000ea4

08005bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3354      	adds	r3, #84	@ 0x54
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 f8f5 	bl	8006dcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 ffa1 	bl	8006b38 <vPortFree>
				vPortFree( pxTCB );
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 ff9e 	bl	8006b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bfc:	e019      	b.n	8005c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d103      	bne.n	8005c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 ff95 	bl	8006b38 <vPortFree>
	}
 8005c0e:	e010      	b.n	8005c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d00b      	beq.n	8005c32 <prvDeleteTCB+0x62>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <prvDeleteTCB+0x5e>
	}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <prvResetNextTaskUnblockTime+0x38>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <prvResetNextTaskUnblockTime+0x3c>)
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c54:	e008      	b.n	8005c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c56:	4b07      	ldr	r3, [pc, #28]	@ (8005c74 <prvResetNextTaskUnblockTime+0x38>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a04      	ldr	r2, [pc, #16]	@ (8005c78 <prvResetNextTaskUnblockTime+0x3c>)
 8005c66:	6013      	str	r3, [r2, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20000e74 	.word	0x20000e74
 8005c78:	20000edc 	.word	0x20000edc

08005c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c82:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <xTaskGetSchedulerState+0x34>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	e008      	b.n	8005ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c90:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <xTaskGetSchedulerState+0x38>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	e001      	b.n	8005ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ca2:	687b      	ldr	r3, [r7, #4]
	}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000ec8 	.word	0x20000ec8
 8005cb4:	20000ee4 	.word	0x20000ee4

08005cb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d058      	beq.n	8005d80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cce:	4b2f      	ldr	r3, [pc, #188]	@ (8005d8c <xTaskPriorityDisinherit+0xd4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d00b      	beq.n	8005cf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60fb      	str	r3, [r7, #12]
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60bb      	str	r3, [r7, #8]
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d14:	1e5a      	subs	r2, r3, #1
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d02c      	beq.n	8005d80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d128      	bne.n	8005d80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fb68 	bl	8004408 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d50:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <xTaskPriorityDisinherit+0xd8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d903      	bls.n	8005d60 <xTaskPriorityDisinherit+0xa8>
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <xTaskPriorityDisinherit+0xd8>)
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4a09      	ldr	r2, [pc, #36]	@ (8005d94 <xTaskPriorityDisinherit+0xdc>)
 8005d6e:	441a      	add	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f7fe fae9 	bl	800434e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d80:	697b      	ldr	r3, [r7, #20]
	}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200009e8 	.word	0x200009e8
 8005d90:	20000ec4 	.word	0x20000ec4
 8005d94:	200009ec 	.word	0x200009ec

08005d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005da2:	4b21      	ldr	r3, [pc, #132]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0x90>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da8:	4b20      	ldr	r3, [pc, #128]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fb2a 	bl	8004408 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d10a      	bne.n	8005dd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4819      	ldr	r0, [pc, #100]	@ (8005e30 <prvAddCurrentTaskToDelayedList+0x98>)
 8005dcc:	f7fe fabf 	bl	800434e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dd0:	e026      	b.n	8005e20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dda:	4b14      	ldr	r3, [pc, #80]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d209      	bcs.n	8005dfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dea:	4b12      	ldr	r3, [pc, #72]	@ (8005e34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b0f      	ldr	r3, [pc, #60]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fe facd 	bl	8004396 <vListInsert>
}
 8005dfc:	e010      	b.n	8005e20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005e38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b0a      	ldr	r3, [pc, #40]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fe fac3 	bl	8004396 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e10:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d202      	bcs.n	8005e20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e1a:	4a08      	ldr	r2, [pc, #32]	@ (8005e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000ec0 	.word	0x20000ec0
 8005e2c:	200009e8 	.word	0x200009e8
 8005e30:	20000ea8 	.word	0x20000ea8
 8005e34:	20000e78 	.word	0x20000e78
 8005e38:	20000e74 	.word	0x20000e74
 8005e3c:	20000edc 	.word	0x20000edc

08005e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	@ 0x28
 8005e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e4a:	f000 fb13 	bl	8006474 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <xTimerCreateTimerTask+0x84>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d021      	beq.n	8005e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e5e:	1d3a      	adds	r2, r7, #4
 8005e60:	f107 0108 	add.w	r1, r7, #8
 8005e64:	f107 030c 	add.w	r3, r7, #12
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe fa29 	bl	80042c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	9202      	str	r2, [sp, #8]
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	2302      	movs	r3, #2
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	460a      	mov	r2, r1
 8005e80:	4911      	ldr	r1, [pc, #68]	@ (8005ec8 <xTimerCreateTimerTask+0x88>)
 8005e82:	4812      	ldr	r0, [pc, #72]	@ (8005ecc <xTimerCreateTimerTask+0x8c>)
 8005e84:	f7ff f8a2 	bl	8004fcc <xTaskCreateStatic>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4a11      	ldr	r2, [pc, #68]	@ (8005ed0 <xTimerCreateTimerTask+0x90>)
 8005e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ed0 <xTimerCreateTimerTask+0x90>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e96:	2301      	movs	r3, #1
 8005e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005eb8:	697b      	ldr	r3, [r7, #20]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000f18 	.word	0x20000f18
 8005ec8:	08007828 	.word	0x08007828
 8005ecc:	0800600d 	.word	0x0800600d
 8005ed0:	20000f1c 	.word	0x20000f1c

08005ed4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	@ 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <xTimerGenericCommand+0x30>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	623b      	str	r3, [r7, #32]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f04:	4b19      	ldr	r3, [pc, #100]	@ (8005f6c <xTimerGenericCommand+0x98>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02a      	beq.n	8005f62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	dc18      	bgt.n	8005f50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f1e:	f7ff fead 	bl	8005c7c <xTaskGetSchedulerState>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d109      	bne.n	8005f3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f28:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <xTimerGenericCommand+0x98>)
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	f107 0110 	add.w	r1, r7, #16
 8005f30:	2300      	movs	r3, #0
 8005f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f34:	f7fe fbd8 	bl	80046e8 <xQueueGenericSend>
 8005f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f3a:	e012      	b.n	8005f62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <xTimerGenericCommand+0x98>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	f107 0110 	add.w	r1, r7, #16
 8005f44:	2300      	movs	r3, #0
 8005f46:	2200      	movs	r2, #0
 8005f48:	f7fe fbce 	bl	80046e8 <xQueueGenericSend>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f4e:	e008      	b.n	8005f62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f50:	4b06      	ldr	r3, [pc, #24]	@ (8005f6c <xTimerGenericCommand+0x98>)
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	f107 0110 	add.w	r1, r7, #16
 8005f58:	2300      	movs	r3, #0
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	f7fe fcc6 	bl	80048ec <xQueueGenericSendFromISR>
 8005f60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3728      	adds	r7, #40	@ 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000f18 	.word	0x20000f18

08005f70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7a:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <prvProcessExpiredTimer+0x98>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe fa3d 	bl	8004408 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d023      	beq.n	8005fe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	18d1      	adds	r1, r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	6978      	ldr	r0, [r7, #20]
 8005faa:	f000 f8d5 	bl	8006158 <prvInsertTimerInActiveList>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	6978      	ldr	r0, [r7, #20]
 8005fc0:	f7ff ff88 	bl	8005ed4 <xTimerGenericCommand>
 8005fc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d114      	bne.n	8005ff6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	4798      	blx	r3
}
 8005ffe:	bf00      	nop
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000f10 	.word	0x20000f10

0800600c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f859 	bl	80060d0 <prvGetNextExpireTime>
 800601e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4619      	mov	r1, r3
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f805 	bl	8006034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800602a:	f000 f8d7 	bl	80061dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800602e:	bf00      	nop
 8006030:	e7f0      	b.n	8006014 <prvTimerTask+0x8>
	...

08006034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800603e:	f7ff fa29 	bl	8005494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006042:	f107 0308 	add.w	r3, r7, #8
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f866 	bl	8006118 <prvSampleTimeNow>
 800604c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d130      	bne.n	80060b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <prvProcessTimerOrBlockTask+0x3c>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	429a      	cmp	r2, r3
 8006060:	d806      	bhi.n	8006070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006062:	f7ff fa25 	bl	80054b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff ff81 	bl	8005f70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800606e:	e024      	b.n	80060ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d008      	beq.n	8006088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006076:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <prvProcessTimerOrBlockTask+0x90>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <prvProcessTimerOrBlockTask+0x50>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <prvProcessTimerOrBlockTask+0x52>
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <prvProcessTimerOrBlockTask+0x94>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4619      	mov	r1, r3
 8006096:	f7fe ff65 	bl	8004f64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800609a:	f7ff fa09 	bl	80054b0 <xTaskResumeAll>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060a4:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <prvProcessTimerOrBlockTask+0x98>)
 80060a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	f3bf 8f6f 	isb	sy
}
 80060b4:	e001      	b.n	80060ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060b6:	f7ff f9fb 	bl	80054b0 <xTaskResumeAll>
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000f14 	.word	0x20000f14
 80060c8:	20000f18 	.word	0x20000f18
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006114 <prvGetNextExpireTime+0x44>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <prvGetNextExpireTime+0x16>
 80060e2:	2201      	movs	r2, #1
 80060e4:	e000      	b.n	80060e8 <prvGetNextExpireTime+0x18>
 80060e6:	2200      	movs	r2, #0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f4:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <prvGetNextExpireTime+0x44>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e001      	b.n	8006104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006104:	68fb      	ldr	r3, [r7, #12]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000f10 	.word	0x20000f10

08006118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006120:	f7ff fa64 	bl	80055ec <xTaskGetTickCount>
 8006124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <prvSampleTimeNow+0x3c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d205      	bcs.n	800613c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006130:	f000 f93a 	bl	80063a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e002      	b.n	8006142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006142:	4a04      	ldr	r2, [pc, #16]	@ (8006154 <prvSampleTimeNow+0x3c>)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006148:	68fb      	ldr	r3, [r7, #12]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000f20 	.word	0x20000f20

08006158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d812      	bhi.n	80061a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800618c:	2301      	movs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e01b      	b.n	80061ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006192:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <prvInsertTimerInActiveList+0x7c>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fe f8fa 	bl	8004396 <vListInsert>
 80061a2:	e012      	b.n	80061ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d206      	bcs.n	80061ba <prvInsertTimerInActiveList+0x62>
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e007      	b.n	80061ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ba:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <prvInsertTimerInActiveList+0x80>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fe f8e6 	bl	8004396 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061ca:	697b      	ldr	r3, [r7, #20]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000f14 	.word	0x20000f14
 80061d8:	20000f10 	.word	0x20000f10

080061dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08e      	sub	sp, #56	@ 0x38
 80061e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061e2:	e0ce      	b.n	8006382 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da19      	bge.n	800621e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	3304      	adds	r3, #4
 80061ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	61fb      	str	r3, [r7, #28]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006214:	6850      	ldr	r0, [r2, #4]
 8006216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	4611      	mov	r1, r2
 800621c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f2c0 80ae 	blt.w	8006382 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	3304      	adds	r3, #4
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe f8e6 	bl	8004408 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800623c:	463b      	mov	r3, r7
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff6a 	bl	8006118 <prvSampleTimeNow>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b09      	cmp	r3, #9
 800624a:	f200 8097 	bhi.w	800637c <prvProcessReceivedCommands+0x1a0>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <prvProcessReceivedCommands+0x78>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	0800627d 	.word	0x0800627d
 8006258:	0800627d 	.word	0x0800627d
 800625c:	0800627d 	.word	0x0800627d
 8006260:	080062f3 	.word	0x080062f3
 8006264:	08006307 	.word	0x08006307
 8006268:	08006353 	.word	0x08006353
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800627d 	.word	0x0800627d
 8006274:	080062f3 	.word	0x080062f3
 8006278:	08006307 	.word	0x08006307
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	b2da      	uxtb	r2, r3
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	18d1      	adds	r1, r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800629a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800629c:	f7ff ff5c 	bl	8006158 <prvInsertTimerInActiveList>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d06c      	beq.n	8006380 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d061      	beq.n	8006380 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	441a      	add	r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	2100      	movs	r1, #0
 80062cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ce:	f7ff fe01 	bl	8005ed4 <xTimerGenericCommand>
 80062d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d152      	bne.n	8006380 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	61bb      	str	r3, [r7, #24]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006304:	e03d      	b.n	8006382 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	b2da      	uxtb	r2, r3
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	617b      	str	r3, [r7, #20]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	18d1      	adds	r1, r2, r3
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634c:	f7ff ff04 	bl	8006158 <prvInsertTimerInActiveList>
					break;
 8006350:	e017      	b.n	8006382 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006362:	f000 fbe9 	bl	8006b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006366:	e00c      	b.n	8006382 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800637a:	e002      	b.n	8006382 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <prvProcessReceivedCommands+0x1a6>
					break;
 8006380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006382:	4b08      	ldr	r3, [pc, #32]	@ (80063a4 <prvProcessReceivedCommands+0x1c8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	1d39      	adds	r1, r7, #4
 8006388:	2200      	movs	r2, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fb4c 	bl	8004a28 <xQueueReceive>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af26 	bne.w	80061e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	3730      	adds	r7, #48	@ 0x30
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000f18 	.word	0x20000f18

080063a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ae:	e049      	b.n	8006444 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b0:	4b2e      	ldr	r3, [pc, #184]	@ (800646c <prvSwitchTimerLists+0xc4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b2c      	ldr	r3, [pc, #176]	@ (800646c <prvSwitchTimerLists+0xc4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe f81d 	bl	8004408 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02f      	beq.n	8006444 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d90e      	bls.n	8006414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006402:	4b1a      	ldr	r3, [pc, #104]	@ (800646c <prvSwitchTimerLists+0xc4>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fd ffc2 	bl	8004396 <vListInsert>
 8006412:	e017      	b.n	8006444 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006414:	2300      	movs	r3, #0
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2300      	movs	r3, #0
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	2100      	movs	r1, #0
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fd58 	bl	8005ed4 <xTimerGenericCommand>
 8006424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	603b      	str	r3, [r7, #0]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006444:	4b09      	ldr	r3, [pc, #36]	@ (800646c <prvSwitchTimerLists+0xc4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1b0      	bne.n	80063b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800644e:	4b07      	ldr	r3, [pc, #28]	@ (800646c <prvSwitchTimerLists+0xc4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <prvSwitchTimerLists+0xc8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a04      	ldr	r2, [pc, #16]	@ (800646c <prvSwitchTimerLists+0xc4>)
 800645a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800645c:	4a04      	ldr	r2, [pc, #16]	@ (8006470 <prvSwitchTimerLists+0xc8>)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6013      	str	r3, [r2, #0]
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000f10 	.word	0x20000f10
 8006470:	20000f14 	.word	0x20000f14

08006474 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800647a:	f000 f96d 	bl	8006758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800647e:	4b15      	ldr	r3, [pc, #84]	@ (80064d4 <prvCheckForValidListAndQueue+0x60>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d120      	bne.n	80064c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006486:	4814      	ldr	r0, [pc, #80]	@ (80064d8 <prvCheckForValidListAndQueue+0x64>)
 8006488:	f7fd ff34 	bl	80042f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800648c:	4813      	ldr	r0, [pc, #76]	@ (80064dc <prvCheckForValidListAndQueue+0x68>)
 800648e:	f7fd ff31 	bl	80042f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006492:	4b13      	ldr	r3, [pc, #76]	@ (80064e0 <prvCheckForValidListAndQueue+0x6c>)
 8006494:	4a10      	ldr	r2, [pc, #64]	@ (80064d8 <prvCheckForValidListAndQueue+0x64>)
 8006496:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006498:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <prvCheckForValidListAndQueue+0x70>)
 800649a:	4a10      	ldr	r2, [pc, #64]	@ (80064dc <prvCheckForValidListAndQueue+0x68>)
 800649c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800649e:	2300      	movs	r3, #0
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4b11      	ldr	r3, [pc, #68]	@ (80064e8 <prvCheckForValidListAndQueue+0x74>)
 80064a4:	4a11      	ldr	r2, [pc, #68]	@ (80064ec <prvCheckForValidListAndQueue+0x78>)
 80064a6:	2110      	movs	r1, #16
 80064a8:	200a      	movs	r0, #10
 80064aa:	f7fe f841 	bl	8004530 <xQueueGenericCreateStatic>
 80064ae:	4603      	mov	r3, r0
 80064b0:	4a08      	ldr	r2, [pc, #32]	@ (80064d4 <prvCheckForValidListAndQueue+0x60>)
 80064b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064b4:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <prvCheckForValidListAndQueue+0x60>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <prvCheckForValidListAndQueue+0x60>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	490b      	ldr	r1, [pc, #44]	@ (80064f0 <prvCheckForValidListAndQueue+0x7c>)
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fd24 	bl	8004f10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064c8:	f000 f978 	bl	80067bc <vPortExitCritical>
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000f18 	.word	0x20000f18
 80064d8:	20000ee8 	.word	0x20000ee8
 80064dc:	20000efc 	.word	0x20000efc
 80064e0:	20000f10 	.word	0x20000f10
 80064e4:	20000f14 	.word	0x20000f14
 80064e8:	20000fc4 	.word	0x20000fc4
 80064ec:	20000f24 	.word	0x20000f24
 80064f0:	08007830 	.word	0x08007830

080064f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b04      	subs	r3, #4
 8006504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800650c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3b04      	subs	r3, #4
 8006512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3b04      	subs	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006524:	4a0c      	ldr	r2, [pc, #48]	@ (8006558 <pxPortInitialiseStack+0x64>)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3b14      	subs	r3, #20
 800652e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b04      	subs	r3, #4
 800653a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f06f 0202 	mvn.w	r2, #2
 8006542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3b20      	subs	r3, #32
 8006548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800654a:	68fb      	ldr	r3, [r7, #12]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	0800655d 	.word	0x0800655d

0800655c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006566:	4b13      	ldr	r3, [pc, #76]	@ (80065b4 <prvTaskExitError+0x58>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d00b      	beq.n	8006588 <prvTaskExitError+0x2c>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	60fb      	str	r3, [r7, #12]
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <prvTaskExitError+0x28>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	60bb      	str	r3, [r7, #8]
}
 800659a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800659c:	bf00      	nop
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0fc      	beq.n	800659e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	2000000c 	.word	0x2000000c
	...

080065c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	@ (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	4770      	bx	lr
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst2>:
 80065e0:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065e8:	4808      	ldr	r0, [pc, #32]	@ (800660c <prvPortStartFirstTask+0x24>)
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f380 8808 	msr	MSP, r0
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8814 	msr	CONTROL, r0
 80065fa:	b662      	cpsie	i
 80065fc:	b661      	cpsie	f
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	df00      	svc	0
 8006608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800660a:	bf00      	nop
 800660c:	e000ed08 	.word	0xe000ed08

08006610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006616:	4b47      	ldr	r3, [pc, #284]	@ (8006734 <xPortStartScheduler+0x124>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a47      	ldr	r2, [pc, #284]	@ (8006738 <xPortStartScheduler+0x128>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10b      	bne.n	8006638 <xPortStartScheduler+0x28>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60fb      	str	r3, [r7, #12]
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	e7fd      	b.n	8006634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006638:	4b3e      	ldr	r3, [pc, #248]	@ (8006734 <xPortStartScheduler+0x124>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a3f      	ldr	r2, [pc, #252]	@ (800673c <xPortStartScheduler+0x12c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10b      	bne.n	800665a <xPortStartScheduler+0x4a>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	613b      	str	r3, [r7, #16]
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	e7fd      	b.n	8006656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800665a:	4b39      	ldr	r3, [pc, #228]	@ (8006740 <xPortStartScheduler+0x130>)
 800665c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	22ff      	movs	r2, #255	@ 0xff
 800666a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800667c:	b2da      	uxtb	r2, r3
 800667e:	4b31      	ldr	r3, [pc, #196]	@ (8006744 <xPortStartScheduler+0x134>)
 8006680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006682:	4b31      	ldr	r3, [pc, #196]	@ (8006748 <xPortStartScheduler+0x138>)
 8006684:	2207      	movs	r2, #7
 8006686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006688:	e009      	b.n	800669e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800668a:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <xPortStartScheduler+0x138>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3b01      	subs	r3, #1
 8006690:	4a2d      	ldr	r2, [pc, #180]	@ (8006748 <xPortStartScheduler+0x138>)
 8006692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a6:	2b80      	cmp	r3, #128	@ 0x80
 80066a8:	d0ef      	beq.n	800668a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066aa:	4b27      	ldr	r3, [pc, #156]	@ (8006748 <xPortStartScheduler+0x138>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1c3 0307 	rsb	r3, r3, #7
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d00b      	beq.n	80066ce <xPortStartScheduler+0xbe>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60bb      	str	r3, [r7, #8]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006748 <xPortStartScheduler+0x138>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006748 <xPortStartScheduler+0x138>)
 80066d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <xPortStartScheduler+0x138>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066e0:	4a19      	ldr	r2, [pc, #100]	@ (8006748 <xPortStartScheduler+0x138>)
 80066e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066ec:	4b17      	ldr	r3, [pc, #92]	@ (800674c <xPortStartScheduler+0x13c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a16      	ldr	r2, [pc, #88]	@ (800674c <xPortStartScheduler+0x13c>)
 80066f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066f8:	4b14      	ldr	r3, [pc, #80]	@ (800674c <xPortStartScheduler+0x13c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a13      	ldr	r2, [pc, #76]	@ (800674c <xPortStartScheduler+0x13c>)
 80066fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006704:	f000 f8da 	bl	80068bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006708:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <xPortStartScheduler+0x140>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800670e:	f000 f8f9 	bl	8006904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006712:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <xPortStartScheduler+0x144>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a0f      	ldr	r2, [pc, #60]	@ (8006754 <xPortStartScheduler+0x144>)
 8006718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800671c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800671e:	f7ff ff63 	bl	80065e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006722:	f7ff f82d 	bl	8005780 <vTaskSwitchContext>
	prvTaskExitError();
 8006726:	f7ff ff19 	bl	800655c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	e000ed00 	.word	0xe000ed00
 8006738:	410fc271 	.word	0x410fc271
 800673c:	410fc270 	.word	0x410fc270
 8006740:	e000e400 	.word	0xe000e400
 8006744:	20001014 	.word	0x20001014
 8006748:	20001018 	.word	0x20001018
 800674c:	e000ed20 	.word	0xe000ed20
 8006750:	2000000c 	.word	0x2000000c
 8006754:	e000ef34 	.word	0xe000ef34

08006758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006772:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <vPortEnterCritical+0x5c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	4a0e      	ldr	r2, [pc, #56]	@ (80067b4 <vPortEnterCritical+0x5c>)
 800677a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800677c:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <vPortEnterCritical+0x5c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d110      	bne.n	80067a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006784:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <vPortEnterCritical+0x60>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	603b      	str	r3, [r7, #0]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <vPortEnterCritical+0x4a>
	}
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	2000000c 	.word	0x2000000c
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067c2:	4b12      	ldr	r3, [pc, #72]	@ (800680c <vPortExitCritical+0x50>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <vPortExitCritical+0x26>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	607b      	str	r3, [r7, #4]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <vPortExitCritical+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	4a08      	ldr	r2, [pc, #32]	@ (800680c <vPortExitCritical+0x50>)
 80067ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067ec:	4b07      	ldr	r3, [pc, #28]	@ (800680c <vPortExitCritical+0x50>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <vPortExitCritical+0x44>
 80067f4:	2300      	movs	r3, #0
 80067f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	2000000c 	.word	0x2000000c

08006810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006810:	f3ef 8009 	mrs	r0, PSP
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4b15      	ldr	r3, [pc, #84]	@ (8006870 <pxCurrentTCBConst>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f01e 0f10 	tst.w	lr, #16
 8006820:	bf08      	it	eq
 8006822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006834:	f380 8811 	msr	BASEPRI, r0
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f7fe ff9e 	bl	8005780 <vTaskSwitchContext>
 8006844:	f04f 0000 	mov.w	r0, #0
 8006848:	f380 8811 	msr	BASEPRI, r0
 800684c:	bc09      	pop	{r0, r3}
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006856:	f01e 0f10 	tst.w	lr, #16
 800685a:	bf08      	it	eq
 800685c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006860:	f380 8809 	msr	PSP, r0
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	f3af 8000 	nop.w

08006870 <pxCurrentTCBConst>:
 8006870:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop

08006878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006892:	f7fe febb 	bl	800560c <xTaskIncrementTick>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800689c:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <xPortSysTickHandler+0x40>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
}
 80068ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <vPortSetupTimerInterrupt+0x38>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068cc:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <vPortSetupTimerInterrupt+0x3c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0a      	ldr	r2, [pc, #40]	@ (80068fc <vPortSetupTimerInterrupt+0x40>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	4a09      	ldr	r2, [pc, #36]	@ (8006900 <vPortSetupTimerInterrupt+0x44>)
 80068da:	3b01      	subs	r3, #1
 80068dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068de:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <vPortSetupTimerInterrupt+0x34>)
 80068e0:	2207      	movs	r2, #7
 80068e2:	601a      	str	r2, [r3, #0]
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	e000e010 	.word	0xe000e010
 80068f4:	e000e018 	.word	0xe000e018
 80068f8:	20000000 	.word	0x20000000
 80068fc:	10624dd3 	.word	0x10624dd3
 8006900:	e000e014 	.word	0xe000e014

08006904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006914 <vPortEnableVFP+0x10>
 8006908:	6801      	ldr	r1, [r0, #0]
 800690a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800690e:	6001      	str	r1, [r0, #0]
 8006910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006912:	bf00      	nop
 8006914:	e000ed88 	.word	0xe000ed88

08006918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800691e:	f3ef 8305 	mrs	r3, IPSR
 8006922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d915      	bls.n	8006956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800692a:	4a18      	ldr	r2, [pc, #96]	@ (800698c <vPortValidateInterruptPriority+0x74>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006934:	4b16      	ldr	r3, [pc, #88]	@ (8006990 <vPortValidateInterruptPriority+0x78>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	7afa      	ldrb	r2, [r7, #11]
 800693a:	429a      	cmp	r2, r3
 800693c:	d20b      	bcs.n	8006956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006956:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <vPortValidateInterruptPriority+0x7c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800695e:	4b0e      	ldr	r3, [pc, #56]	@ (8006998 <vPortValidateInterruptPriority+0x80>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d90b      	bls.n	800697e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	603b      	str	r3, [r7, #0]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vPortValidateInterruptPriority+0x62>
	}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	e000e3f0 	.word	0xe000e3f0
 8006990:	20001014 	.word	0x20001014
 8006994:	e000ed0c 	.word	0xe000ed0c
 8006998:	20001018 	.word	0x20001018

0800699c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069a8:	f7fe fd74 	bl	8005494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006b20 <pvPortMalloc+0x184>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069b4:	f000 f924 	bl	8006c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b24 <pvPortMalloc+0x188>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 8095 	bne.w	8006af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069cc:	2208      	movs	r2, #8
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d015      	beq.n	8006a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f023 0307 	bic.w	r3, r3, #7
 80069e4:	3308      	adds	r3, #8
 80069e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <pvPortMalloc+0x6e>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	617b      	str	r3, [r7, #20]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d06f      	beq.n	8006af0 <pvPortMalloc+0x154>
 8006a10:	4b45      	ldr	r3, [pc, #276]	@ (8006b28 <pvPortMalloc+0x18c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d86a      	bhi.n	8006af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a1a:	4b44      	ldr	r3, [pc, #272]	@ (8006b2c <pvPortMalloc+0x190>)
 8006a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a1e:	4b43      	ldr	r3, [pc, #268]	@ (8006b2c <pvPortMalloc+0x190>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a24:	e004      	b.n	8006a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d903      	bls.n	8006a42 <pvPortMalloc+0xa6>
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f1      	bne.n	8006a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a42:	4b37      	ldr	r3, [pc, #220]	@ (8006b20 <pvPortMalloc+0x184>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d051      	beq.n	8006af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2208      	movs	r2, #8
 8006a52:	4413      	add	r3, r2
 8006a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad2      	subs	r2, r2, r3
 8006a66:	2308      	movs	r3, #8
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d920      	bls.n	8006ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <pvPortMalloc+0xfc>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aaa:	69b8      	ldr	r0, [r7, #24]
 8006aac:	f000 f90a 	bl	8006cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b28 <pvPortMalloc+0x18c>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <pvPortMalloc+0x18c>)
 8006abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006abe:	4b1a      	ldr	r3, [pc, #104]	@ (8006b28 <pvPortMalloc+0x18c>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b30 <pvPortMalloc+0x194>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d203      	bcs.n	8006ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aca:	4b17      	ldr	r3, [pc, #92]	@ (8006b28 <pvPortMalloc+0x18c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <pvPortMalloc+0x194>)
 8006ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4b13      	ldr	r3, [pc, #76]	@ (8006b24 <pvPortMalloc+0x188>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ae6:	4b13      	ldr	r3, [pc, #76]	@ (8006b34 <pvPortMalloc+0x198>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3301      	adds	r3, #1
 8006aec:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <pvPortMalloc+0x198>)
 8006aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006af0:	f7fe fcde 	bl	80054b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <pvPortMalloc+0x17a>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	60fb      	str	r3, [r7, #12]
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <pvPortMalloc+0x176>
	return pvReturn;
 8006b16:	69fb      	ldr	r3, [r7, #28]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3728      	adds	r7, #40	@ 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20004c24 	.word	0x20004c24
 8006b24:	20004c38 	.word	0x20004c38
 8006b28:	20004c28 	.word	0x20004c28
 8006b2c:	20004c1c 	.word	0x20004c1c
 8006b30:	20004c2c 	.word	0x20004c2c
 8006b34:	20004c30 	.word	0x20004c30

08006b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04f      	beq.n	8006bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b4a:	2308      	movs	r3, #8
 8006b4c:	425b      	negs	r3, r3
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4413      	add	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4b25      	ldr	r3, [pc, #148]	@ (8006bf4 <vPortFree+0xbc>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <vPortFree+0x46>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60fb      	str	r3, [r7, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <vPortFree+0x66>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4b14      	ldr	r3, [pc, #80]	@ (8006bf4 <vPortFree+0xbc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01e      	beq.n	8006bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11a      	bne.n	8006bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf4 <vPortFree+0xbc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bc4:	f7fe fc66 	bl	8005494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <vPortFree+0xc0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	4a09      	ldr	r2, [pc, #36]	@ (8006bf8 <vPortFree+0xc0>)
 8006bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bd6:	6938      	ldr	r0, [r7, #16]
 8006bd8:	f000 f874 	bl	8006cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bdc:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <vPortFree+0xc4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	4a06      	ldr	r2, [pc, #24]	@ (8006bfc <vPortFree+0xc4>)
 8006be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006be6:	f7fe fc63 	bl	80054b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bea:	bf00      	nop
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20004c38 	.word	0x20004c38
 8006bf8:	20004c28 	.word	0x20004c28
 8006bfc:	20004c34 	.word	0x20004c34

08006c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c0c:	4b27      	ldr	r3, [pc, #156]	@ (8006cac <prvHeapInit+0xac>)
 8006c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3307      	adds	r3, #7
 8006c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0307 	bic.w	r3, r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cac <prvHeapInit+0xac>)
 8006c30:	4413      	add	r3, r2
 8006c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c38:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb0 <prvHeapInit+0xb0>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb0 <prvHeapInit+0xb0>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a15      	ldr	r2, [pc, #84]	@ (8006cb4 <prvHeapInit+0xb4>)
 8006c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <prvHeapInit+0xb4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c6a:	4b12      	ldr	r3, [pc, #72]	@ (8006cb4 <prvHeapInit+0xb4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	1ad2      	subs	r2, r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c80:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb4 <prvHeapInit+0xb4>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb8 <prvHeapInit+0xb8>)
 8006c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4a09      	ldr	r2, [pc, #36]	@ (8006cbc <prvHeapInit+0xbc>)
 8006c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c98:	4b09      	ldr	r3, [pc, #36]	@ (8006cc0 <prvHeapInit+0xc0>)
 8006c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c9e:	601a      	str	r2, [r3, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	2000101c 	.word	0x2000101c
 8006cb0:	20004c1c 	.word	0x20004c1c
 8006cb4:	20004c24 	.word	0x20004c24
 8006cb8:	20004c2c 	.word	0x20004c2c
 8006cbc:	20004c28 	.word	0x20004c28
 8006cc0:	20004c38 	.word	0x20004c38

08006cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ccc:	4b28      	ldr	r3, [pc, #160]	@ (8006d70 <prvInsertBlockIntoFreeList+0xac>)
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e002      	b.n	8006cd8 <prvInsertBlockIntoFreeList+0x14>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d8f7      	bhi.n	8006cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d108      	bne.n	8006d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d118      	bne.n	8006d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b15      	ldr	r3, [pc, #84]	@ (8006d74 <prvInsertBlockIntoFreeList+0xb0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d00d      	beq.n	8006d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e008      	b.n	8006d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d42:	4b0c      	ldr	r3, [pc, #48]	@ (8006d74 <prvInsertBlockIntoFreeList+0xb0>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e003      	b.n	8006d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d002      	beq.n	8006d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	20004c1c 	.word	0x20004c1c
 8006d74:	20004c24 	.word	0x20004c24

08006d78 <siprintf>:
 8006d78:	b40e      	push	{r1, r2, r3}
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	b09d      	sub	sp, #116	@ 0x74
 8006d7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d80:	9002      	str	r0, [sp, #8]
 8006d82:	9006      	str	r0, [sp, #24]
 8006d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d88:	480a      	ldr	r0, [pc, #40]	@ (8006db4 <siprintf+0x3c>)
 8006d8a:	9107      	str	r1, [sp, #28]
 8006d8c:	9104      	str	r1, [sp, #16]
 8006d8e:	490a      	ldr	r1, [pc, #40]	@ (8006db8 <siprintf+0x40>)
 8006d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d94:	9105      	str	r1, [sp, #20]
 8006d96:	2400      	movs	r4, #0
 8006d98:	a902      	add	r1, sp, #8
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006da0:	f000 fa00 	bl	80071a4 <_svfiprintf_r>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	701c      	strb	r4, [r3, #0]
 8006da8:	b01d      	add	sp, #116	@ 0x74
 8006daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dae:	b003      	add	sp, #12
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000010 	.word	0x20000010
 8006db8:	ffff0208 	.word	0xffff0208

08006dbc <memset>:
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d100      	bne.n	8006dc6 <memset+0xa>
 8006dc4:	4770      	bx	lr
 8006dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dca:	e7f9      	b.n	8006dc0 <memset+0x4>

08006dcc <_reclaim_reent>:
 8006dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8006e84 <_reclaim_reent+0xb8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4283      	cmp	r3, r0
 8006dd2:	b570      	push	{r4, r5, r6, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	d053      	beq.n	8006e80 <_reclaim_reent+0xb4>
 8006dd8:	69c3      	ldr	r3, [r0, #28]
 8006dda:	b31b      	cbz	r3, 8006e24 <_reclaim_reent+0x58>
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	b163      	cbz	r3, 8006dfa <_reclaim_reent+0x2e>
 8006de0:	2500      	movs	r5, #0
 8006de2:	69e3      	ldr	r3, [r4, #28]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	5959      	ldr	r1, [r3, r5]
 8006de8:	b9b1      	cbnz	r1, 8006e18 <_reclaim_reent+0x4c>
 8006dea:	3504      	adds	r5, #4
 8006dec:	2d80      	cmp	r5, #128	@ 0x80
 8006dee:	d1f8      	bne.n	8006de2 <_reclaim_reent+0x16>
 8006df0:	69e3      	ldr	r3, [r4, #28]
 8006df2:	4620      	mov	r0, r4
 8006df4:	68d9      	ldr	r1, [r3, #12]
 8006df6:	f000 f881 	bl	8006efc <_free_r>
 8006dfa:	69e3      	ldr	r3, [r4, #28]
 8006dfc:	6819      	ldr	r1, [r3, #0]
 8006dfe:	b111      	cbz	r1, 8006e06 <_reclaim_reent+0x3a>
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 f87b 	bl	8006efc <_free_r>
 8006e06:	69e3      	ldr	r3, [r4, #28]
 8006e08:	689d      	ldr	r5, [r3, #8]
 8006e0a:	b15d      	cbz	r5, 8006e24 <_reclaim_reent+0x58>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4620      	mov	r0, r4
 8006e10:	682d      	ldr	r5, [r5, #0]
 8006e12:	f000 f873 	bl	8006efc <_free_r>
 8006e16:	e7f8      	b.n	8006e0a <_reclaim_reent+0x3e>
 8006e18:	680e      	ldr	r6, [r1, #0]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 f86e 	bl	8006efc <_free_r>
 8006e20:	4631      	mov	r1, r6
 8006e22:	e7e1      	b.n	8006de8 <_reclaim_reent+0x1c>
 8006e24:	6961      	ldr	r1, [r4, #20]
 8006e26:	b111      	cbz	r1, 8006e2e <_reclaim_reent+0x62>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 f867 	bl	8006efc <_free_r>
 8006e2e:	69e1      	ldr	r1, [r4, #28]
 8006e30:	b111      	cbz	r1, 8006e38 <_reclaim_reent+0x6c>
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 f862 	bl	8006efc <_free_r>
 8006e38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e3a:	b111      	cbz	r1, 8006e42 <_reclaim_reent+0x76>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 f85d 	bl	8006efc <_free_r>
 8006e42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e44:	b111      	cbz	r1, 8006e4c <_reclaim_reent+0x80>
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 f858 	bl	8006efc <_free_r>
 8006e4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e4e:	b111      	cbz	r1, 8006e56 <_reclaim_reent+0x8a>
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 f853 	bl	8006efc <_free_r>
 8006e56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e58:	b111      	cbz	r1, 8006e60 <_reclaim_reent+0x94>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f84e 	bl	8006efc <_free_r>
 8006e60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e62:	b111      	cbz	r1, 8006e6a <_reclaim_reent+0x9e>
 8006e64:	4620      	mov	r0, r4
 8006e66:	f000 f849 	bl	8006efc <_free_r>
 8006e6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e6c:	b111      	cbz	r1, 8006e74 <_reclaim_reent+0xa8>
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 f844 	bl	8006efc <_free_r>
 8006e74:	6a23      	ldr	r3, [r4, #32]
 8006e76:	b11b      	cbz	r3, 8006e80 <_reclaim_reent+0xb4>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e7e:	4718      	bx	r3
 8006e80:	bd70      	pop	{r4, r5, r6, pc}
 8006e82:	bf00      	nop
 8006e84:	20000010 	.word	0x20000010

08006e88 <__errno>:
 8006e88:	4b01      	ldr	r3, [pc, #4]	@ (8006e90 <__errno+0x8>)
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	20000010 	.word	0x20000010

08006e94 <__libc_init_array>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4d0d      	ldr	r5, [pc, #52]	@ (8006ecc <__libc_init_array+0x38>)
 8006e98:	4c0d      	ldr	r4, [pc, #52]	@ (8006ed0 <__libc_init_array+0x3c>)
 8006e9a:	1b64      	subs	r4, r4, r5
 8006e9c:	10a4      	asrs	r4, r4, #2
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	42a6      	cmp	r6, r4
 8006ea2:	d109      	bne.n	8006eb8 <__libc_init_array+0x24>
 8006ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed4 <__libc_init_array+0x40>)
 8006ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed8 <__libc_init_array+0x44>)
 8006ea8:	f000 fc64 	bl	8007774 <_init>
 8006eac:	1b64      	subs	r4, r4, r5
 8006eae:	10a4      	asrs	r4, r4, #2
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	42a6      	cmp	r6, r4
 8006eb4:	d105      	bne.n	8006ec2 <__libc_init_array+0x2e>
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebc:	4798      	blx	r3
 8006ebe:	3601      	adds	r6, #1
 8006ec0:	e7ee      	b.n	8006ea0 <__libc_init_array+0xc>
 8006ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec6:	4798      	blx	r3
 8006ec8:	3601      	adds	r6, #1
 8006eca:	e7f2      	b.n	8006eb2 <__libc_init_array+0x1e>
 8006ecc:	080079b0 	.word	0x080079b0
 8006ed0:	080079b0 	.word	0x080079b0
 8006ed4:	080079b0 	.word	0x080079b0
 8006ed8:	080079b4 	.word	0x080079b4

08006edc <__retarget_lock_acquire_recursive>:
 8006edc:	4770      	bx	lr

08006ede <__retarget_lock_release_recursive>:
 8006ede:	4770      	bx	lr

08006ee0 <memcpy>:
 8006ee0:	440a      	add	r2, r1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee8:	d100      	bne.n	8006eec <memcpy+0xc>
 8006eea:	4770      	bx	lr
 8006eec:	b510      	push	{r4, lr}
 8006eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	d1f9      	bne.n	8006eee <memcpy+0xe>
 8006efa:	bd10      	pop	{r4, pc}

08006efc <_free_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4605      	mov	r5, r0
 8006f00:	2900      	cmp	r1, #0
 8006f02:	d041      	beq.n	8006f88 <_free_r+0x8c>
 8006f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f08:	1f0c      	subs	r4, r1, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bfb8      	it	lt
 8006f0e:	18e4      	addlt	r4, r4, r3
 8006f10:	f000 f8e0 	bl	80070d4 <__malloc_lock>
 8006f14:	4a1d      	ldr	r2, [pc, #116]	@ (8006f8c <_free_r+0x90>)
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	b933      	cbnz	r3, 8006f28 <_free_r+0x2c>
 8006f1a:	6063      	str	r3, [r4, #4]
 8006f1c:	6014      	str	r4, [r2, #0]
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f24:	f000 b8dc 	b.w	80070e0 <__malloc_unlock>
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d908      	bls.n	8006f3e <_free_r+0x42>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	1821      	adds	r1, r4, r0
 8006f30:	428b      	cmp	r3, r1
 8006f32:	bf01      	itttt	eq
 8006f34:	6819      	ldreq	r1, [r3, #0]
 8006f36:	685b      	ldreq	r3, [r3, #4]
 8006f38:	1809      	addeq	r1, r1, r0
 8006f3a:	6021      	streq	r1, [r4, #0]
 8006f3c:	e7ed      	b.n	8006f1a <_free_r+0x1e>
 8006f3e:	461a      	mov	r2, r3
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	b10b      	cbz	r3, 8006f48 <_free_r+0x4c>
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	d9fa      	bls.n	8006f3e <_free_r+0x42>
 8006f48:	6811      	ldr	r1, [r2, #0]
 8006f4a:	1850      	adds	r0, r2, r1
 8006f4c:	42a0      	cmp	r0, r4
 8006f4e:	d10b      	bne.n	8006f68 <_free_r+0x6c>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	4401      	add	r1, r0
 8006f54:	1850      	adds	r0, r2, r1
 8006f56:	4283      	cmp	r3, r0
 8006f58:	6011      	str	r1, [r2, #0]
 8006f5a:	d1e0      	bne.n	8006f1e <_free_r+0x22>
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	6053      	str	r3, [r2, #4]
 8006f62:	4408      	add	r0, r1
 8006f64:	6010      	str	r0, [r2, #0]
 8006f66:	e7da      	b.n	8006f1e <_free_r+0x22>
 8006f68:	d902      	bls.n	8006f70 <_free_r+0x74>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	602b      	str	r3, [r5, #0]
 8006f6e:	e7d6      	b.n	8006f1e <_free_r+0x22>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	1821      	adds	r1, r4, r0
 8006f74:	428b      	cmp	r3, r1
 8006f76:	bf04      	itt	eq
 8006f78:	6819      	ldreq	r1, [r3, #0]
 8006f7a:	685b      	ldreq	r3, [r3, #4]
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	bf04      	itt	eq
 8006f80:	1809      	addeq	r1, r1, r0
 8006f82:	6021      	streq	r1, [r4, #0]
 8006f84:	6054      	str	r4, [r2, #4]
 8006f86:	e7ca      	b.n	8006f1e <_free_r+0x22>
 8006f88:	bd38      	pop	{r3, r4, r5, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20004d80 	.word	0x20004d80

08006f90 <sbrk_aligned>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4e0f      	ldr	r6, [pc, #60]	@ (8006fd0 <sbrk_aligned+0x40>)
 8006f94:	460c      	mov	r4, r1
 8006f96:	6831      	ldr	r1, [r6, #0]
 8006f98:	4605      	mov	r5, r0
 8006f9a:	b911      	cbnz	r1, 8006fa2 <sbrk_aligned+0x12>
 8006f9c:	f000 fba4 	bl	80076e8 <_sbrk_r>
 8006fa0:	6030      	str	r0, [r6, #0]
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 fb9f 	bl	80076e8 <_sbrk_r>
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	d103      	bne.n	8006fb6 <sbrk_aligned+0x26>
 8006fae:	f04f 34ff 	mov.w	r4, #4294967295
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	1cc4      	adds	r4, r0, #3
 8006fb8:	f024 0403 	bic.w	r4, r4, #3
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d0f8      	beq.n	8006fb2 <sbrk_aligned+0x22>
 8006fc0:	1a21      	subs	r1, r4, r0
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 fb90 	bl	80076e8 <_sbrk_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1f2      	bne.n	8006fb2 <sbrk_aligned+0x22>
 8006fcc:	e7ef      	b.n	8006fae <sbrk_aligned+0x1e>
 8006fce:	bf00      	nop
 8006fd0:	20004d7c 	.word	0x20004d7c

08006fd4 <_malloc_r>:
 8006fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	1ccd      	adds	r5, r1, #3
 8006fda:	f025 0503 	bic.w	r5, r5, #3
 8006fde:	3508      	adds	r5, #8
 8006fe0:	2d0c      	cmp	r5, #12
 8006fe2:	bf38      	it	cc
 8006fe4:	250c      	movcc	r5, #12
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	4606      	mov	r6, r0
 8006fea:	db01      	blt.n	8006ff0 <_malloc_r+0x1c>
 8006fec:	42a9      	cmp	r1, r5
 8006fee:	d904      	bls.n	8006ffa <_malloc_r+0x26>
 8006ff0:	230c      	movs	r3, #12
 8006ff2:	6033      	str	r3, [r6, #0]
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070d0 <_malloc_r+0xfc>
 8006ffe:	f000 f869 	bl	80070d4 <__malloc_lock>
 8007002:	f8d8 3000 	ldr.w	r3, [r8]
 8007006:	461c      	mov	r4, r3
 8007008:	bb44      	cbnz	r4, 800705c <_malloc_r+0x88>
 800700a:	4629      	mov	r1, r5
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff ffbf 	bl	8006f90 <sbrk_aligned>
 8007012:	1c43      	adds	r3, r0, #1
 8007014:	4604      	mov	r4, r0
 8007016:	d158      	bne.n	80070ca <_malloc_r+0xf6>
 8007018:	f8d8 4000 	ldr.w	r4, [r8]
 800701c:	4627      	mov	r7, r4
 800701e:	2f00      	cmp	r7, #0
 8007020:	d143      	bne.n	80070aa <_malloc_r+0xd6>
 8007022:	2c00      	cmp	r4, #0
 8007024:	d04b      	beq.n	80070be <_malloc_r+0xea>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	4639      	mov	r1, r7
 800702a:	4630      	mov	r0, r6
 800702c:	eb04 0903 	add.w	r9, r4, r3
 8007030:	f000 fb5a 	bl	80076e8 <_sbrk_r>
 8007034:	4581      	cmp	r9, r0
 8007036:	d142      	bne.n	80070be <_malloc_r+0xea>
 8007038:	6821      	ldr	r1, [r4, #0]
 800703a:	1a6d      	subs	r5, r5, r1
 800703c:	4629      	mov	r1, r5
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff ffa6 	bl	8006f90 <sbrk_aligned>
 8007044:	3001      	adds	r0, #1
 8007046:	d03a      	beq.n	80070be <_malloc_r+0xea>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	442b      	add	r3, r5
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	f8d8 3000 	ldr.w	r3, [r8]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	bb62      	cbnz	r2, 80070b0 <_malloc_r+0xdc>
 8007056:	f8c8 7000 	str.w	r7, [r8]
 800705a:	e00f      	b.n	800707c <_malloc_r+0xa8>
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	1b52      	subs	r2, r2, r5
 8007060:	d420      	bmi.n	80070a4 <_malloc_r+0xd0>
 8007062:	2a0b      	cmp	r2, #11
 8007064:	d917      	bls.n	8007096 <_malloc_r+0xc2>
 8007066:	1961      	adds	r1, r4, r5
 8007068:	42a3      	cmp	r3, r4
 800706a:	6025      	str	r5, [r4, #0]
 800706c:	bf18      	it	ne
 800706e:	6059      	strne	r1, [r3, #4]
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	bf08      	it	eq
 8007074:	f8c8 1000 	streq.w	r1, [r8]
 8007078:	5162      	str	r2, [r4, r5]
 800707a:	604b      	str	r3, [r1, #4]
 800707c:	4630      	mov	r0, r6
 800707e:	f000 f82f 	bl	80070e0 <__malloc_unlock>
 8007082:	f104 000b 	add.w	r0, r4, #11
 8007086:	1d23      	adds	r3, r4, #4
 8007088:	f020 0007 	bic.w	r0, r0, #7
 800708c:	1ac2      	subs	r2, r0, r3
 800708e:	bf1c      	itt	ne
 8007090:	1a1b      	subne	r3, r3, r0
 8007092:	50a3      	strne	r3, [r4, r2]
 8007094:	e7af      	b.n	8006ff6 <_malloc_r+0x22>
 8007096:	6862      	ldr	r2, [r4, #4]
 8007098:	42a3      	cmp	r3, r4
 800709a:	bf0c      	ite	eq
 800709c:	f8c8 2000 	streq.w	r2, [r8]
 80070a0:	605a      	strne	r2, [r3, #4]
 80070a2:	e7eb      	b.n	800707c <_malloc_r+0xa8>
 80070a4:	4623      	mov	r3, r4
 80070a6:	6864      	ldr	r4, [r4, #4]
 80070a8:	e7ae      	b.n	8007008 <_malloc_r+0x34>
 80070aa:	463c      	mov	r4, r7
 80070ac:	687f      	ldr	r7, [r7, #4]
 80070ae:	e7b6      	b.n	800701e <_malloc_r+0x4a>
 80070b0:	461a      	mov	r2, r3
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	d1fb      	bne.n	80070b0 <_malloc_r+0xdc>
 80070b8:	2300      	movs	r3, #0
 80070ba:	6053      	str	r3, [r2, #4]
 80070bc:	e7de      	b.n	800707c <_malloc_r+0xa8>
 80070be:	230c      	movs	r3, #12
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	4630      	mov	r0, r6
 80070c4:	f000 f80c 	bl	80070e0 <__malloc_unlock>
 80070c8:	e794      	b.n	8006ff4 <_malloc_r+0x20>
 80070ca:	6005      	str	r5, [r0, #0]
 80070cc:	e7d6      	b.n	800707c <_malloc_r+0xa8>
 80070ce:	bf00      	nop
 80070d0:	20004d80 	.word	0x20004d80

080070d4 <__malloc_lock>:
 80070d4:	4801      	ldr	r0, [pc, #4]	@ (80070dc <__malloc_lock+0x8>)
 80070d6:	f7ff bf01 	b.w	8006edc <__retarget_lock_acquire_recursive>
 80070da:	bf00      	nop
 80070dc:	20004d78 	.word	0x20004d78

080070e0 <__malloc_unlock>:
 80070e0:	4801      	ldr	r0, [pc, #4]	@ (80070e8 <__malloc_unlock+0x8>)
 80070e2:	f7ff befc 	b.w	8006ede <__retarget_lock_release_recursive>
 80070e6:	bf00      	nop
 80070e8:	20004d78 	.word	0x20004d78

080070ec <__ssputs_r>:
 80070ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	688e      	ldr	r6, [r1, #8]
 80070f2:	461f      	mov	r7, r3
 80070f4:	42be      	cmp	r6, r7
 80070f6:	680b      	ldr	r3, [r1, #0]
 80070f8:	4682      	mov	sl, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	4690      	mov	r8, r2
 80070fe:	d82d      	bhi.n	800715c <__ssputs_r+0x70>
 8007100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007108:	d026      	beq.n	8007158 <__ssputs_r+0x6c>
 800710a:	6965      	ldr	r5, [r4, #20]
 800710c:	6909      	ldr	r1, [r1, #16]
 800710e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007112:	eba3 0901 	sub.w	r9, r3, r1
 8007116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800711a:	1c7b      	adds	r3, r7, #1
 800711c:	444b      	add	r3, r9
 800711e:	106d      	asrs	r5, r5, #1
 8007120:	429d      	cmp	r5, r3
 8007122:	bf38      	it	cc
 8007124:	461d      	movcc	r5, r3
 8007126:	0553      	lsls	r3, r2, #21
 8007128:	d527      	bpl.n	800717a <__ssputs_r+0x8e>
 800712a:	4629      	mov	r1, r5
 800712c:	f7ff ff52 	bl	8006fd4 <_malloc_r>
 8007130:	4606      	mov	r6, r0
 8007132:	b360      	cbz	r0, 800718e <__ssputs_r+0xa2>
 8007134:	6921      	ldr	r1, [r4, #16]
 8007136:	464a      	mov	r2, r9
 8007138:	f7ff fed2 	bl	8006ee0 <memcpy>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007146:	81a3      	strh	r3, [r4, #12]
 8007148:	6126      	str	r6, [r4, #16]
 800714a:	6165      	str	r5, [r4, #20]
 800714c:	444e      	add	r6, r9
 800714e:	eba5 0509 	sub.w	r5, r5, r9
 8007152:	6026      	str	r6, [r4, #0]
 8007154:	60a5      	str	r5, [r4, #8]
 8007156:	463e      	mov	r6, r7
 8007158:	42be      	cmp	r6, r7
 800715a:	d900      	bls.n	800715e <__ssputs_r+0x72>
 800715c:	463e      	mov	r6, r7
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	4632      	mov	r2, r6
 8007162:	4641      	mov	r1, r8
 8007164:	f000 faa6 	bl	80076b4 <memmove>
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	1b9b      	subs	r3, r3, r6
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4433      	add	r3, r6
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	2000      	movs	r0, #0
 8007176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717a:	462a      	mov	r2, r5
 800717c:	f000 fac4 	bl	8007708 <_realloc_r>
 8007180:	4606      	mov	r6, r0
 8007182:	2800      	cmp	r0, #0
 8007184:	d1e0      	bne.n	8007148 <__ssputs_r+0x5c>
 8007186:	6921      	ldr	r1, [r4, #16]
 8007188:	4650      	mov	r0, sl
 800718a:	f7ff feb7 	bl	8006efc <_free_r>
 800718e:	230c      	movs	r3, #12
 8007190:	f8ca 3000 	str.w	r3, [sl]
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	e7e9      	b.n	8007176 <__ssputs_r+0x8a>
	...

080071a4 <_svfiprintf_r>:
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	4698      	mov	r8, r3
 80071aa:	898b      	ldrh	r3, [r1, #12]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	b09d      	sub	sp, #116	@ 0x74
 80071b0:	4607      	mov	r7, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	d510      	bpl.n	80071da <_svfiprintf_r+0x36>
 80071b8:	690b      	ldr	r3, [r1, #16]
 80071ba:	b973      	cbnz	r3, 80071da <_svfiprintf_r+0x36>
 80071bc:	2140      	movs	r1, #64	@ 0x40
 80071be:	f7ff ff09 	bl	8006fd4 <_malloc_r>
 80071c2:	6028      	str	r0, [r5, #0]
 80071c4:	6128      	str	r0, [r5, #16]
 80071c6:	b930      	cbnz	r0, 80071d6 <_svfiprintf_r+0x32>
 80071c8:	230c      	movs	r3, #12
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	b01d      	add	sp, #116	@ 0x74
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	2340      	movs	r3, #64	@ 0x40
 80071d8:	616b      	str	r3, [r5, #20]
 80071da:	2300      	movs	r3, #0
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	2320      	movs	r3, #32
 80071e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e8:	2330      	movs	r3, #48	@ 0x30
 80071ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007388 <_svfiprintf_r+0x1e4>
 80071ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071f2:	f04f 0901 	mov.w	r9, #1
 80071f6:	4623      	mov	r3, r4
 80071f8:	469a      	mov	sl, r3
 80071fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fe:	b10a      	cbz	r2, 8007204 <_svfiprintf_r+0x60>
 8007200:	2a25      	cmp	r2, #37	@ 0x25
 8007202:	d1f9      	bne.n	80071f8 <_svfiprintf_r+0x54>
 8007204:	ebba 0b04 	subs.w	fp, sl, r4
 8007208:	d00b      	beq.n	8007222 <_svfiprintf_r+0x7e>
 800720a:	465b      	mov	r3, fp
 800720c:	4622      	mov	r2, r4
 800720e:	4629      	mov	r1, r5
 8007210:	4638      	mov	r0, r7
 8007212:	f7ff ff6b 	bl	80070ec <__ssputs_r>
 8007216:	3001      	adds	r0, #1
 8007218:	f000 80a7 	beq.w	800736a <_svfiprintf_r+0x1c6>
 800721c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721e:	445a      	add	r2, fp
 8007220:	9209      	str	r2, [sp, #36]	@ 0x24
 8007222:	f89a 3000 	ldrb.w	r3, [sl]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 809f 	beq.w	800736a <_svfiprintf_r+0x1c6>
 800722c:	2300      	movs	r3, #0
 800722e:	f04f 32ff 	mov.w	r2, #4294967295
 8007232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007236:	f10a 0a01 	add.w	sl, sl, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	9307      	str	r3, [sp, #28]
 800723e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007242:	931a      	str	r3, [sp, #104]	@ 0x68
 8007244:	4654      	mov	r4, sl
 8007246:	2205      	movs	r2, #5
 8007248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724c:	484e      	ldr	r0, [pc, #312]	@ (8007388 <_svfiprintf_r+0x1e4>)
 800724e:	f7f8 ffcf 	bl	80001f0 <memchr>
 8007252:	9a04      	ldr	r2, [sp, #16]
 8007254:	b9d8      	cbnz	r0, 800728e <_svfiprintf_r+0xea>
 8007256:	06d0      	lsls	r0, r2, #27
 8007258:	bf44      	itt	mi
 800725a:	2320      	movmi	r3, #32
 800725c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007260:	0711      	lsls	r1, r2, #28
 8007262:	bf44      	itt	mi
 8007264:	232b      	movmi	r3, #43	@ 0x2b
 8007266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800726a:	f89a 3000 	ldrb.w	r3, [sl]
 800726e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007270:	d015      	beq.n	800729e <_svfiprintf_r+0xfa>
 8007272:	9a07      	ldr	r2, [sp, #28]
 8007274:	4654      	mov	r4, sl
 8007276:	2000      	movs	r0, #0
 8007278:	f04f 0c0a 	mov.w	ip, #10
 800727c:	4621      	mov	r1, r4
 800727e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007282:	3b30      	subs	r3, #48	@ 0x30
 8007284:	2b09      	cmp	r3, #9
 8007286:	d94b      	bls.n	8007320 <_svfiprintf_r+0x17c>
 8007288:	b1b0      	cbz	r0, 80072b8 <_svfiprintf_r+0x114>
 800728a:	9207      	str	r2, [sp, #28]
 800728c:	e014      	b.n	80072b8 <_svfiprintf_r+0x114>
 800728e:	eba0 0308 	sub.w	r3, r0, r8
 8007292:	fa09 f303 	lsl.w	r3, r9, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	46a2      	mov	sl, r4
 800729c:	e7d2      	b.n	8007244 <_svfiprintf_r+0xa0>
 800729e:	9b03      	ldr	r3, [sp, #12]
 80072a0:	1d19      	adds	r1, r3, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	9103      	str	r1, [sp, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfbb      	ittet	lt
 80072aa:	425b      	neglt	r3, r3
 80072ac:	f042 0202 	orrlt.w	r2, r2, #2
 80072b0:	9307      	strge	r3, [sp, #28]
 80072b2:	9307      	strlt	r3, [sp, #28]
 80072b4:	bfb8      	it	lt
 80072b6:	9204      	strlt	r2, [sp, #16]
 80072b8:	7823      	ldrb	r3, [r4, #0]
 80072ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80072bc:	d10a      	bne.n	80072d4 <_svfiprintf_r+0x130>
 80072be:	7863      	ldrb	r3, [r4, #1]
 80072c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c2:	d132      	bne.n	800732a <_svfiprintf_r+0x186>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	1d1a      	adds	r2, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	9203      	str	r2, [sp, #12]
 80072cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072d0:	3402      	adds	r4, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007398 <_svfiprintf_r+0x1f4>
 80072d8:	7821      	ldrb	r1, [r4, #0]
 80072da:	2203      	movs	r2, #3
 80072dc:	4650      	mov	r0, sl
 80072de:	f7f8 ff87 	bl	80001f0 <memchr>
 80072e2:	b138      	cbz	r0, 80072f4 <_svfiprintf_r+0x150>
 80072e4:	9b04      	ldr	r3, [sp, #16]
 80072e6:	eba0 000a 	sub.w	r0, r0, sl
 80072ea:	2240      	movs	r2, #64	@ 0x40
 80072ec:	4082      	lsls	r2, r0
 80072ee:	4313      	orrs	r3, r2
 80072f0:	3401      	adds	r4, #1
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f8:	4824      	ldr	r0, [pc, #144]	@ (800738c <_svfiprintf_r+0x1e8>)
 80072fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072fe:	2206      	movs	r2, #6
 8007300:	f7f8 ff76 	bl	80001f0 <memchr>
 8007304:	2800      	cmp	r0, #0
 8007306:	d036      	beq.n	8007376 <_svfiprintf_r+0x1d2>
 8007308:	4b21      	ldr	r3, [pc, #132]	@ (8007390 <_svfiprintf_r+0x1ec>)
 800730a:	bb1b      	cbnz	r3, 8007354 <_svfiprintf_r+0x1b0>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	3307      	adds	r3, #7
 8007310:	f023 0307 	bic.w	r3, r3, #7
 8007314:	3308      	adds	r3, #8
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731a:	4433      	add	r3, r6
 800731c:	9309      	str	r3, [sp, #36]	@ 0x24
 800731e:	e76a      	b.n	80071f6 <_svfiprintf_r+0x52>
 8007320:	fb0c 3202 	mla	r2, ip, r2, r3
 8007324:	460c      	mov	r4, r1
 8007326:	2001      	movs	r0, #1
 8007328:	e7a8      	b.n	800727c <_svfiprintf_r+0xd8>
 800732a:	2300      	movs	r3, #0
 800732c:	3401      	adds	r4, #1
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	4619      	mov	r1, r3
 8007332:	f04f 0c0a 	mov.w	ip, #10
 8007336:	4620      	mov	r0, r4
 8007338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733c:	3a30      	subs	r2, #48	@ 0x30
 800733e:	2a09      	cmp	r2, #9
 8007340:	d903      	bls.n	800734a <_svfiprintf_r+0x1a6>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0c6      	beq.n	80072d4 <_svfiprintf_r+0x130>
 8007346:	9105      	str	r1, [sp, #20]
 8007348:	e7c4      	b.n	80072d4 <_svfiprintf_r+0x130>
 800734a:	fb0c 2101 	mla	r1, ip, r1, r2
 800734e:	4604      	mov	r4, r0
 8007350:	2301      	movs	r3, #1
 8007352:	e7f0      	b.n	8007336 <_svfiprintf_r+0x192>
 8007354:	ab03      	add	r3, sp, #12
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	462a      	mov	r2, r5
 800735a:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <_svfiprintf_r+0x1f0>)
 800735c:	a904      	add	r1, sp, #16
 800735e:	4638      	mov	r0, r7
 8007360:	f3af 8000 	nop.w
 8007364:	1c42      	adds	r2, r0, #1
 8007366:	4606      	mov	r6, r0
 8007368:	d1d6      	bne.n	8007318 <_svfiprintf_r+0x174>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	065b      	lsls	r3, r3, #25
 800736e:	f53f af2d 	bmi.w	80071cc <_svfiprintf_r+0x28>
 8007372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007374:	e72c      	b.n	80071d0 <_svfiprintf_r+0x2c>
 8007376:	ab03      	add	r3, sp, #12
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	462a      	mov	r2, r5
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <_svfiprintf_r+0x1f0>)
 800737e:	a904      	add	r1, sp, #16
 8007380:	4638      	mov	r0, r7
 8007382:	f000 f879 	bl	8007478 <_printf_i>
 8007386:	e7ed      	b.n	8007364 <_svfiprintf_r+0x1c0>
 8007388:	08007974 	.word	0x08007974
 800738c:	0800797e 	.word	0x0800797e
 8007390:	00000000 	.word	0x00000000
 8007394:	080070ed 	.word	0x080070ed
 8007398:	0800797a 	.word	0x0800797a

0800739c <_printf_common>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	4616      	mov	r6, r2
 80073a2:	4698      	mov	r8, r3
 80073a4:	688a      	ldr	r2, [r1, #8]
 80073a6:	690b      	ldr	r3, [r1, #16]
 80073a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073ac:	4293      	cmp	r3, r2
 80073ae:	bfb8      	it	lt
 80073b0:	4613      	movlt	r3, r2
 80073b2:	6033      	str	r3, [r6, #0]
 80073b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073b8:	4607      	mov	r7, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	b10a      	cbz	r2, 80073c2 <_printf_common+0x26>
 80073be:	3301      	adds	r3, #1
 80073c0:	6033      	str	r3, [r6, #0]
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	0699      	lsls	r1, r3, #26
 80073c6:	bf42      	ittt	mi
 80073c8:	6833      	ldrmi	r3, [r6, #0]
 80073ca:	3302      	addmi	r3, #2
 80073cc:	6033      	strmi	r3, [r6, #0]
 80073ce:	6825      	ldr	r5, [r4, #0]
 80073d0:	f015 0506 	ands.w	r5, r5, #6
 80073d4:	d106      	bne.n	80073e4 <_printf_common+0x48>
 80073d6:	f104 0a19 	add.w	sl, r4, #25
 80073da:	68e3      	ldr	r3, [r4, #12]
 80073dc:	6832      	ldr	r2, [r6, #0]
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	42ab      	cmp	r3, r5
 80073e2:	dc26      	bgt.n	8007432 <_printf_common+0x96>
 80073e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	3b00      	subs	r3, #0
 80073ec:	bf18      	it	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	0692      	lsls	r2, r2, #26
 80073f2:	d42b      	bmi.n	800744c <_printf_common+0xb0>
 80073f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073f8:	4641      	mov	r1, r8
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c8      	blx	r9
 80073fe:	3001      	adds	r0, #1
 8007400:	d01e      	beq.n	8007440 <_printf_common+0xa4>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	6922      	ldr	r2, [r4, #16]
 8007406:	f003 0306 	and.w	r3, r3, #6
 800740a:	2b04      	cmp	r3, #4
 800740c:	bf02      	ittt	eq
 800740e:	68e5      	ldreq	r5, [r4, #12]
 8007410:	6833      	ldreq	r3, [r6, #0]
 8007412:	1aed      	subeq	r5, r5, r3
 8007414:	68a3      	ldr	r3, [r4, #8]
 8007416:	bf0c      	ite	eq
 8007418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800741c:	2500      	movne	r5, #0
 800741e:	4293      	cmp	r3, r2
 8007420:	bfc4      	itt	gt
 8007422:	1a9b      	subgt	r3, r3, r2
 8007424:	18ed      	addgt	r5, r5, r3
 8007426:	2600      	movs	r6, #0
 8007428:	341a      	adds	r4, #26
 800742a:	42b5      	cmp	r5, r6
 800742c:	d11a      	bne.n	8007464 <_printf_common+0xc8>
 800742e:	2000      	movs	r0, #0
 8007430:	e008      	b.n	8007444 <_printf_common+0xa8>
 8007432:	2301      	movs	r3, #1
 8007434:	4652      	mov	r2, sl
 8007436:	4641      	mov	r1, r8
 8007438:	4638      	mov	r0, r7
 800743a:	47c8      	blx	r9
 800743c:	3001      	adds	r0, #1
 800743e:	d103      	bne.n	8007448 <_printf_common+0xac>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	3501      	adds	r5, #1
 800744a:	e7c6      	b.n	80073da <_printf_common+0x3e>
 800744c:	18e1      	adds	r1, r4, r3
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	2030      	movs	r0, #48	@ 0x30
 8007452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007456:	4422      	add	r2, r4
 8007458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800745c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007460:	3302      	adds	r3, #2
 8007462:	e7c7      	b.n	80073f4 <_printf_common+0x58>
 8007464:	2301      	movs	r3, #1
 8007466:	4622      	mov	r2, r4
 8007468:	4641      	mov	r1, r8
 800746a:	4638      	mov	r0, r7
 800746c:	47c8      	blx	r9
 800746e:	3001      	adds	r0, #1
 8007470:	d0e6      	beq.n	8007440 <_printf_common+0xa4>
 8007472:	3601      	adds	r6, #1
 8007474:	e7d9      	b.n	800742a <_printf_common+0x8e>
	...

08007478 <_printf_i>:
 8007478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	7e0f      	ldrb	r7, [r1, #24]
 800747e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007480:	2f78      	cmp	r7, #120	@ 0x78
 8007482:	4691      	mov	r9, r2
 8007484:	4680      	mov	r8, r0
 8007486:	460c      	mov	r4, r1
 8007488:	469a      	mov	sl, r3
 800748a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800748e:	d807      	bhi.n	80074a0 <_printf_i+0x28>
 8007490:	2f62      	cmp	r7, #98	@ 0x62
 8007492:	d80a      	bhi.n	80074aa <_printf_i+0x32>
 8007494:	2f00      	cmp	r7, #0
 8007496:	f000 80d1 	beq.w	800763c <_printf_i+0x1c4>
 800749a:	2f58      	cmp	r7, #88	@ 0x58
 800749c:	f000 80b8 	beq.w	8007610 <_printf_i+0x198>
 80074a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074a8:	e03a      	b.n	8007520 <_printf_i+0xa8>
 80074aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074ae:	2b15      	cmp	r3, #21
 80074b0:	d8f6      	bhi.n	80074a0 <_printf_i+0x28>
 80074b2:	a101      	add	r1, pc, #4	@ (adr r1, 80074b8 <_printf_i+0x40>)
 80074b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007525 	.word	0x08007525
 80074c0:	080074a1 	.word	0x080074a1
 80074c4:	080074a1 	.word	0x080074a1
 80074c8:	080074a1 	.word	0x080074a1
 80074cc:	080074a1 	.word	0x080074a1
 80074d0:	08007525 	.word	0x08007525
 80074d4:	080074a1 	.word	0x080074a1
 80074d8:	080074a1 	.word	0x080074a1
 80074dc:	080074a1 	.word	0x080074a1
 80074e0:	080074a1 	.word	0x080074a1
 80074e4:	08007623 	.word	0x08007623
 80074e8:	0800754f 	.word	0x0800754f
 80074ec:	080075dd 	.word	0x080075dd
 80074f0:	080074a1 	.word	0x080074a1
 80074f4:	080074a1 	.word	0x080074a1
 80074f8:	08007645 	.word	0x08007645
 80074fc:	080074a1 	.word	0x080074a1
 8007500:	0800754f 	.word	0x0800754f
 8007504:	080074a1 	.word	0x080074a1
 8007508:	080074a1 	.word	0x080074a1
 800750c:	080075e5 	.word	0x080075e5
 8007510:	6833      	ldr	r3, [r6, #0]
 8007512:	1d1a      	adds	r2, r3, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6032      	str	r2, [r6, #0]
 8007518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800751c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007520:	2301      	movs	r3, #1
 8007522:	e09c      	b.n	800765e <_printf_i+0x1e6>
 8007524:	6833      	ldr	r3, [r6, #0]
 8007526:	6820      	ldr	r0, [r4, #0]
 8007528:	1d19      	adds	r1, r3, #4
 800752a:	6031      	str	r1, [r6, #0]
 800752c:	0606      	lsls	r6, r0, #24
 800752e:	d501      	bpl.n	8007534 <_printf_i+0xbc>
 8007530:	681d      	ldr	r5, [r3, #0]
 8007532:	e003      	b.n	800753c <_printf_i+0xc4>
 8007534:	0645      	lsls	r5, r0, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0xb8>
 8007538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800753c:	2d00      	cmp	r5, #0
 800753e:	da03      	bge.n	8007548 <_printf_i+0xd0>
 8007540:	232d      	movs	r3, #45	@ 0x2d
 8007542:	426d      	negs	r5, r5
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007548:	4858      	ldr	r0, [pc, #352]	@ (80076ac <_printf_i+0x234>)
 800754a:	230a      	movs	r3, #10
 800754c:	e011      	b.n	8007572 <_printf_i+0xfa>
 800754e:	6821      	ldr	r1, [r4, #0]
 8007550:	6833      	ldr	r3, [r6, #0]
 8007552:	0608      	lsls	r0, r1, #24
 8007554:	f853 5b04 	ldr.w	r5, [r3], #4
 8007558:	d402      	bmi.n	8007560 <_printf_i+0xe8>
 800755a:	0649      	lsls	r1, r1, #25
 800755c:	bf48      	it	mi
 800755e:	b2ad      	uxthmi	r5, r5
 8007560:	2f6f      	cmp	r7, #111	@ 0x6f
 8007562:	4852      	ldr	r0, [pc, #328]	@ (80076ac <_printf_i+0x234>)
 8007564:	6033      	str	r3, [r6, #0]
 8007566:	bf14      	ite	ne
 8007568:	230a      	movne	r3, #10
 800756a:	2308      	moveq	r3, #8
 800756c:	2100      	movs	r1, #0
 800756e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007572:	6866      	ldr	r6, [r4, #4]
 8007574:	60a6      	str	r6, [r4, #8]
 8007576:	2e00      	cmp	r6, #0
 8007578:	db05      	blt.n	8007586 <_printf_i+0x10e>
 800757a:	6821      	ldr	r1, [r4, #0]
 800757c:	432e      	orrs	r6, r5
 800757e:	f021 0104 	bic.w	r1, r1, #4
 8007582:	6021      	str	r1, [r4, #0]
 8007584:	d04b      	beq.n	800761e <_printf_i+0x1a6>
 8007586:	4616      	mov	r6, r2
 8007588:	fbb5 f1f3 	udiv	r1, r5, r3
 800758c:	fb03 5711 	mls	r7, r3, r1, r5
 8007590:	5dc7      	ldrb	r7, [r0, r7]
 8007592:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007596:	462f      	mov	r7, r5
 8007598:	42bb      	cmp	r3, r7
 800759a:	460d      	mov	r5, r1
 800759c:	d9f4      	bls.n	8007588 <_printf_i+0x110>
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d10b      	bne.n	80075ba <_printf_i+0x142>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	07df      	lsls	r7, r3, #31
 80075a6:	d508      	bpl.n	80075ba <_printf_i+0x142>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	6861      	ldr	r1, [r4, #4]
 80075ac:	4299      	cmp	r1, r3
 80075ae:	bfde      	ittt	le
 80075b0:	2330      	movle	r3, #48	@ 0x30
 80075b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075ba:	1b92      	subs	r2, r2, r6
 80075bc:	6122      	str	r2, [r4, #16]
 80075be:	f8cd a000 	str.w	sl, [sp]
 80075c2:	464b      	mov	r3, r9
 80075c4:	aa03      	add	r2, sp, #12
 80075c6:	4621      	mov	r1, r4
 80075c8:	4640      	mov	r0, r8
 80075ca:	f7ff fee7 	bl	800739c <_printf_common>
 80075ce:	3001      	adds	r0, #1
 80075d0:	d14a      	bne.n	8007668 <_printf_i+0x1f0>
 80075d2:	f04f 30ff 	mov.w	r0, #4294967295
 80075d6:	b004      	add	sp, #16
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	f043 0320 	orr.w	r3, r3, #32
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	4832      	ldr	r0, [pc, #200]	@ (80076b0 <_printf_i+0x238>)
 80075e6:	2778      	movs	r7, #120	@ 0x78
 80075e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	6831      	ldr	r1, [r6, #0]
 80075f0:	061f      	lsls	r7, r3, #24
 80075f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075f6:	d402      	bmi.n	80075fe <_printf_i+0x186>
 80075f8:	065f      	lsls	r7, r3, #25
 80075fa:	bf48      	it	mi
 80075fc:	b2ad      	uxthmi	r5, r5
 80075fe:	6031      	str	r1, [r6, #0]
 8007600:	07d9      	lsls	r1, r3, #31
 8007602:	bf44      	itt	mi
 8007604:	f043 0320 	orrmi.w	r3, r3, #32
 8007608:	6023      	strmi	r3, [r4, #0]
 800760a:	b11d      	cbz	r5, 8007614 <_printf_i+0x19c>
 800760c:	2310      	movs	r3, #16
 800760e:	e7ad      	b.n	800756c <_printf_i+0xf4>
 8007610:	4826      	ldr	r0, [pc, #152]	@ (80076ac <_printf_i+0x234>)
 8007612:	e7e9      	b.n	80075e8 <_printf_i+0x170>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	f023 0320 	bic.w	r3, r3, #32
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	e7f6      	b.n	800760c <_printf_i+0x194>
 800761e:	4616      	mov	r6, r2
 8007620:	e7bd      	b.n	800759e <_printf_i+0x126>
 8007622:	6833      	ldr	r3, [r6, #0]
 8007624:	6825      	ldr	r5, [r4, #0]
 8007626:	6961      	ldr	r1, [r4, #20]
 8007628:	1d18      	adds	r0, r3, #4
 800762a:	6030      	str	r0, [r6, #0]
 800762c:	062e      	lsls	r6, r5, #24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	d501      	bpl.n	8007636 <_printf_i+0x1be>
 8007632:	6019      	str	r1, [r3, #0]
 8007634:	e002      	b.n	800763c <_printf_i+0x1c4>
 8007636:	0668      	lsls	r0, r5, #25
 8007638:	d5fb      	bpl.n	8007632 <_printf_i+0x1ba>
 800763a:	8019      	strh	r1, [r3, #0]
 800763c:	2300      	movs	r3, #0
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	4616      	mov	r6, r2
 8007642:	e7bc      	b.n	80075be <_printf_i+0x146>
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	1d1a      	adds	r2, r3, #4
 8007648:	6032      	str	r2, [r6, #0]
 800764a:	681e      	ldr	r6, [r3, #0]
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	2100      	movs	r1, #0
 8007650:	4630      	mov	r0, r6
 8007652:	f7f8 fdcd 	bl	80001f0 <memchr>
 8007656:	b108      	cbz	r0, 800765c <_printf_i+0x1e4>
 8007658:	1b80      	subs	r0, r0, r6
 800765a:	6060      	str	r0, [r4, #4]
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	2300      	movs	r3, #0
 8007662:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007666:	e7aa      	b.n	80075be <_printf_i+0x146>
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	4632      	mov	r2, r6
 800766c:	4649      	mov	r1, r9
 800766e:	4640      	mov	r0, r8
 8007670:	47d0      	blx	sl
 8007672:	3001      	adds	r0, #1
 8007674:	d0ad      	beq.n	80075d2 <_printf_i+0x15a>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	079b      	lsls	r3, r3, #30
 800767a:	d413      	bmi.n	80076a4 <_printf_i+0x22c>
 800767c:	68e0      	ldr	r0, [r4, #12]
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	4298      	cmp	r0, r3
 8007682:	bfb8      	it	lt
 8007684:	4618      	movlt	r0, r3
 8007686:	e7a6      	b.n	80075d6 <_printf_i+0x15e>
 8007688:	2301      	movs	r3, #1
 800768a:	4632      	mov	r2, r6
 800768c:	4649      	mov	r1, r9
 800768e:	4640      	mov	r0, r8
 8007690:	47d0      	blx	sl
 8007692:	3001      	adds	r0, #1
 8007694:	d09d      	beq.n	80075d2 <_printf_i+0x15a>
 8007696:	3501      	adds	r5, #1
 8007698:	68e3      	ldr	r3, [r4, #12]
 800769a:	9903      	ldr	r1, [sp, #12]
 800769c:	1a5b      	subs	r3, r3, r1
 800769e:	42ab      	cmp	r3, r5
 80076a0:	dcf2      	bgt.n	8007688 <_printf_i+0x210>
 80076a2:	e7eb      	b.n	800767c <_printf_i+0x204>
 80076a4:	2500      	movs	r5, #0
 80076a6:	f104 0619 	add.w	r6, r4, #25
 80076aa:	e7f5      	b.n	8007698 <_printf_i+0x220>
 80076ac:	08007985 	.word	0x08007985
 80076b0:	08007996 	.word	0x08007996

080076b4 <memmove>:
 80076b4:	4288      	cmp	r0, r1
 80076b6:	b510      	push	{r4, lr}
 80076b8:	eb01 0402 	add.w	r4, r1, r2
 80076bc:	d902      	bls.n	80076c4 <memmove+0x10>
 80076be:	4284      	cmp	r4, r0
 80076c0:	4623      	mov	r3, r4
 80076c2:	d807      	bhi.n	80076d4 <memmove+0x20>
 80076c4:	1e43      	subs	r3, r0, #1
 80076c6:	42a1      	cmp	r1, r4
 80076c8:	d008      	beq.n	80076dc <memmove+0x28>
 80076ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076d2:	e7f8      	b.n	80076c6 <memmove+0x12>
 80076d4:	4402      	add	r2, r0
 80076d6:	4601      	mov	r1, r0
 80076d8:	428a      	cmp	r2, r1
 80076da:	d100      	bne.n	80076de <memmove+0x2a>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076e6:	e7f7      	b.n	80076d8 <memmove+0x24>

080076e8 <_sbrk_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d06      	ldr	r5, [pc, #24]	@ (8007704 <_sbrk_r+0x1c>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	f7f9 fcdc 	bl	80010b0 <_sbrk>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_sbrk_r+0x1a>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_sbrk_r+0x1a>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	20004d74 	.word	0x20004d74

08007708 <_realloc_r>:
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4607      	mov	r7, r0
 800770e:	4614      	mov	r4, r2
 8007710:	460d      	mov	r5, r1
 8007712:	b921      	cbnz	r1, 800771e <_realloc_r+0x16>
 8007714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4611      	mov	r1, r2
 800771a:	f7ff bc5b 	b.w	8006fd4 <_malloc_r>
 800771e:	b92a      	cbnz	r2, 800772c <_realloc_r+0x24>
 8007720:	f7ff fbec 	bl	8006efc <_free_r>
 8007724:	4625      	mov	r5, r4
 8007726:	4628      	mov	r0, r5
 8007728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772c:	f000 f81a 	bl	8007764 <_malloc_usable_size_r>
 8007730:	4284      	cmp	r4, r0
 8007732:	4606      	mov	r6, r0
 8007734:	d802      	bhi.n	800773c <_realloc_r+0x34>
 8007736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800773a:	d8f4      	bhi.n	8007726 <_realloc_r+0x1e>
 800773c:	4621      	mov	r1, r4
 800773e:	4638      	mov	r0, r7
 8007740:	f7ff fc48 	bl	8006fd4 <_malloc_r>
 8007744:	4680      	mov	r8, r0
 8007746:	b908      	cbnz	r0, 800774c <_realloc_r+0x44>
 8007748:	4645      	mov	r5, r8
 800774a:	e7ec      	b.n	8007726 <_realloc_r+0x1e>
 800774c:	42b4      	cmp	r4, r6
 800774e:	4622      	mov	r2, r4
 8007750:	4629      	mov	r1, r5
 8007752:	bf28      	it	cs
 8007754:	4632      	movcs	r2, r6
 8007756:	f7ff fbc3 	bl	8006ee0 <memcpy>
 800775a:	4629      	mov	r1, r5
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff fbcd 	bl	8006efc <_free_r>
 8007762:	e7f1      	b.n	8007748 <_realloc_r+0x40>

08007764 <_malloc_usable_size_r>:
 8007764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007768:	1f18      	subs	r0, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfbc      	itt	lt
 800776e:	580b      	ldrlt	r3, [r1, r0]
 8007770:	18c0      	addlt	r0, r0, r3
 8007772:	4770      	bx	lr

08007774 <_init>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr

08007780 <_fini>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr
