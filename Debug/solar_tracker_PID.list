
solar_tracker_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008090  08008090  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00009090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008094  08008094  00009094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008098  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  20000060  080080f8  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d6c  080080f8  0000ad6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a4b  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9f  00000000  00000000  00023adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001115  00000000  00000000  00028e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7cc  00000000  00000000  00029fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a487  00000000  00000000  00044779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44b3  00000000  00000000  0005ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001030b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  001030f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001091b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e90 	.word	0x08007e90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007e90 	.word	0x08007e90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005d0:	4a3d      	ldr	r2, [pc, #244]	@ (80006c8 <MX_ADC1_Init+0x10c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005e2:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e8:	4b36      	ldr	r3, [pc, #216]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80005fe:	4a33      	ldr	r2, [pc, #204]	@ (80006cc <MX_ADC1_Init+0x110>)
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000608:	4b2e      	ldr	r3, [pc, #184]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800060a:	2205      	movs	r2, #5
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b2d      	ldr	r3, [pc, #180]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4829      	ldr	r0, [pc, #164]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800061e:	f000 fef5 	bl	800140c <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 fcb2 	bl	8000f90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800062c:	2309      	movs	r3, #9
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000634:	2302      	movs	r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4821      	ldr	r0, [pc, #132]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800063e:	f000 ff29 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 fca2 	bl	8000f90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800064c:	230a      	movs	r3, #10
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <MX_ADC1_Init+0x108>)
 800065a:	f000 ff1b 	bl	8001494 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000664:	f000 fc94 	bl	8000f90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000668:	230b      	movs	r3, #11
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800066c:	2303      	movs	r3, #3
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000676:	f000 ff0d 	bl	8001494 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000680:	f000 fc86 	bl	8000f90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000684:	230c      	movs	r3, #12
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_ADC1_Init+0x108>)
 8000692:	f000 feff 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800069c:	f000 fc78 	bl	8000f90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006a0:	230d      	movs	r3, #13
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80006a4:	2305      	movs	r3, #5
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_ADC1_Init+0x108>)
 80006ae:	f000 fef1 	bl	8001494 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006b8:	f000 fc6a 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <HAL_ADC_MspInit+0xb0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d141      	bne.n	8000776 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000700:	6453      	str	r3, [r2, #68]	@ 0x44
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_ADC_MspInit+0xb4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LDR_2_Pin|LDR_3_Pin|LDR_4_Pin|LDR_5_Pin;
 8000746:	230f      	movs	r3, #15
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074a:	2303      	movs	r3, #3
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <HAL_ADC_MspInit+0xb8>)
 800075a:	f001 fd9d 	bl	8002298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR_1_Pin;
 800075e:	2302      	movs	r3, #2
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000762:	2303      	movs	r3, #3
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR_1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <HAL_ADC_MspInit+0xbc>)
 8000772:	f001 fd91 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	@ 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40012000 	.word	0x40012000
 8000784:	40023800 	.word	0x40023800
 8000788:	40020800 	.word	0x40020800
 800078c:	40020400 	.word	0x40020400

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <MX_DMA_Init+0x3c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_DMA_Init+0x3c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2105      	movs	r1, #5
 80007b6:	2011      	movs	r0, #17
 80007b8:	f001 f942 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007bc:	2011      	movs	r0, #17
 80007be:	f001 f95b 	bl	8001a78 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of motorAzQueue */
	motorAzQueueHandle = osMessageQueueNew(5, sizeof(int32_t),
 80007d4:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <MX_FREERTOS_Init+0x68>)
 80007d6:	2104      	movs	r1, #4
 80007d8:	2005      	movs	r0, #5
 80007da:	f004 f82c 	bl	8004836 <osMessageQueueNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a16      	ldr	r2, [pc, #88]	@ (800083c <MX_FREERTOS_Init+0x6c>)
 80007e2:	6013      	str	r3, [r2, #0]
			&motorAzQueue_attributes);

	/* creation of motorElQueue */
	motorElQueueHandle = osMessageQueueNew(5, sizeof(int32_t),
 80007e4:	4a16      	ldr	r2, [pc, #88]	@ (8000840 <MX_FREERTOS_Init+0x70>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2005      	movs	r0, #5
 80007ea:	f004 f824 	bl	8004836 <osMessageQueueNew>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <MX_FREERTOS_Init+0x74>)
 80007f2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80007f4:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <MX_FREERTOS_Init+0x78>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4814      	ldr	r0, [pc, #80]	@ (800084c <MX_FREERTOS_Init+0x7c>)
 80007fa:	f003 ff6f 	bl	80046dc <osThreadNew>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <MX_FREERTOS_Init+0x80>)
 8000802:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of controlTask */
	controlTaskHandle = osThreadNew(ControlTask, NULL, &controlTask_attributes);
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <MX_FREERTOS_Init+0x84>)
 8000806:	2100      	movs	r1, #0
 8000808:	4813      	ldr	r0, [pc, #76]	@ (8000858 <MX_FREERTOS_Init+0x88>)
 800080a:	f003 ff67 	bl	80046dc <osThreadNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_FREERTOS_Init+0x8c>)
 8000812:	6013      	str	r3, [r2, #0]

	/* creation of motorAzTask */
	motorAzTaskHandle = osThreadNew(MotorAzTask, NULL, &motorAzTask_attributes);
 8000814:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_FREERTOS_Init+0x90>)
 8000816:	2100      	movs	r1, #0
 8000818:	4812      	ldr	r0, [pc, #72]	@ (8000864 <MX_FREERTOS_Init+0x94>)
 800081a:	f003 ff5f 	bl	80046dc <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <MX_FREERTOS_Init+0x98>)
 8000822:	6013      	str	r3, [r2, #0]

	/* creation of motorElTask */
	motorElTaskHandle = osThreadNew(MotorElTask, NULL, &motorElTask_attributes);
 8000824:	4a11      	ldr	r2, [pc, #68]	@ (800086c <MX_FREERTOS_Init+0x9c>)
 8000826:	2100      	movs	r1, #0
 8000828:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_FREERTOS_Init+0xa0>)
 800082a:	f003 ff57 	bl	80046dc <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <MX_FREERTOS_Init+0xa4>)
 8000832:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	08008004 	.word	0x08008004
 800083c:	200000d4 	.word	0x200000d4
 8000840:	0800801c 	.word	0x0800801c
 8000844:	200000d8 	.word	0x200000d8
 8000848:	08007f74 	.word	0x08007f74
 800084c:	08000879 	.word	0x08000879
 8000850:	200000c4 	.word	0x200000c4
 8000854:	08007f98 	.word	0x08007f98
 8000858:	08000899 	.word	0x08000899
 800085c:	200000c8 	.word	0x200000c8
 8000860:	08007fbc 	.word	0x08007fbc
 8000864:	08000afd 	.word	0x08000afd
 8000868:	200000cc 	.word	0x200000cc
 800086c:	08007fe0 	.word	0x08007fe0
 8000870:	08000b79 	.word	0x08000b79
 8000874:	200000d0 	.word	0x200000d0

08000878 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000880:	2120      	movs	r1, #32
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <StartDefaultTask+0x1c>)
 8000884:	f001 fea5 	bl	80025d2 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088c:	f003 ffb8 	bl	8004800 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000890:	bf00      	nop
 8000892:	e7f5      	b.n	8000880 <StartDefaultTask+0x8>
 8000894:	40020000 	.word	0x40020000

08000898 <ControlTask>:
 * @brief Function implementing the controlTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b0aa      	sub	sp, #168	@ 0xa8
 800089c:	af08      	add	r7, sp, #32
 800089e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ControlTask */
	int32_t pasos_az_prueba = 20000;
 80008a0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80008a4:	677b      	str	r3, [r7, #116]	@ 0x74
	int32_t pasos_el_prueba = 10000;
 80008a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80008aa:	673b      	str	r3, [r7, #112]	@ 0x70

	// --- PID para Azimuth ---
	float Kp_az = 0.1;
 80008ac:	4b8b      	ldr	r3, [pc, #556]	@ (8000adc <ControlTask+0x244>)
 80008ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float Ki_az = 0.01;
 80008b0:	4b8b      	ldr	r3, [pc, #556]	@ (8000ae0 <ControlTask+0x248>)
 80008b2:	66bb      	str	r3, [r7, #104]	@ 0x68
	float Kd_az = 0.05;
 80008b4:	4b8b      	ldr	r3, [pc, #556]	@ (8000ae4 <ControlTask+0x24c>)
 80008b6:	667b      	str	r3, [r7, #100]	@ 0x64
	float integral_sum_az = 0.0;
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	float last_error_az = 0.0;
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	// --- PID para Elevación ---
	float Kp_el = 0.1;
 80008c8:	4b84      	ldr	r3, [pc, #528]	@ (8000adc <ControlTask+0x244>)
 80008ca:	663b      	str	r3, [r7, #96]	@ 0x60
	float Ki_el = 0.01;
 80008cc:	4b84      	ldr	r3, [pc, #528]	@ (8000ae0 <ControlTask+0x248>)
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Kd_el = 0.05;
 80008d0:	4b84      	ldr	r3, [pc, #528]	@ (8000ae4 <ControlTask+0x24c>)
 80008d2:	65bb      	str	r3, [r7, #88]	@ 0x58
	float integral_sum_el = 0.0;
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	float last_error_el = 0.0;
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	67bb      	str	r3, [r7, #120]	@ 0x78

	const float dt = 0.05; // Tiempo de muestreo = 50ms = 0.05s
 80008e0:	4b80      	ldr	r3, [pc, #512]	@ (8000ae4 <ControlTask+0x24c>)
 80008e2:	657b      	str	r3, [r7, #84]	@ 0x54
	const int32_t NOCHE_THRESHOLD = 500; // Valor ADC (0-4095) que consideras "noche"
 80008e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008e8:	653b      	str	r3, [r7, #80]	@ 0x50

	static char tx_buffer[256];

	/* Infinite loop */
	for (;;) {
		uint32_t ldr_norte = leer_adc(ADC_CHANNEL_9);
 80008ea:	2009      	movs	r0, #9
 80008ec:	f000 fa18 	bl	8000d20 <leer_adc>
 80008f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
		uint32_t ldr_sur = leer_adc(ADC_CHANNEL_10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f000 fa14 	bl	8000d20 <leer_adc>
 80008f8:	64b8      	str	r0, [r7, #72]	@ 0x48
		uint32_t ldr_este = leer_adc(ADC_CHANNEL_11);
 80008fa:	200b      	movs	r0, #11
 80008fc:	f000 fa10 	bl	8000d20 <leer_adc>
 8000900:	6478      	str	r0, [r7, #68]	@ 0x44
		uint32_t ldr_oeste = leer_adc(ADC_CHANNEL_12);
 8000902:	200c      	movs	r0, #12
 8000904:	f000 fa0c 	bl	8000d20 <leer_adc>
 8000908:	6438      	str	r0, [r7, #64]	@ 0x40
		uint32_t ldr_ref = leer_adc(ADC_CHANNEL_13);
 800090a:	200d      	movs	r0, #13
 800090c:	f000 fa08 	bl	8000d20 <leer_adc>
 8000910:	63f8      	str	r0, [r7, #60]	@ 0x3c
//			// (Opcional: enviar motores a posición "dormir")
//			osDelay(1000); // Dormir 1 segundo y volver a chequear
//			continue;      // Saltar el resto del bucle
//		}
		// 2. Calcular Error_Az y Error_El
		int32_t error_az = ldr_este - ldr_oeste;
 8000912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	63bb      	str	r3, [r7, #56]	@ 0x38
		int32_t error_el = ldr_norte - ldr_sur;
 800091a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800091c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34

		//PID AZIMUTH
		float p_term_az = Kp_az * (float) error_az;
 8000922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8000930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000934:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		integral_sum_az += (float) error_az * dt;
 8000938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800093a:	ee07 3a90 	vmov	s15, r3
 800093e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000942:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800094e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000952:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		float i_term_az = Ki_az * integral_sum_az;
 8000956:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800095a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800095e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000962:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float error_deriv_az = ((float) error_az - last_error_az) / dt;
 8000966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000970:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8000974:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000978:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800097c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000980:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		float d_term_az = Kd_az * error_deriv_az;
 8000984:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000988:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800098c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000990:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		last_error_az = (float) error_az;
 8000994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

		//PID ELEVACIÓN
		float p_term_el = Kp_el * (float) error_el;
 80009a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ac:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80009b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b4:	edc7 7a08 	vstr	s15, [r7, #32]
		integral_sum_el += (float) error_el * dt;
 80009b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ba:	ee07 3a90 	vmov	s15, r3
 80009be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009c2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80009ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		float i_term_el = Ki_el * integral_sum_el;
 80009d6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80009da:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80009de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e2:	edc7 7a07 	vstr	s15, [r7, #28]
		float error_deriv_el = ((float) error_el - last_error_el) / dt;
 80009e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80009f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80009f8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80009fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a00:	edc7 7a06 	vstr	s15, [r7, #24]
		float d_term_el = Kd_el * error_deriv_el;
 8000a04:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000a08:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a10:	edc7 7a05 	vstr	s15, [r7, #20]
		last_error_el = (float) error_el;
 8000a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

		//SALIDA DEL PID AZIMUTH
		int32_t pasos_az = (int32_t) (p_term_az + i_term_az + d_term_az);
 8000a22:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000a26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a2e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
 8000a3e:	613b      	str	r3, [r7, #16]
		//SALIDA DEL PID ELEVACION
		int32_t pasos_el = (int32_t) (p_term_el + i_term_el + d_term_el);
 8000a40:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a44:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a58:	ee17 3a90 	vmov	r3, s15
 8000a5c:	60fb      	str	r3, [r7, #12]

		// 5. Enviar la orden a las otras tareas (usando una "Queue" de FreeRTOS)
		if (pasos_az != 0) {
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <ControlTask+0x1dc>
			osMessageQueuePut(motorAzQueueHandle, &pasos_az, 0U, 0U);
 8000a64:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <ControlTask+0x250>)
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f003 ff54 	bl	800491c <osMessageQueuePut>
		}
		if (pasos_el != 0) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d007      	beq.n	8000a8a <ControlTask+0x1f2>
			osMessageQueuePut(motorElQueueHandle, &pasos_el, 0U, 0U);
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <ControlTask+0x254>)
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	f107 010c 	add.w	r1, r7, #12
 8000a82:	2300      	movs	r3, #0
 8000a84:	2200      	movs	r2, #0
 8000a86:	f003 ff49 	bl	800491c <osMessageQueuePut>
		}

		if (HAL_UART_GetState(&huart2) == HAL_UART_STATE_READY) {
 8000a8a:	4819      	ldr	r0, [pc, #100]	@ (8000af0 <ControlTask+0x258>)
 8000a8c:	f003 f89e 	bl	8003bcc <HAL_UART_GetState>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b20      	cmp	r3, #32
 8000a94:	d11e      	bne.n	8000ad4 <ControlTask+0x23c>
			// (B) Formatear el string de forma segura
			// Usamos snprintf para evitar desbordamiento del búfer
			snprintf(tx_buffer, 256,
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	9206      	str	r2, [sp, #24]
 8000a9c:	9305      	str	r3, [sp, #20]
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa0:	9304      	str	r3, [sp, #16]
 8000aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa4:	9303      	str	r3, [sp, #12]
 8000aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <ControlTask+0x25c>)
 8000ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aba:	480f      	ldr	r0, [pc, #60]	@ (8000af8 <ControlTask+0x260>)
 8000abc:	f006 fd34 	bl	8007528 <sniprintf>

			// (C) Iniciar la transmisión DMA
			// Esta función retorna INMEDIATAMENTE (no bloquea)
			// El hardware de DMA se encarga del resto.
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*) tx_buffer,
					strlen(tx_buffer));
 8000ac0:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <ControlTask+0x260>)
 8000ac2:	f7ff fb8d 	bl	80001e0 <strlen>
 8000ac6:	4603      	mov	r3, r0
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*) tx_buffer,
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	490a      	ldr	r1, [pc, #40]	@ (8000af8 <ControlTask+0x260>)
 8000ace:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <ControlTask+0x258>)
 8000ad0:	f002 fd22 	bl	8003518 <HAL_UART_Transmit_DMA>
		}

		// 6. Dormir esta tarea por 50ms (para el bucle de control)
		osDelay(50);
 8000ad4:	2032      	movs	r0, #50	@ 0x32
 8000ad6:	f003 fe93 	bl	8004800 <osDelay>
	for (;;) {
 8000ada:	e706      	b.n	80008ea <ControlTask+0x52>
 8000adc:	3dcccccd 	.word	0x3dcccccd
 8000ae0:	3c23d70a 	.word	0x3c23d70a
 8000ae4:	3d4ccccd 	.word	0x3d4ccccd
 8000ae8:	200000d4 	.word	0x200000d4
 8000aec:	200000d8 	.word	0x200000d8
 8000af0:	20000228 	.word	0x20000228
 8000af4:	08007ef8 	.word	0x08007ef8
 8000af8:	200000dc 	.word	0x200000dc

08000afc <MotorAzTask>:
 * @brief Function implementing the motorAzTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MotorAzTask */
void MotorAzTask(void *argument) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN MotorAzTask */
	int32_t pasos_a_mover = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
	uint8_t paso_actual_az = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	75fb      	strb	r3, [r7, #23]
	/* Infinite loop */
	for (;;) {
		// 1. Esperar (bloqueado) hasta recibir una orden en la cola de AZIMUTH
		if (osMessageQueueGet(motorAzQueueHandle, &pasos_a_mover, NULL,
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MotorAzTask+0x78>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	f107 0108 	add.w	r1, r7, #8
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f003 ff5f 	bl	80049dc <osMessageQueueGet>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f3      	bne.n	8000b0c <MotorAzTask+0x10>
		osWaitForever) == osOK) {

			// 2. Ejecutar la orden
			int32_t pasos_abs =
					(pasos_a_mover > 0) ? pasos_a_mover : -pasos_a_mover;
 8000b24:	68bb      	ldr	r3, [r7, #8]
			int32_t pasos_abs =
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	60fb      	str	r3, [r7, #12]

			for (int i = 0; i < pasos_abs; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	e019      	b.n	8000b68 <MotorAzTask+0x6c>
				if (pasos_a_mover > 0) {
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	dd08      	ble.n	8000b4c <MotorAzTask+0x50>
					paso_actual_az++;
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_az > 7)
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d905      	bls.n	8000b52 <MotorAzTask+0x56>
						paso_actual_az = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]
 8000b4a:	e002      	b.n	8000b52 <MotorAzTask+0x56>
				} else {
					paso_actual_az--;
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_az < 0)
						paso_actual_az = 7;
				}
				setStep(paso_actual_az, MOTOR_AZIMUTH);
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	2101      	movs	r1, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f84c 	bl	8000bf4 <setStep>
				osDelay(4);
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f003 fe4f 	bl	8004800 <osDelay>
			for (int i = 0; i < pasos_abs; i++) {
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	3301      	adds	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbe1      	blt.n	8000b34 <MotorAzTask+0x38>
		if (osMessageQueueGet(motorAzQueueHandle, &pasos_a_mover, NULL,
 8000b70:	e7cc      	b.n	8000b0c <MotorAzTask+0x10>
 8000b72:	bf00      	nop
 8000b74:	200000d4 	.word	0x200000d4

08000b78 <MotorElTask>:
 * @brief Function implementing the motorElTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MotorElTask */
void MotorElTask(void *argument) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN MotorElTask */
	int32_t pasos_a_mover = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
	uint8_t paso_actual_el = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	75fb      	strb	r3, [r7, #23]
	/* Infinite loop */
	for (;;) {
		if (osMessageQueueGet(motorElQueueHandle, &pasos_a_mover, NULL,
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MotorElTask+0x78>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f107 0108 	add.w	r1, r7, #8
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	2200      	movs	r2, #0
 8000b96:	f003 ff21 	bl	80049dc <osMessageQueueGet>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f3      	bne.n	8000b88 <MotorElTask+0x10>
		osWaitForever) == osOK) {
			int32_t pasos_abs =
					(pasos_a_mover > 0) ? pasos_a_mover : -pasos_a_mover;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
			int32_t pasos_abs =
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bfb8      	it	lt
 8000ba6:	425b      	neglt	r3, r3
 8000ba8:	60fb      	str	r3, [r7, #12]

			for (int i = 0; i < pasos_abs; i++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	e019      	b.n	8000be4 <MotorElTask+0x6c>
				if (pasos_a_mover > 0) {
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dd08      	ble.n	8000bc8 <MotorElTask+0x50>
					paso_actual_el++;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_el > 7)
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d905      	bls.n	8000bce <MotorElTask+0x56>
						paso_actual_el = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	75fb      	strb	r3, [r7, #23]
 8000bc6:	e002      	b.n	8000bce <MotorElTask+0x56>
				} else {
					paso_actual_el--;
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_el < 0)
						paso_actual_el = 7;
				}
				setStep(paso_actual_el, MOTOR_ELEVATION);
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f80e 	bl	8000bf4 <setStep>
				osDelay(4);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f003 fe11 	bl	8004800 <osDelay>
			for (int i = 0; i < pasos_abs; i++) {
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	3301      	adds	r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbe1      	blt.n	8000bb0 <MotorElTask+0x38>
		if (osMessageQueueGet(motorElQueueHandle, &pasos_a_mover, NULL,
 8000bec:	e7cc      	b.n	8000b88 <MotorElTask+0x10>
 8000bee:	bf00      	nop
 8000bf0:	200000d8 	.word	0x200000d8

08000bf4 <setStep>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void setStep(uint8_t step, enum Motor_Id motor_id) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
// Asegurarse de que el índice esté en el rango 0-7
	step = step % 8;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	71fb      	strb	r3, [r7, #7]

	switch (motor_id) {
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d03d      	beq.n	8000c8e <setStep+0x9a>
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d177      	bne.n	8000d06 <setStep+0x112>
	case MOTOR_AZIMUTH:
		HAL_GPIO_WritePin(M_AZ_1_GPIO_Port, M_AZ_1_Pin,
				step_sequence[step][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <setStep+0x11c>)
 8000c1a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(M_AZ_1_GPIO_Port, M_AZ_1_Pin,
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4839      	ldr	r0, [pc, #228]	@ (8000d14 <setStep+0x120>)
 8000c2e:	f001 fcb7 	bl	80025a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_2_GPIO_Port, M_AZ_2_Pin,
				step_sequence[step][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a36      	ldr	r2, [pc, #216]	@ (8000d10 <setStep+0x11c>)
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(M_AZ_2_GPIO_Port, M_AZ_2_Pin,
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4832      	ldr	r0, [pc, #200]	@ (8000d14 <setStep+0x120>)
 8000c4c:	f001 fca8 	bl	80025a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_3_GPIO_Port, M_AZ_3_Pin,
				step_sequence[step][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4a2f      	ldr	r2, [pc, #188]	@ (8000d10 <setStep+0x11c>)
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(M_AZ_3_GPIO_Port, M_AZ_3_Pin,
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf14      	ite	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	2300      	moveq	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	2110      	movs	r1, #16
 8000c68:	482a      	ldr	r0, [pc, #168]	@ (8000d14 <setStep+0x120>)
 8000c6a:	f001 fc99 	bl	80025a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_4_GPIO_Port, M_AZ_4_Pin,
				step_sequence[step][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a27      	ldr	r2, [pc, #156]	@ (8000d10 <setStep+0x11c>)
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(M_AZ_4_GPIO_Port, M_AZ_4_Pin,
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf14      	ite	ne
 8000c7c:	2301      	movne	r3, #1
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	2101      	movs	r1, #1
 8000c86:	4824      	ldr	r0, [pc, #144]	@ (8000d18 <setStep+0x124>)
 8000c88:	f001 fc8a 	bl	80025a0 <HAL_GPIO_WritePin>
		break;
 8000c8c:	e03c      	b.n	8000d08 <setStep+0x114>
	case MOTOR_ELEVATION:
		HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin,
				step_sequence[step][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4a1f      	ldr	r2, [pc, #124]	@ (8000d10 <setStep+0x11c>)
 8000c92:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin,
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	481d      	ldr	r0, [pc, #116]	@ (8000d1c <setStep+0x128>)
 8000ca6:	f001 fc7b 	bl	80025a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_2_GPIO_Port, M_EL_2_Pin,
				step_sequence[step][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <setStep+0x11c>)
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(M_EL_2_GPIO_Port, M_EL_2_Pin,
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <setStep+0x124>)
 8000cc4:	f001 fc6c 	bl	80025a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_3_GPIO_Port, M_EL_3_Pin,
				step_sequence[step][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <setStep+0x11c>)
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(M_EL_3_GPIO_Port, M_EL_3_Pin,
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <setStep+0x120>)
 8000ce2:	f001 fc5d 	bl	80025a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_4_GPIO_Port, M_EL_4_Pin,
				step_sequence[step][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <setStep+0x11c>)
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(M_EL_4_GPIO_Port, M_EL_4_Pin,
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf14      	ite	ne
 8000cf4:	2301      	movne	r3, #1
 8000cf6:	2300      	moveq	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2140      	movs	r1, #64	@ 0x40
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <setStep+0x120>)
 8000d00:	f001 fc4e 	bl	80025a0 <HAL_GPIO_WritePin>
		break;
 8000d04:	e000      	b.n	8000d08 <setStep+0x114>
	default:
		break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	08007f54 	.word	0x08007f54
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020800 	.word	0x40020800

08000d20 <leer_adc>:

uint32_t leer_adc(uint32_t channel) {
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
//	ADC_ChannelConfTypeDef sConfig = { 0 };
	uint32_t adc_valor = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]

	/*
	 */
	return adc_valor;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b40      	ldr	r3, [pc, #256]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b3d      	ldr	r3, [pc, #244]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b39      	ldr	r3, [pc, #228]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a38      	ldr	r2, [pc, #224]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b32      	ldr	r3, [pc, #200]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a31      	ldr	r2, [pc, #196]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a2a      	ldr	r2, [pc, #168]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0x11c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_AZ_1_Pin|M_AZ_2_Pin|M_AZ_3_Pin|LD2_Pin
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	21f3      	movs	r1, #243	@ 0xf3
 8000dc6:	4825      	ldr	r0, [pc, #148]	@ (8000e5c <MX_GPIO_Init+0x120>)
 8000dc8:	f001 fbea 	bl	80025a0 <HAL_GPIO_WritePin>
                          |M_EL_4_Pin|M_EL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_AZ_4_Pin|M_EL_2_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2141      	movs	r1, #65	@ 0x41
 8000dd0:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <MX_GPIO_Init+0x124>)
 8000dd2:	f001 fbe5 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	4822      	ldr	r0, [pc, #136]	@ (8000e64 <MX_GPIO_Init+0x128>)
 8000ddc:	f001 fbe0 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	481b      	ldr	r0, [pc, #108]	@ (8000e64 <MX_GPIO_Init+0x128>)
 8000df8:	f001 fa4e 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_AZ_1_Pin M_AZ_2_Pin M_AZ_3_Pin LD2_Pin
                           M_EL_4_Pin M_EL_3_Pin */
  GPIO_InitStruct.Pin = M_AZ_1_Pin|M_AZ_2_Pin|M_AZ_3_Pin|LD2_Pin
 8000dfc:	23f3      	movs	r3, #243	@ 0xf3
 8000dfe:	617b      	str	r3, [r7, #20]
                          |M_EL_4_Pin|M_EL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4812      	ldr	r0, [pc, #72]	@ (8000e5c <MX_GPIO_Init+0x120>)
 8000e14:	f001 fa40 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_AZ_4_Pin M_EL_2_Pin */
  GPIO_InitStruct.Pin = M_AZ_4_Pin|M_EL_2_Pin;
 8000e18:	2341      	movs	r3, #65	@ 0x41
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <MX_GPIO_Init+0x124>)
 8000e30:	f001 fa32 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EL_1_Pin */
  GPIO_InitStruct.Pin = M_EL_1_Pin;
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EL_1_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <MX_GPIO_Init+0x128>)
 8000e4c:	f001 fa24 	bl	8002298 <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020800 	.word	0x40020800

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fa8c 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f810 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f7ff ff62 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e78:	f7ff fc8a 	bl	8000790 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e7c:	f000 f9ae 	bl	80011dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e80:	f7ff fb9c 	bl	80005bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000e84:	f003 fbe0 	bl	8004648 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000e88:	f7ff fca2 	bl	80007d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e8c:	f003 fc00 	bl	8004690 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <main+0x28>

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	@ 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2230      	movs	r2, #48	@ 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f006 fb76 	bl	8007594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <SystemClock_Config+0xd0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <SystemClock_Config+0xd0>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec8:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <SystemClock_Config+0xd0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <SystemClock_Config+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ee0:	4a21      	ldr	r2, [pc, #132]	@ (8000f68 <SystemClock_Config+0xd4>)
 8000ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <SystemClock_Config+0xd4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2310      	movs	r3, #16
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	2302      	movs	r3, #2
 8000f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f16:	2307      	movs	r3, #7
 8000f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fb72 	bl	8002608 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f2a:	f000 f831 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fdd4 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f56:	f000 f81b 	bl	8000f90 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	@ 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f7e:	f000 fa25 	bl	80013cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010000 	.word	0x40010000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_MspInit+0x54>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <HAL_MspInit+0x54>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x54>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_MspInit+0x54>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_MspInit+0x54>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x54>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	210f      	movs	r1, #15
 8000fde:	f06f 0001 	mvn.w	r0, #1
 8000fe2:	f000 fd2d 	bl	8001a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b2e      	ldr	r3, [pc, #184]	@ (80010c4 <HAL_InitTick+0xd0>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100c:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <HAL_InitTick+0xd0>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6453      	str	r3, [r2, #68]	@ 0x44
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_InitTick+0xd0>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 ff84 	bl	8002f38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001030:	f001 ff6e 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8001034:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001038:	4a23      	ldr	r2, [pc, #140]	@ (80010c8 <HAL_InitTick+0xd4>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9b      	lsrs	r3, r3, #18
 8001040:	3b01      	subs	r3, #1
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001044:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <HAL_InitTick+0xd8>)
 8001046:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <HAL_InitTick+0xdc>)
 8001048:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_InitTick+0xd8>)
 800104c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_InitTick+0xd8>)
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <HAL_InitTick+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_InitTick+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_InitTick+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800106a:	4818      	ldr	r0, [pc, #96]	@ (80010cc <HAL_InitTick+0xd8>)
 800106c:	f001 ff96 	bl	8002f9c <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800107a:	2b00      	cmp	r3, #0
 800107c:	d11b      	bne.n	80010b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800107e:	4813      	ldr	r0, [pc, #76]	@ (80010cc <HAL_InitTick+0xd8>)
 8001080:	f001 ffe6 	bl	8003050 <HAL_TIM_Base_Start_IT>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800108a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800108e:	2b00      	cmp	r3, #0
 8001090:	d111      	bne.n	80010b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001092:	2019      	movs	r0, #25
 8001094:	f000 fcf0 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d808      	bhi.n	80010b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800109e:	2200      	movs	r2, #0
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	2019      	movs	r0, #25
 80010a4:	f000 fccc 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <HAL_InitTick+0xe0>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e002      	b.n	80010b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3730      	adds	r7, #48	@ 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	200001dc 	.word	0x200001dc
 80010d0:	40010000 	.word	0x40010000
 80010d4:	20000004 	.word	0x20000004

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <UsageFault_Handler+0x4>

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <DMA1_Stream6_IRQHandler+0x10>)
 8001116:	f000 fe55 	bl	8001dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000270 	.word	0x20000270

08001124 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800112a:	f001 fff3 	bl	8003114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001dc 	.word	0x200001dc

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <USART2_IRQHandler+0x10>)
 800113e:	f002 fa67 	bl	8003610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000228 	.word	0x20000228

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f006 fa12 	bl	80075a4 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20018000 	.word	0x20018000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	20000224 	.word	0x20000224
 80011b4:	20004d70 	.word	0x20004d70

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <MX_USART2_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 8001214:	f002 f930 	bl	8003478 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f7ff feb7 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000228 	.word	0x20000228
 800122c:	40004400 	.word	0x40004400

08001230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a34      	ldr	r2, [pc, #208]	@ (8001320 <HAL_UART_MspInit+0xf0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d161      	bne.n	8001316 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <HAL_UART_MspInit+0xf4>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	4a32      	ldr	r2, [pc, #200]	@ (8001324 <HAL_UART_MspInit+0xf4>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	6413      	str	r3, [r2, #64]	@ 0x40
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <HAL_UART_MspInit+0xf4>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <HAL_UART_MspInit+0xf4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a2b      	ldr	r2, [pc, #172]	@ (8001324 <HAL_UART_MspInit+0xf4>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_UART_MspInit+0xf4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800128a:	230c      	movs	r3, #12
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129a:	2307      	movs	r3, #7
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	@ (8001328 <HAL_UART_MspInit+0xf8>)
 80012a6:	f000 fff7 	bl	8002298 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012ac:	4a20      	ldr	r2, [pc, #128]	@ (8001330 <HAL_UART_MspInit+0x100>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012ba:	2240      	movs	r2, #64	@ 0x40
 80012bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012ea:	4810      	ldr	r0, [pc, #64]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012ec:	f000 fbd2 	bl	8001a94 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012f6:	f7ff fe4b 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_UART_MspInit+0xfc>)
 80012fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_UART_MspInit+0xfc>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2105      	movs	r1, #5
 800130a:	2026      	movs	r0, #38	@ 0x26
 800130c:	f000 fb98 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001310:	2026      	movs	r0, #38	@ 0x26
 8001312:	f000 fbb1 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	@ 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40004400 	.word	0x40004400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	20000270 	.word	0x20000270
 8001330:	400260a0 	.word	0x400260a0

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001338:	f7ff ff3e 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	@ (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001362:	f006 f925 	bl	80075b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff fd7f 	bl	8000e68 <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800136c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001378:	08008098 	.word	0x08008098
  ldr r2, =_sbss
 800137c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001380:	20004d6c 	.word	0x20004d6c

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <HAL_Init+0x40>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <HAL_Init+0x40>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_Init+0x40>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 fb3a 	bl	8001a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f7ff fe1c 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fdee 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008
 80013f0:	200002d0 	.word	0x200002d0

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200002d0 	.word	0x200002d0

0800140c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e033      	b.n	800148a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff f950 	bl	80006d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f93a 	bl	80016d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	@ 0x40
 800147a:	e001      	b.n	8001480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1c>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e105      	b.n	80016bc <HAL_ADC_ConfigChannel+0x228>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d925      	bls.n	800150c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68d9      	ldr	r1, [r3, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4403      	add	r3, r0
 80014fe:	3b1e      	subs	r3, #30
 8001500:	409a      	lsls	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e022      	b.n	8001552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	2207      	movs	r2, #7
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	409a      	lsls	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d824      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b05      	subs	r3, #5
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015a2:	e04c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d824      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	@ 0x23
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b23      	subs	r3, #35	@ 0x23
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f4:	e023      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b41      	subs	r3, #65	@ 0x41
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b41      	subs	r3, #65	@ 0x41
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <HAL_ADC_ConfigChannel+0x234>)
 8001640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d109      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	@ (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d123      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d003      	beq.n	800167a <HAL_ADC_ConfigChannel+0x1e6>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b11      	cmp	r3, #17
 8001678:	d11b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <HAL_ADC_ConfigChannel+0x240>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e0:	4b79      	ldr	r3, [pc, #484]	@ (80018c8 <ADC_Init+0x1f0>)
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	4a58      	ldr	r2, [pc, #352]	@ (80018cc <ADC_Init+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800177e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	e00f      	b.n	80017d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0202 	bic.w	r2, r2, #2
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001812:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	035a      	lsls	r2, r3, #13
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e007      	b.n	800184c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800184a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800185a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	3b01      	subs	r3, #1
 8001868:	051a      	lsls	r2, r3, #20
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800188e:	025a      	lsls	r2, r3, #9
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	029a      	lsls	r2, r3, #10
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40012300 	.word	0x40012300
 80018cc:	0f000001 	.word	0x0f000001

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	@ (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	@ (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff4c 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff61 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb1 	bl	80019c4 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff80 	bl	8001970 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff54 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff fca8 	bl	80013f4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e099      	b.n	8001be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	e00f      	b.n	8001af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad2:	f7ff fc8f 	bl	80013f4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d908      	bls.n	8001af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e078      	b.n	8001be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e8      	bne.n	8001ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <HAL_DMA_Init+0x158>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f023 0307 	bic.w	r3, r3, #7
 8001b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d117      	bne.n	8001bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb01 	bl	80021a0 <DMA_CheckFifoParam>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e016      	b.n	8001be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fab8 	bl	8002134 <DMA_CalcBaseAndBitshift>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	223f      	movs	r2, #63	@ 0x3f
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f010803f 	.word	0xf010803f

08001bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Start_IT+0x26>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e040      	b.n	8001c98 <HAL_DMA_Start_IT+0xa8>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d12f      	bne.n	8001c8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa4a 	bl	80020d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	223f      	movs	r2, #63	@ 0x3f
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0216 	orr.w	r2, r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0208 	orr.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cae:	f7ff fba1 	bl	80013f4 <HAL_GetTick>
 8001cb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e052      	b.n	8001d78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0216 	bic.w	r2, r2, #22
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <HAL_DMA_Abort+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0208 	bic.w	r2, r2, #8
 8001d10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d22:	e013      	b.n	8001d4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d24:	f7ff fb66 	bl	80013f4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d90c      	bls.n	8001d4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e015      	b.n	8001d78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e4      	bne.n	8001d24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	223f      	movs	r2, #63	@ 0x3f
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d004      	beq.n	8001d9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00c      	b.n	8001db8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2205      	movs	r2, #5
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800200c <HAL_DMA_IRQHandler+0x248>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002010 <HAL_DMA_IRQHandler+0x24c>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2208      	movs	r2, #8
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01a      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	2201      	movs	r2, #1
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d012      	beq.n	8001e66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2201      	movs	r2, #1
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00b      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	2204      	movs	r2, #4
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d043      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03c      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d018      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
 8001ef2:	e01f      	b.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e016      	b.n	8001f34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0208 	bic.w	r2, r2, #8
 8001f22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f38:	2220      	movs	r2, #32
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 808f 	beq.w	8002064 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8087 	beq.w	8002064 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d136      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0216 	bic.w	r2, r2, #22
 8001f7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d103      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x1da>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0208 	bic.w	r2, r2, #8
 8001fac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	223f      	movs	r2, #63	@ 0x3f
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d07e      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
        }
        return;
 8001fda:	e079      	b.n	80020d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e02c      	b.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000
 8002010:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e01e      	b.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0210 	bic.w	r2, r2, #16
 8002042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	2b00      	cmp	r3, #0
 800206a:	d032      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d022      	beq.n	80020be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2205      	movs	r2, #5
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	d307      	bcc.n	80020ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_DMA_IRQHandler+0x2cc>
 80020aa:	e000      	b.n	80020ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
 80020ce:	e000      	b.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d0:	bf00      	nop
    }
  }
}
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b40      	cmp	r3, #64	@ 0x40
 8002104:	d108      	bne.n	8002118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002116:	e007      	b.n	8002128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b10      	subs	r3, #16
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <DMA_CalcBaseAndBitshift+0x64>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <DMA_CalcBaseAndBitshift+0x68>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d909      	bls.n	8002176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58
 8002174:	e007      	b.n	8002186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	aaaaaaab 	.word	0xaaaaaaab
 800219c:	0800804c 	.word	0x0800804c

080021a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d856      	bhi.n	800226e <DMA_CheckFifoParam+0xce>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <DMA_CheckFifoParam+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021eb 	.word	0x080021eb
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	0800226f 	.word	0x0800226f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d046      	beq.n	8002272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e043      	b.n	8002272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f2:	d140      	bne.n	8002276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e03d      	b.n	8002276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002202:	d121      	bne.n	8002248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d837      	bhi.n	800227a <DMA_CheckFifoParam+0xda>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <DMA_CheckFifoParam+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002227 	.word	0x08002227
 8002218:	08002221 	.word	0x08002221
 800221c:	08002239 	.word	0x08002239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e030      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002236:	e022      	b.n	800227e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002246:	e01c      	b.n	8002282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d903      	bls.n	8002256 <DMA_CheckFifoParam+0xb6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002254:	e018      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e015      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e00b      	b.n	8002286 <DMA_CheckFifoParam+0xe6>
      break;
 800226e:	bf00      	nop
 8002270:	e00a      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e008      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e006      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;   
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
    }
  } 
  
  return status; 
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	@ 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e159      	b.n	8002568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8148 	bne.w	8002562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a2 	beq.w	8002562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b57      	ldr	r3, [pc, #348]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a56      	ldr	r2, [pc, #344]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b54      	ldr	r3, [pc, #336]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_GPIO_Init+0x2ec>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a49      	ldr	r2, [pc, #292]	@ (8002588 <HAL_GPIO_Init+0x2f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x202>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a48      	ldr	r2, [pc, #288]	@ (800258c <HAL_GPIO_Init+0x2f4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x1fe>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a47      	ldr	r2, [pc, #284]	@ (8002590 <HAL_GPIO_Init+0x2f8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x1fa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a46      	ldr	r2, [pc, #280]	@ (8002594 <HAL_GPIO_Init+0x2fc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x1f6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a45      	ldr	r2, [pc, #276]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x1f2>
 8002486:	2304      	movs	r3, #4
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x204>
 800248a:	2307      	movs	r3, #7
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x204>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x204>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x204>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x204>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	@ (8002584 <HAL_GPIO_Init+0x2ec>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002508:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_GPIO_Init+0x304>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_GPIO_Init+0x304>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002532:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x304>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b18      	ldr	r3, [pc, #96]	@ (800259c <HAL_GPIO_Init+0x304>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_GPIO_Init+0x304>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f aea2 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025bc:	e003      	b.n	80025c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	041a      	lsls	r2, r3, #16
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	400b      	ands	r3, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e267      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d075      	beq.n	8002712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002626:	4b88      	ldr	r3, [pc, #544]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d00c      	beq.n	800264c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b85      	ldr	r3, [pc, #532]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800263a:	2b08      	cmp	r3, #8
 800263c:	d112      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4b82      	ldr	r3, [pc, #520]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800264a:	d10b      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	4b7e      	ldr	r3, [pc, #504]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05b      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e242      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x74>
 800266e:	4b76      	ldr	r3, [pc, #472]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b70      	ldr	r3, [pc, #448]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6f      	ldr	r2, [pc, #444]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6d      	ldr	r3, [pc, #436]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6c      	ldr	r2, [pc, #432]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 80026a0:	4b69      	ldr	r3, [pc, #420]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b66      	ldr	r3, [pc, #408]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a65      	ldr	r2, [pc, #404]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fe98 	bl	80013f4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fe94 	bl	80013f4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e207      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b5b      	ldr	r3, [pc, #364]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fe84 	bl	80013f4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fe80 	bl	80013f4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1f3      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800271e:	4b4a      	ldr	r3, [pc, #296]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b44      	ldr	r3, [pc, #272]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b41      	ldr	r3, [pc, #260]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1c7      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4937      	ldr	r1, [pc, #220]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e03a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b34      	ldr	r3, [pc, #208]	@ (800284c <HAL_RCC_OscConfig+0x244>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fe39 	bl	80013f4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe fe35 	bl	80013f4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1a8      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b28      	ldr	r3, [pc, #160]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4925      	ldr	r1, [pc, #148]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HAL_RCC_OscConfig+0x244>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fe18 	bl	80013f4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe fe14 	bl	80013f4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e187      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d036      	beq.n	8002860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <HAL_RCC_OscConfig+0x248>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fdf8 	bl	80013f4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe fdf4 	bl	80013f4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e167      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_OscConfig+0x240>)
 800281c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x200>
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_RCC_OscConfig+0x248>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fde1 	bl	80013f4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fddd 	bl	80013f4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d907      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e150      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b88      	ldr	r3, [pc, #544]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ea      	bne.n	8002836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8097 	beq.w	800299c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b81      	ldr	r3, [pc, #516]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b7d      	ldr	r3, [pc, #500]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	4a7c      	ldr	r2, [pc, #496]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	@ 0x40
 800288e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b77      	ldr	r3, [pc, #476]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b74      	ldr	r3, [pc, #464]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fd9d 	bl	80013f4 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe fd99 	bl	80013f4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e10c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2ea>
 80028e4:	4b64      	ldr	r3, [pc, #400]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a63      	ldr	r2, [pc, #396]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x30c>
 80028fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	@ 0x70
 8002906:	4b5c      	ldr	r3, [pc, #368]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	@ 0x70
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 8002914:	4b58      	ldr	r3, [pc, #352]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a57      	ldr	r2, [pc, #348]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002920:	4b55      	ldr	r3, [pc, #340]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	4a54      	ldr	r2, [pc, #336]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fd5e 	bl	80013f4 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fd5a 	bl	80013f4 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0cb      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4b49      	ldr	r3, [pc, #292]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ee      	beq.n	800293c <HAL_RCC_OscConfig+0x334>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fd48 	bl	80013f4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe fd44 	bl	80013f4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0b5      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ee      	bne.n	8002968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	4a38      	ldr	r2, [pc, #224]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a1 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d05c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d141      	bne.n	8002a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fd18 	bl	80013f4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fd14 	bl	80013f4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e087      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	041b      	lsls	r3, r3, #16
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	491b      	ldr	r1, [pc, #108]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fced 	bl	80013f4 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fce9 	bl	80013f4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e05c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x416>
 8002a3c:	e054      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fcd6 	bl	80013f4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fcd2 	bl	80013f4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e045      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x444>
 8002a6a:	e03d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e038      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d121      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b68      	ldr	r3, [pc, #416]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d90c      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e067      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4934      	ldr	r1, [pc, #208]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fc04 	bl	80013f4 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fc00 	bl	80013f4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f821 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f9a8 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08008034 	.word	0x08008034
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b094      	sub	sp, #80	@ 0x50
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cdc:	4b79      	ldr	r3, [pc, #484]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f200 80e1 	bhi.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf6:	e0db      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b73      	ldr	r3, [pc, #460]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfc:	e0db      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b73      	ldr	r3, [pc, #460]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d02:	e0d8      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4621      	mov	r1, r4
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4651      	mov	r1, sl
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4651      	mov	r1, sl
 8002d78:	ebb2 0801 	subs.w	r8, r2, r1
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	462b      	mov	r3, r5
 8002da4:	eb49 0303 	adc.w	r3, r9, r3
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002db6:	4629      	mov	r1, r5
 8002db8:	024b      	lsls	r3, r1, #9
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	024a      	lsls	r2, r1, #9
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dd4:	f7fd fa5c 	bl	8000290 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de0:	e058      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	2200      	movs	r2, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	4611      	mov	r1, r2
 8002dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0e:	0150      	lsls	r0, r2, #5
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4641      	mov	r1, r8
 8002e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e34:	ebb2 040a 	subs.w	r4, r2, sl
 8002e38:	eb63 050b 	sbc.w	r5, r3, fp
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	464b      	mov	r3, r9
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	61fa      	str	r2, [r7, #28]
 8002e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e88:	f7fd fa02 	bl	8000290 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3750      	adds	r7, #80	@ 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08008044 	.word	0x08008044

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f14:	f7ff ffdc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	@ (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08008044 	.word	0x08008044

08002f38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	220f      	movs	r2, #15
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f48:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0203 	and.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_RCC_GetClockConfig+0x60>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0207 	and.w	r2, r3, #7
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40023c00 	.word	0x40023c00

08002f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e041      	b.n	8003032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f839 	bl	800303a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f000 f9b2 	bl	8003344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e044      	b.n	80030f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1e      	ldr	r2, [pc, #120]	@ (8003100 <HAL_TIM_Base_Start_IT+0xb0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d018      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x6c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003092:	d013      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x6c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <HAL_TIM_Base_Start_IT+0xb4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x6c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <HAL_TIM_Base_Start_IT+0xb8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x6c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_TIM_Base_Start_IT+0xbc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x6c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <HAL_TIM_Base_Start_IT+0xc0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d010      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030de:	e007      	b.n	80030f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40014000 	.word	0x40014000

08003114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d020      	beq.n	8003178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01b      	beq.n	8003178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0202 	mvn.w	r2, #2
 8003148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8d2 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8c4 	bl	80032f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f8d5 	bl	800331c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d020      	beq.n	80031c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01b      	beq.n	80031c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0204 	mvn.w	r2, #4
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8ac 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f89e 	bl	80032f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8af 	bl	800331c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d020      	beq.n	8003210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01b      	beq.n	8003210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0208 	mvn.w	r2, #8
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2204      	movs	r2, #4
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f886 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f878 	bl	80032f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f889 	bl	800331c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d020      	beq.n	800325c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0210 	mvn.w	r2, #16
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2208      	movs	r2, #8
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f860 	bl	8003308 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f852 	bl	80032f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f863 	bl	800331c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0201 	mvn.w	r2, #1
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fe76 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8e0 	bl	8003464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f834 	bl	8003330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0220 	mvn.w	r2, #32
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8b2 	bl	8003450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a37      	ldr	r2, [pc, #220]	@ (8003434 <TIM_Base_SetConfig+0xf0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00f      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003362:	d00b      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a34      	ldr	r2, [pc, #208]	@ (8003438 <TIM_Base_SetConfig+0xf4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a33      	ldr	r2, [pc, #204]	@ (800343c <TIM_Base_SetConfig+0xf8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a32      	ldr	r2, [pc, #200]	@ (8003440 <TIM_Base_SetConfig+0xfc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a28      	ldr	r2, [pc, #160]	@ (8003434 <TIM_Base_SetConfig+0xf0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01b      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339c:	d017      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a25      	ldr	r2, [pc, #148]	@ (8003438 <TIM_Base_SetConfig+0xf4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a24      	ldr	r2, [pc, #144]	@ (800343c <TIM_Base_SetConfig+0xf8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00f      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a23      	ldr	r2, [pc, #140]	@ (8003440 <TIM_Base_SetConfig+0xfc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a22      	ldr	r2, [pc, #136]	@ (8003444 <TIM_Base_SetConfig+0x100>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <TIM_Base_SetConfig+0x104>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a20      	ldr	r2, [pc, #128]	@ (800344c <TIM_Base_SetConfig+0x108>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <TIM_Base_SetConfig+0xf0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d103      	bne.n	800340e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f043 0204 	orr.w	r2, r3, #4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40010000 	.word	0x40010000
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800

08003450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e042      	b.n	8003510 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fec6 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fe0b 	bl	80040d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	@ 0x30
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b20      	cmp	r3, #32
 8003530:	d162      	bne.n	80035f8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_UART_Transmit_DMA+0x26>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e05b      	b.n	80035fa <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	88fa      	ldrh	r2, [r7, #6]
 8003552:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2221      	movs	r2, #33	@ 0x21
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003566:	4a27      	ldr	r2, [pc, #156]	@ (8003604 <HAL_UART_Transmit_DMA+0xec>)
 8003568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <HAL_UART_Transmit_DMA+0xf0>)
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	4a25      	ldr	r2, [pc, #148]	@ (800360c <HAL_UART_Transmit_DMA+0xf4>)
 8003578:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	2200      	movs	r2, #0
 8003580:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3304      	adds	r3, #4
 8003596:	461a      	mov	r2, r3
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f7fe fb29 	bl	8001bf0 <HAL_DMA_Start_IT>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2210      	movs	r2, #16
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e021      	b.n	80035fa <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3314      	adds	r3, #20
 80035c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	617b      	str	r3, [r7, #20]
   return(result);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3314      	adds	r3, #20
 80035de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80035e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e5      	bne.n	80035c0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3730      	adds	r7, #48	@ 0x30
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	08003c09 	.word	0x08003c09
 8003608:	08003ca3 	.word	0x08003ca3
 800360c:	08003cbf 	.word	0x08003cbf

08003610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0ba      	sub	sp, #232	@ 0xe8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800364e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_UART_IRQHandler+0x66>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fc73 	bl	8003f5a <UART_Receive_IT>
      return;
 8003674:	e273      	b.n	8003b5e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80de 	beq.w	800383c <HAL_UART_IRQHandler+0x22c>
 8003680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003690:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80d1 	beq.w	800383c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xae>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_UART_IRQHandler+0xd2>
 80036ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
 80036ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f043 0204 	orr.w	r2, r3, #4
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
 8003712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800371e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f043 0208 	orr.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 820a 	beq.w	8003b54 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_UART_IRQHandler+0x14e>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fbfe 	bl	8003f5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003768:	2b40      	cmp	r3, #64	@ 0x40
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_UART_IRQHandler+0x17a>
 8003782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04f      	beq.n	800382a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb09 	bl	8003da2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d141      	bne.n	8003822 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1d9      	bne.n	800379e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	4a8a      	ldr	r2, [pc, #552]	@ (8003a20 <HAL_UART_IRQHandler+0x410>)
 80037f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fabe 	bl	8001d80 <HAL_DMA_Abort_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e00e      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9c0 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00a      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9bc 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e006      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9b8 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003836:	e18d      	b.n	8003b54 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	bf00      	nop
    return;
 800383a:	e18b      	b.n	8003b54 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	2b01      	cmp	r3, #1
 8003842:	f040 8167 	bne.w	8003b14 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8160 	beq.w	8003b14 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8159 	beq.w	8003b14 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	f040 80ce 	bne.w	8003a24 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a9 	beq.w	80039f0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a6:	429a      	cmp	r2, r3
 80038a8:	f080 80a2 	bcs.w	80039f0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038be:	f000 8088 	beq.w	80039d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1d9      	bne.n	80038c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800391e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003932:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003936:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800393a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e1      	bne.n	800390e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800395a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800396e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003970:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003974:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800397c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e3      	bne.n	800394a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe f967 	bl	8001ca0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f8e3 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039ee:	e0b3      	b.n	8003b58 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 80ad 	bne.w	8003b58 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a08:	f040 80a6 	bne.w	8003b58 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8cb 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
      return;
 8003a1e:	e09b      	b.n	8003b58 <HAL_UART_IRQHandler+0x548>
 8003a20:	08003e69 	.word	0x08003e69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 808e 	beq.w	8003b5c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8089 	beq.w	8003b5c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e3      	bne.n	8003a4a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3314      	adds	r3, #20
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	623b      	str	r3, [r7, #32]
   return(result);
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e3      	bne.n	8003a82 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0310 	bic.w	r3, r3, #16
 8003ade:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aec:	61fa      	str	r2, [r7, #28]
 8003aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	617b      	str	r3, [r7, #20]
   return(result);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e3      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f851 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b12:	e023      	b.n	8003b5c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_IRQHandler+0x524>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f9ac 	bl	8003e8a <UART_Transmit_IT>
    return;
 8003b32:	e014      	b.n	8003b5e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <HAL_UART_IRQHandler+0x54e>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9ec 	bl	8003f2a <UART_EndTransmit_IT>
    return;
 8003b52:	e004      	b.n	8003b5e <HAL_UART_IRQHandler+0x54e>
    return;
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <HAL_UART_IRQHandler+0x54e>
      return;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_IRQHandler+0x54e>
      return;
 8003b5c:	bf00      	nop
  }
}
 8003b5e:	37e8      	adds	r7, #232	@ 0xe8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	b2db      	uxtb	r3, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b090      	sub	sp, #64	@ 0x40
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d137      	bne.n	8003c94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c26:	2200      	movs	r2, #0
 8003c28:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e5      	bne.n	8003c2a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c7e:	61fa      	str	r2, [r7, #28]
 8003c80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c92:	e002      	b.n	8003c9a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003c94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c96:	f7ff ff65 	bl	8003b64 <HAL_UART_TxCpltCallback>
}
 8003c9a:	bf00      	nop
 8003c9c:	3740      	adds	r7, #64	@ 0x40
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff ff61 	bl	8003b78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cda:	2b80      	cmp	r3, #128	@ 0x80
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b21      	cmp	r3, #33	@ 0x21
 8003cf0:	d108      	bne.n	8003d04 <UART_DMAError+0x46>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003cfe:	68b8      	ldr	r0, [r7, #8]
 8003d00:	f000 f827 	bl	8003d52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b22      	cmp	r3, #34	@ 0x22
 8003d24:	d108      	bne.n	8003d38 <UART_DMAError+0x7a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	f000 f835 	bl	8003da2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f043 0210 	orr.w	r2, r3, #16
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d44:	68b8      	ldr	r0, [r7, #8]
 8003d46:	f7ff ff2b 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b089      	sub	sp, #36	@ 0x24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	61ba      	str	r2, [r7, #24]
 8003d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6979      	ldr	r1, [r7, #20]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	613b      	str	r3, [r7, #16]
   return(result);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e5      	bne.n	8003d5a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b095      	sub	sp, #84	@ 0x54
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dca:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e5      	bne.n	8003daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d119      	bne.n	8003e4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f023 0310 	bic.w	r3, r3, #16
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e3a:	61ba      	str	r2, [r7, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6979      	ldr	r1, [r7, #20]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e5      	bne.n	8003e1a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e5c:	bf00      	nop
 8003e5e:	3754      	adds	r7, #84	@ 0x54
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fe8f 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b21      	cmp	r3, #33	@ 0x21
 8003e9c:	d13e      	bne.n	8003f1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	d114      	bne.n	8003ed2 <UART_Transmit_IT+0x48>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d110      	bne.n	8003ed2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]
 8003ed0:	e008      	b.n	8003ee4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	1c59      	adds	r1, r3, #1
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6211      	str	r1, [r2, #32]
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fe0a 	bl	8003b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08c      	sub	sp, #48	@ 0x30
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b22      	cmp	r3, #34	@ 0x22
 8003f74:	f040 80aa 	bne.w	80040cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f80:	d115      	bne.n	8003fae <UART_Receive_IT+0x54>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d111      	bne.n	8003fae <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fac:	e024      	b.n	8003ff8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d007      	beq.n	8003fce <UART_Receive_IT+0x74>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <UART_Receive_IT+0x82>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e008      	b.n	8003fee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29b      	uxth	r3, r3
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4619      	mov	r1, r3
 8004006:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004008:	2b00      	cmp	r3, #0
 800400a:	d15d      	bne.n	80040c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0220 	bic.w	r2, r2, #32
 800401a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800402a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	2b01      	cmp	r3, #1
 8004050:	d135      	bne.n	80040be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004078:	623a      	str	r2, [r7, #32]
 800407a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	61bb      	str	r3, [r7, #24]
   return(result);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d10a      	bne.n	80040b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fd7c 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
 80040bc:	e002      	b.n	80040c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fd64 	bl	8003b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e002      	b.n	80040ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3730      	adds	r7, #48	@ 0x30
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b0c0      	sub	sp, #256	@ 0x100
 80040de:	af00      	add	r7, sp, #0
 80040e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	ea40 0301 	orr.w	r3, r0, r1
 8004100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	431a      	orrs	r2, r3
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	431a      	orrs	r2, r3
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004130:	f021 010c 	bic.w	r1, r1, #12
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800413e:	430b      	orrs	r3, r1
 8004140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	6999      	ldr	r1, [r3, #24]
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	ea40 0301 	orr.w	r3, r0, r1
 800415e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b8f      	ldr	r3, [pc, #572]	@ (80043a4 <UART_SetConfig+0x2cc>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d005      	beq.n	8004178 <UART_SetConfig+0xa0>
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b8d      	ldr	r3, [pc, #564]	@ (80043a8 <UART_SetConfig+0x2d0>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d104      	bne.n	8004182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7fe feca 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 800417c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004180:	e003      	b.n	800418a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004182:	f7fe feb1 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004186:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004194:	f040 810c 	bne.w	80043b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041b2:	415b      	adcs	r3, r3
 80041b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041ba:	4621      	mov	r1, r4
 80041bc:	eb12 0801 	adds.w	r8, r2, r1
 80041c0:	4629      	mov	r1, r5
 80041c2:	eb43 0901 	adc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041e8:	462b      	mov	r3, r5
 80041ea:	eb49 0303 	adc.w	r3, r9, r3
 80041ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004206:	460b      	mov	r3, r1
 8004208:	18db      	adds	r3, r3, r3
 800420a:	653b      	str	r3, [r7, #80]	@ 0x50
 800420c:	4613      	mov	r3, r2
 800420e:	eb42 0303 	adc.w	r3, r2, r3
 8004212:	657b      	str	r3, [r7, #84]	@ 0x54
 8004214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800421c:	f7fc f838 	bl	8000290 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <UART_SetConfig+0x2d4>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011c      	lsls	r4, r3, #4
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004238:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800423c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004248:	415b      	adcs	r3, r3
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800424c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004250:	4641      	mov	r1, r8
 8004252:	eb12 0a01 	adds.w	sl, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb43 0b01 	adc.w	fp, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800426c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004270:	4692      	mov	sl, r2
 8004272:	469b      	mov	fp, r3
 8004274:	4643      	mov	r3, r8
 8004276:	eb1a 0303 	adds.w	r3, sl, r3
 800427a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800427e:	464b      	mov	r3, r9
 8004280:	eb4b 0303 	adc.w	r3, fp, r3
 8004284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800429c:	460b      	mov	r3, r1
 800429e:	18db      	adds	r3, r3, r3
 80042a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042a2:	4613      	mov	r3, r2
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042b2:	f7fb ffed 	bl	8000290 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <UART_SetConfig+0x2d4>)
 80042be:	fba3 2301 	umull	r2, r3, r3, r1
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2264      	movs	r2, #100	@ 0x64
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	1acb      	subs	r3, r1, r3
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042d2:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <UART_SetConfig+0x2d4>)
 80042d4:	fba3 2302 	umull	r2, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042e0:	441c      	add	r4, r3
 80042e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042fc:	415b      	adcs	r3, r3
 80042fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004304:	4641      	mov	r1, r8
 8004306:	1851      	adds	r1, r2, r1
 8004308:	6339      	str	r1, [r7, #48]	@ 0x30
 800430a:	4649      	mov	r1, r9
 800430c:	414b      	adcs	r3, r1
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800431c:	4659      	mov	r1, fp
 800431e:	00cb      	lsls	r3, r1, #3
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004326:	4651      	mov	r1, sl
 8004328:	00ca      	lsls	r2, r1, #3
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4603      	mov	r3, r0
 8004330:	4642      	mov	r2, r8
 8004332:	189b      	adds	r3, r3, r2
 8004334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004338:	464b      	mov	r3, r9
 800433a:	460a      	mov	r2, r1
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004350:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004358:	460b      	mov	r3, r1
 800435a:	18db      	adds	r3, r3, r3
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800435e:	4613      	mov	r3, r2
 8004360:	eb42 0303 	adc.w	r3, r2, r3
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800436a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800436e:	f7fb ff8f 	bl	8000290 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <UART_SetConfig+0x2d4>)
 8004378:	fba3 1302 	umull	r1, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2164      	movs	r1, #100	@ 0x64
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3332      	adds	r3, #50	@ 0x32
 800438a:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <UART_SetConfig+0x2d4>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4422      	add	r2, r4
 800439e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a0:	e106      	b.n	80045b0 <UART_SetConfig+0x4d8>
 80043a2:	bf00      	nop
 80043a4:	40011000 	.word	0x40011000
 80043a8:	40011400 	.word	0x40011400
 80043ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043c2:	4642      	mov	r2, r8
 80043c4:	464b      	mov	r3, r9
 80043c6:	1891      	adds	r1, r2, r2
 80043c8:	6239      	str	r1, [r7, #32]
 80043ca:	415b      	adcs	r3, r3
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d2:	4641      	mov	r1, r8
 80043d4:	1854      	adds	r4, r2, r1
 80043d6:	4649      	mov	r1, r9
 80043d8:	eb43 0501 	adc.w	r5, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	00eb      	lsls	r3, r5, #3
 80043e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ea:	00e2      	lsls	r2, r4, #3
 80043ec:	4614      	mov	r4, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	4643      	mov	r3, r8
 80043f2:	18e3      	adds	r3, r4, r3
 80043f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043f8:	464b      	mov	r3, r9
 80043fa:	eb45 0303 	adc.w	r3, r5, r3
 80043fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800440e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800441e:	4629      	mov	r1, r5
 8004420:	008b      	lsls	r3, r1, #2
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004428:	4621      	mov	r1, r4
 800442a:	008a      	lsls	r2, r1, #2
 800442c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004430:	f7fb ff2e 	bl	8000290 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4b60      	ldr	r3, [pc, #384]	@ (80045bc <UART_SetConfig+0x4e4>)
 800443a:	fba3 2302 	umull	r2, r3, r3, r2
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	011c      	lsls	r4, r3, #4
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800444c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	1891      	adds	r1, r2, r2
 800445a:	61b9      	str	r1, [r7, #24]
 800445c:	415b      	adcs	r3, r3
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004464:	4641      	mov	r1, r8
 8004466:	1851      	adds	r1, r2, r1
 8004468:	6139      	str	r1, [r7, #16]
 800446a:	4649      	mov	r1, r9
 800446c:	414b      	adcs	r3, r1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800447c:	4659      	mov	r1, fp
 800447e:	00cb      	lsls	r3, r1, #3
 8004480:	4651      	mov	r1, sl
 8004482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004486:	4651      	mov	r1, sl
 8004488:	00ca      	lsls	r2, r1, #3
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	4603      	mov	r3, r0
 8004490:	4642      	mov	r2, r8
 8004492:	189b      	adds	r3, r3, r2
 8004494:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004498:	464b      	mov	r3, r9
 800449a:	460a      	mov	r2, r1
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044bc:	4649      	mov	r1, r9
 80044be:	008b      	lsls	r3, r1, #2
 80044c0:	4641      	mov	r1, r8
 80044c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c6:	4641      	mov	r1, r8
 80044c8:	008a      	lsls	r2, r1, #2
 80044ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ce:	f7fb fedf 	bl	8000290 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	4b38      	ldr	r3, [pc, #224]	@ (80045bc <UART_SetConfig+0x4e4>)
 80044da:	fba3 2301 	umull	r2, r3, r3, r1
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2264      	movs	r2, #100	@ 0x64
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	3332      	adds	r3, #50	@ 0x32
 80044ec:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <UART_SetConfig+0x4e4>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044f8:	441c      	add	r4, r3
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	673b      	str	r3, [r7, #112]	@ 0x70
 8004502:	677a      	str	r2, [r7, #116]	@ 0x74
 8004504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	415b      	adcs	r3, r3
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004518:	4641      	mov	r1, r8
 800451a:	1851      	adds	r1, r2, r1
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	4649      	mov	r1, r9
 8004520:	414b      	adcs	r3, r1
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004530:	4659      	mov	r1, fp
 8004532:	00cb      	lsls	r3, r1, #3
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453a:	4651      	mov	r1, sl
 800453c:	00ca      	lsls	r2, r1, #3
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4603      	mov	r3, r0
 8004544:	4642      	mov	r2, r8
 8004546:	189b      	adds	r3, r3, r2
 8004548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800454a:	464b      	mov	r3, r9
 800454c:	460a      	mov	r2, r1
 800454e:	eb42 0303 	adc.w	r3, r2, r3
 8004552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	663b      	str	r3, [r7, #96]	@ 0x60
 800455e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800456c:	4649      	mov	r1, r9
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	4641      	mov	r1, r8
 8004572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004576:	4641      	mov	r1, r8
 8004578:	008a      	lsls	r2, r1, #2
 800457a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800457e:	f7fb fe87 	bl	8000290 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <UART_SetConfig+0x4e4>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	2164      	movs	r1, #100	@ 0x64
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	3332      	adds	r3, #50	@ 0x32
 800459a:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <UART_SetConfig+0x4e4>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4422      	add	r2, r4
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	bf00      	nop
 80045b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045bc:	51eb851f 	.word	0x51eb851f

080045c0 <__NVIC_SetPriority>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0a      	blt.n	80045ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	490c      	ldr	r1, [pc, #48]	@ (800460c <__NVIC_SetPriority+0x4c>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	440b      	add	r3, r1
 80045e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045e8:	e00a      	b.n	8004600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4908      	ldr	r1, [pc, #32]	@ (8004610 <__NVIC_SetPriority+0x50>)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3b04      	subs	r3, #4
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	440b      	add	r3, r1
 80045fe:	761a      	strb	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000e100 	.word	0xe000e100
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <SysTick_Handler+0x1c>)
 800461a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800461c:	f001 ff06 	bl	800642c <xTaskGetSchedulerState>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d001      	beq.n	800462a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004626:	f002 fcff 	bl	8007028 <xPortSysTickHandler>
  }
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010

08004634 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004638:	2100      	movs	r1, #0
 800463a:	f06f 0004 	mvn.w	r0, #4
 800463e:	f7ff ffbf 	bl	80045c0 <__NVIC_SetPriority>
#endif
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	603b      	str	r3, [r7, #0]
  return(result);
 8004654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800465a:	f06f 0305 	mvn.w	r3, #5
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	e00c      	b.n	800467c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004662:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <osKernelInitialize+0x44>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800466a:	4b08      	ldr	r3, [pc, #32]	@ (800468c <osKernelInitialize+0x44>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004670:	2300      	movs	r3, #0
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	e002      	b.n	800467c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200002d4 	.word	0x200002d4

08004690 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004696:	f3ef 8305 	mrs	r3, IPSR
 800469a:	603b      	str	r3, [r7, #0]
  return(result);
 800469c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80046a2:	f06f 0305 	mvn.w	r3, #5
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e010      	b.n	80046cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <osKernelStart+0x48>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d109      	bne.n	80046c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046b2:	f7ff ffbf 	bl	8004634 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046b6:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <osKernelStart+0x48>)
 80046b8:	2202      	movs	r2, #2
 80046ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046bc:	f001 fa68 	bl	8005b90 <vTaskStartScheduler>
      stat = osOK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	e002      	b.n	80046cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046cc:	687b      	ldr	r3, [r7, #4]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	200002d4 	.word	0x200002d4

080046dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	@ 0x38
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ec:	f3ef 8305 	mrs	r3, IPSR
 80046f0:	617b      	str	r3, [r7, #20]
  return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d17e      	bne.n	80047f6 <osThreadNew+0x11a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d07b      	beq.n	80047f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004702:	2318      	movs	r3, #24
 8004704:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d045      	beq.n	80047a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <osThreadNew+0x48>
        name = attr->name;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <osThreadNew+0x6e>
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b38      	cmp	r3, #56	@ 0x38
 800473c:	d805      	bhi.n	800474a <osThreadNew+0x6e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <osThreadNew+0x72>
        return (NULL);
 800474a:	2300      	movs	r3, #0
 800474c:	e054      	b.n	80047f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <osThreadNew+0xa8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b5b      	cmp	r3, #91	@ 0x5b
 800476c:	d90a      	bls.n	8004784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osThreadNew+0xa8>
        mem = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e010      	b.n	80047a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <osThreadNew+0xca>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <osThreadNew+0xca>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <osThreadNew+0xca>
          mem = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e001      	b.n	80047a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d110      	bne.n	80047ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b4:	9202      	str	r2, [sp, #8]
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f001 f808 	bl	80057d8 <xTaskCreateStatic>
 80047c8:	4603      	mov	r3, r0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e013      	b.n	80047f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f107 0310 	add.w	r3, r7, #16
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f001 f856 	bl	8005898 <xTaskCreate>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <osThreadNew+0x11a>
            hTask = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047f6:	693b      	ldr	r3, [r7, #16]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	@ 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004808:	f3ef 8305 	mrs	r3, IPSR
 800480c:	60bb      	str	r3, [r7, #8]
  return(result);
 800480e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <osDelay+0x1c>
    stat = osErrorISR;
 8004814:	f06f 0305 	mvn.w	r3, #5
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e007      	b.n	800482c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 f97c 	bl	8005b24 <vTaskDelay>
    }
  }

  return (stat);
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004836:	b580      	push	{r7, lr}
 8004838:	b08a      	sub	sp, #40	@ 0x28
 800483a:	af02      	add	r7, sp, #8
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004846:	f3ef 8305 	mrs	r3, IPSR
 800484a:	613b      	str	r3, [r7, #16]
  return(result);
 800484c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800484e:	2b00      	cmp	r3, #0
 8004850:	d15f      	bne.n	8004912 <osMessageQueueNew+0xdc>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05c      	beq.n	8004912 <osMessageQueueNew+0xdc>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d059      	beq.n	8004912 <osMessageQueueNew+0xdc>
    mem = -1;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295
 8004862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d029      	beq.n	80048be <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d012      	beq.n	8004898 <osMessageQueueNew+0x62>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b4f      	cmp	r3, #79	@ 0x4f
 8004878:	d90e      	bls.n	8004898 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <osMessageQueueNew+0x62>
        mem = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e014      	b.n	80048c2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d110      	bne.n	80048c2 <osMessageQueueNew+0x8c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10c      	bne.n	80048c2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d108      	bne.n	80048c2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <osMessageQueueNew+0x8c>
          mem = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e001      	b.n	80048c2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10b      	bne.n	80048e0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2100      	movs	r1, #0
 80048d2:	9100      	str	r1, [sp, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa30 	bl	8004d3c <xQueueGenericCreateStatic>
 80048dc:	61f8      	str	r0, [r7, #28]
 80048de:	e008      	b.n	80048f2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d105      	bne.n	80048f2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80048e6:	2200      	movs	r2, #0
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 faa3 	bl	8004e36 <xQueueGenericCreate>
 80048f0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00c      	beq.n	8004912 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <osMessageQueueNew+0xd0>
        name = attr->name;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e001      	b.n	800490a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	69f8      	ldr	r0, [r7, #28]
 800490e:	f000 ff05 	bl	800571c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004912:	69fb      	ldr	r3, [r7, #28]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004934:	f3ef 8305 	mrs	r3, IPSR
 8004938:	617b      	str	r3, [r7, #20]
  return(result);
 800493a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800493c:	2b00      	cmp	r3, #0
 800493e:	d028      	beq.n	8004992 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <osMessageQueuePut+0x36>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <osMessageQueuePut+0x36>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004952:	f06f 0303 	mvn.w	r3, #3
 8004956:	61fb      	str	r3, [r7, #28]
 8004958:	e038      	b.n	80049cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800495e:	f107 0210 	add.w	r2, r7, #16
 8004962:	2300      	movs	r3, #0
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	69b8      	ldr	r0, [r7, #24]
 8004968:	f000 fbc6 	bl	80050f8 <xQueueGenericSendFromISR>
 800496c:	4603      	mov	r3, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	d003      	beq.n	800497a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004972:	f06f 0302 	mvn.w	r3, #2
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	e028      	b.n	80049cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d025      	beq.n	80049cc <osMessageQueuePut+0xb0>
 8004980:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <osMessageQueuePut+0xbc>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	e01c      	b.n	80049cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <osMessageQueuePut+0x82>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800499e:	f06f 0303 	mvn.w	r3, #3
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e012      	b.n	80049cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049a6:	2300      	movs	r3, #0
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	69b8      	ldr	r0, [r7, #24]
 80049ae:	f000 faa1 	bl	8004ef4 <xQueueGenericSend>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d009      	beq.n	80049cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80049be:	f06f 0301 	mvn.w	r3, #1
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e002      	b.n	80049cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80049c6:	f06f 0302 	mvn.w	r3, #2
 80049ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049cc:	69fb      	ldr	r3, [r7, #28]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f2:	f3ef 8305 	mrs	r3, IPSR
 80049f6:	617b      	str	r3, [r7, #20]
  return(result);
 80049f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d028      	beq.n	8004a50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <osMessageQueueGet+0x34>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <osMessageQueueGet+0x34>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004a10:	f06f 0303 	mvn.w	r3, #3
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	e037      	b.n	8004a88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004a1c:	f107 0310 	add.w	r3, r7, #16
 8004a20:	461a      	mov	r2, r3
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	69b8      	ldr	r0, [r7, #24]
 8004a26:	f000 fce7 	bl	80053f8 <xQueueReceiveFromISR>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d003      	beq.n	8004a38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004a30:	f06f 0302 	mvn.w	r3, #2
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e027      	b.n	8004a88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d024      	beq.n	8004a88 <osMessageQueueGet+0xac>
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <osMessageQueueGet+0xb8>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	e01b      	b.n	8004a88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <osMessageQueueGet+0x80>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004a5c:	f06f 0303 	mvn.w	r3, #3
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e011      	b.n	8004a88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	69b8      	ldr	r0, [r7, #24]
 8004a6a:	f000 fbe3 	bl	8005234 <xQueueReceive>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d009      	beq.n	8004a88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004a7a:	f06f 0301 	mvn.w	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e002      	b.n	8004a88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004a82:	f06f 0302 	mvn.w	r3, #2
 8004a86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a88:	69fb      	ldr	r3, [r7, #28]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a07      	ldr	r2, [pc, #28]	@ (8004ac4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004aa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a06      	ldr	r2, [pc, #24]	@ (8004ac8 <vApplicationGetIdleTaskMemory+0x30>)
 8004aae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2280      	movs	r2, #128	@ 0x80
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	200002d8 	.word	0x200002d8
 8004ac8:	20000334 	.word	0x20000334

08004acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4a07      	ldr	r2, [pc, #28]	@ (8004af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a06      	ldr	r2, [pc, #24]	@ (8004afc <vApplicationGetTimerTaskMemory+0x30>)
 8004ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aea:	601a      	str	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000534 	.word	0x20000534
 8004afc:	20000590 	.word	0x20000590

08004b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f103 0208 	add.w	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f103 0208 	add.w	r2, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f103 0208 	add.w	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
}
 8004b96:	bf00      	nop
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d103      	bne.n	8004bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e00c      	b.n	8004bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e002      	b.n	8004bd0 <vListInsert+0x2e>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d2f6      	bcs.n	8004bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6852      	ldr	r2, [r2, #4]
 8004c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d103      	bne.n	8004c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	e7fd      	b.n	8004c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c94:	f002 f938 	bl	8006f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca0:	68f9      	ldr	r1, [r7, #12]
 8004ca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	441a      	add	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	22ff      	movs	r2, #255	@ 0xff
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	22ff      	movs	r2, #255	@ 0xff
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d114      	bne.n	8004d14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01a      	beq.n	8004d28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 f9d8 	bl	80060ac <xTaskRemoveFromEventList>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d012      	beq.n	8004d28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <xQueueGenericReset+0xd0>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	e009      	b.n	8004d28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3310      	adds	r3, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fef1 	bl	8004b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3324      	adds	r3, #36	@ 0x24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff feec 	bl	8004b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d28:	f002 f920 	bl	8006f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d2c:	2301      	movs	r3, #1
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	@ 0x38
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	e7fd      	b.n	8004d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <xQueueGenericCreateStatic+0x56>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <xQueueGenericCreateStatic+0x5a>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <xQueueGenericCreateStatic+0x5c>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	623b      	str	r3, [r7, #32]
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <xQueueGenericCreateStatic+0x84>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <xQueueGenericCreateStatic+0x88>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <xQueueGenericCreateStatic+0x8a>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	61fb      	str	r3, [r7, #28]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004de2:	2350      	movs	r3, #80	@ 0x50
 8004de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d00b      	beq.n	8004e04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	61bb      	str	r3, [r7, #24]
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f840 	bl	8004eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3730      	adds	r7, #48	@ 0x30
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b08a      	sub	sp, #40	@ 0x28
 8004e3a:	af02      	add	r7, sp, #8
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	613b      	str	r3, [r7, #16]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3350      	adds	r3, #80	@ 0x50
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 f96b 	bl	800714c <pvPortMalloc>
 8004e76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d011      	beq.n	8004ea2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	3350      	adds	r3, #80	@ 0x50
 8004e86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f805 	bl	8004eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eda:	2101      	movs	r1, #1
 8004edc:	69b8      	ldr	r0, [r7, #24]
 8004ede:	f7ff fec3 	bl	8004c68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08e      	sub	sp, #56	@ 0x38
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f02:	2300      	movs	r3, #0
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <xQueueGenericSend+0x34>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSend+0x42>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <xQueueGenericSend+0x46>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericSend+0x48>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <xQueueGenericSend+0x64>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d103      	bne.n	8004f66 <xQueueGenericSend+0x72>
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <xQueueGenericSend+0x76>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <xQueueGenericSend+0x78>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <xQueueGenericSend+0x94>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	623b      	str	r3, [r7, #32]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f88:	f001 fa50 	bl	800642c <xTaskGetSchedulerState>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d102      	bne.n	8004f98 <xQueueGenericSend+0xa4>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <xQueueGenericSend+0xa8>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <xQueueGenericSend+0xaa>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <xQueueGenericSend+0xc6>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	61fb      	str	r3, [r7, #28]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fba:	f001 ffa5 	bl	8006f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <xQueueGenericSend+0xdc>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d129      	bne.n	8005024 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fd6:	f000 fa91 	bl	80054fc <prvCopyDataToQueue>
 8004fda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	3324      	adds	r3, #36	@ 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f85f 	bl	80060ac <xTaskRemoveFromEventList>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <xQueueGenericSend+0x200>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	e00a      	b.n	800501c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800500c:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <xQueueGenericSend+0x200>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800501c:	f001 ffa6 	bl	8006f6c <vPortExitCritical>
				return pdPASS;
 8005020:	2301      	movs	r3, #1
 8005022:	e063      	b.n	80050ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800502a:	f001 ff9f 	bl	8006f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800502e:	2300      	movs	r3, #0
 8005030:	e05c      	b.n	80050ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f899 	bl	8006174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005046:	f001 ff91 	bl	8006f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800504a:	f000 fe09 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800504e:	f001 ff5b 	bl	8006f08 <vPortEnterCritical>
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005058:	b25b      	sxtb	r3, r3
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d103      	bne.n	8005068 <xQueueGenericSend+0x174>
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d103      	bne.n	800507e <xQueueGenericSend+0x18a>
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800507e:	f001 ff75 	bl	8006f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005082:	1d3a      	adds	r2, r7, #4
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f001 f888 	bl	80061a0 <xTaskCheckForTimeOut>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d124      	bne.n	80050e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005096:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005098:	f000 fb28 	bl	80056ec <prvIsQueueFull>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	3310      	adds	r3, #16
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ffac 	bl	8006008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b2:	f000 fab3 	bl	800561c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050b6:	f000 fde1 	bl	8005c7c <xTaskResumeAll>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af7c 	bne.w	8004fba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80050c2:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <xQueueGenericSend+0x200>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	e772      	b.n	8004fba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050d6:	f000 faa1 	bl	800561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050da:	f000 fdcf 	bl	8005c7c <xTaskResumeAll>
 80050de:	e76c      	b.n	8004fba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050e2:	f000 fa9b 	bl	800561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e6:	f000 fdc9 	bl	8005c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3738      	adds	r7, #56	@ 0x38
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	@ 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	e7fd      	b.n	8005124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <xQueueGenericSendFromISR+0x3e>
 800512e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <xQueueGenericSendFromISR+0x42>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <xQueueGenericSendFromISR+0x44>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	e7fd      	b.n	8005154 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d103      	bne.n	8005166 <xQueueGenericSendFromISR+0x6e>
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <xQueueGenericSendFromISR+0x72>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueGenericSendFromISR+0x74>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	623b      	str	r3, [r7, #32]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005188:	f001 ff9e 	bl	80070c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800518c:	f3ef 8211 	mrs	r2, BASEPRI
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	61fa      	str	r2, [r7, #28]
 80051a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <xQueueGenericSendFromISR+0xc2>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d12f      	bne.n	800521a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80051d0:	f000 f994 	bl	80054fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d112      	bne.n	8005204 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	3324      	adds	r3, #36	@ 0x24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ff5e 	bl	80060ac <xTaskRemoveFromEventList>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e007      	b.n	8005214 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005204:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005208:	3301      	adds	r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	b25a      	sxtb	r2, r3
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005214:	2301      	movs	r3, #1
 8005216:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005218:	e001      	b.n	800521e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800521a:	2300      	movs	r3, #0
 800521c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800521e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005220:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005228:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800522a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800522c:	4618      	mov	r0, r3
 800522e:	3740      	adds	r7, #64	@ 0x40
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	@ 0x30
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <xQueueReceive+0x32>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	623b      	str	r3, [r7, #32]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d103      	bne.n	8005274 <xQueueReceive+0x40>
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <xQueueReceive+0x44>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueReceive+0x46>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <xQueueReceive+0x62>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	61fb      	str	r3, [r7, #28]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005296:	f001 f8c9 	bl	800642c <xTaskGetSchedulerState>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <xQueueReceive+0x72>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <xQueueReceive+0x76>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <xQueueReceive+0x78>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <xQueueReceive+0x94>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	61bb      	str	r3, [r7, #24]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052c8:	f001 fe1e 	bl	8006f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01f      	beq.n	8005318 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052dc:	f000 f978 	bl	80055d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00f      	beq.n	8005310 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	3310      	adds	r3, #16
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fed9 	bl	80060ac <xTaskRemoveFromEventList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005300:	4b3c      	ldr	r3, [pc, #240]	@ (80053f4 <xQueueReceive+0x1c0>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005310:	f001 fe2c 	bl	8006f6c <vPortExitCritical>
				return pdPASS;
 8005314:	2301      	movs	r3, #1
 8005316:	e069      	b.n	80053ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800531e:	f001 fe25 	bl	8006f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005322:	2300      	movs	r3, #0
 8005324:	e062      	b.n	80053ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800532c:	f107 0310 	add.w	r3, r7, #16
 8005330:	4618      	mov	r0, r3
 8005332:	f000 ff1f 	bl	8006174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800533a:	f001 fe17 	bl	8006f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800533e:	f000 fc8f 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005342:	f001 fde1 	bl	8006f08 <vPortEnterCritical>
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800534c:	b25b      	sxtb	r3, r3
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d103      	bne.n	800535c <xQueueReceive+0x128>
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005362:	b25b      	sxtb	r3, r3
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d103      	bne.n	8005372 <xQueueReceive+0x13e>
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005372:	f001 fdfb 	bl	8006f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005376:	1d3a      	adds	r2, r7, #4
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f000 ff0e 	bl	80061a0 <xTaskCheckForTimeOut>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d123      	bne.n	80053d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800538a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800538c:	f000 f998 	bl	80056c0 <prvIsQueueEmpty>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d017      	beq.n	80053c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	3324      	adds	r3, #36	@ 0x24
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fe32 	bl	8006008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a6:	f000 f939 	bl	800561c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053aa:	f000 fc67 	bl	8005c7c <xTaskResumeAll>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d189      	bne.n	80052c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80053b4:	4b0f      	ldr	r3, [pc, #60]	@ (80053f4 <xQueueReceive+0x1c0>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	e780      	b.n	80052c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c8:	f000 f928 	bl	800561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053cc:	f000 fc56 	bl	8005c7c <xTaskResumeAll>
 80053d0:	e77a      	b.n	80052c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d4:	f000 f922 	bl	800561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053d8:	f000 fc50 	bl	8005c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053de:	f000 f96f 	bl	80056c0 <prvIsQueueEmpty>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f43f af6f 	beq.w	80052c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3730      	adds	r7, #48	@ 0x30
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08e      	sub	sp, #56	@ 0x38
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	623b      	str	r3, [r7, #32]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d103      	bne.n	8005434 <xQueueReceiveFromISR+0x3c>
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <xQueueReceiveFromISR+0x40>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <xQueueReceiveFromISR+0x42>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10b      	bne.n	8005456 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	61fb      	str	r3, [r7, #28]
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005456:	f001 fe37 	bl	80070c8 <vPortValidateInterruptPriority>
	__asm volatile
 800545a:	f3ef 8211 	mrs	r2, BASEPRI
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	61ba      	str	r2, [r7, #24]
 8005470:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005472:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02f      	beq.n	80054e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005490:	f000 f89e 	bl	80055d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	1e5a      	subs	r2, r3, #1
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800549c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d112      	bne.n	80054cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	3310      	adds	r3, #16
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fdfa 	bl	80060ac <xTaskRemoveFromEventList>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e007      	b.n	80054dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054d0:	3301      	adds	r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	b25a      	sxtb	r2, r3
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80054dc:	2301      	movs	r3, #1
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e0:	e001      	b.n	80054e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f383 8811 	msr	BASEPRI, r3
}
 80054f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3738      	adds	r7, #56	@ 0x38
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10d      	bne.n	8005536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d14d      	bne.n	80055be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 ff9e 	bl	8006468 <xTaskPriorityDisinherit>
 800552c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	e043      	b.n	80055be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d119      	bne.n	8005570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6858      	ldr	r0, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	f002 f858 	bl	80075fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	441a      	add	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d32b      	bcc.n	80055be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	e026      	b.n	80055be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68d8      	ldr	r0, [r3, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	461a      	mov	r2, r3
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	f002 f83e 	bl	80075fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	425b      	negs	r3, r3
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d207      	bcs.n	80055ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	425b      	negs	r3, r3
 80055a6:	441a      	add	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d105      	bne.n	80055be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80055c6:	697b      	ldr	r3, [r7, #20]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	441a      	add	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d303      	bcc.n	8005604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68d9      	ldr	r1, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	461a      	mov	r2, r3
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f001 fff4 	bl	80075fc <memcpy>
	}
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005624:	f001 fc70 	bl	8006f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800562e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005630:	e011      	b.n	8005656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	d012      	beq.n	8005660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3324      	adds	r3, #36	@ 0x24
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fd34 	bl	80060ac <xTaskRemoveFromEventList>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800564a:	f000 fe0d 	bl	8006268 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	3b01      	subs	r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	dce9      	bgt.n	8005632 <prvUnlockQueue+0x16>
 800565e:	e000      	b.n	8005662 <prvUnlockQueue+0x46>
					break;
 8005660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	22ff      	movs	r2, #255	@ 0xff
 8005666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800566a:	f001 fc7f 	bl	8006f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800566e:	f001 fc4b 	bl	8006f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800567a:	e011      	b.n	80056a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3310      	adds	r3, #16
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fd0f 	bl	80060ac <xTaskRemoveFromEventList>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005694:	f000 fde8 	bl	8006268 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005698:	7bbb      	ldrb	r3, [r7, #14]
 800569a:	3b01      	subs	r3, #1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dce9      	bgt.n	800567c <prvUnlockQueue+0x60>
 80056a8:	e000      	b.n	80056ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	22ff      	movs	r2, #255	@ 0xff
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80056b4:	f001 fc5a 	bl	8006f6c <vPortExitCritical>
}
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056c8:	f001 fc1e 	bl	8006f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e001      	b.n	80056de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056de:	f001 fc45 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056f4:	f001 fc08 	bl	8006f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005700:	429a      	cmp	r2, r3
 8005702:	d102      	bne.n	800570a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e001      	b.n	800570e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800570e:	f001 fc2d 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e014      	b.n	8005756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800572c:	4a0f      	ldr	r2, [pc, #60]	@ (800576c <vQueueAddToRegistry+0x50>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005738:	490c      	ldr	r1, [pc, #48]	@ (800576c <vQueueAddToRegistry+0x50>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005742:	4a0a      	ldr	r2, [pc, #40]	@ (800576c <vQueueAddToRegistry+0x50>)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800574e:	e006      	b.n	800575e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b07      	cmp	r3, #7
 800575a:	d9e7      	bls.n	800572c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000990 	.word	0x20000990

08005770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005780:	f001 fbc2 	bl	8006f08 <vPortEnterCritical>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800578a:	b25b      	sxtb	r3, r3
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d103      	bne.n	800579a <vQueueWaitForMessageRestricted+0x2a>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d103      	bne.n	80057b0 <vQueueWaitForMessageRestricted+0x40>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b0:	f001 fbdc 	bl	8006f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3324      	adds	r3, #36	@ 0x24
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fc45 	bl	8006054 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff ff26 	bl	800561c <prvUnlockQueue>
	}
 80057d0:	bf00      	nop
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08e      	sub	sp, #56	@ 0x38
 80057dc:	af04      	add	r7, sp, #16
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <xTaskCreateStatic+0x2c>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	623b      	str	r3, [r7, #32]
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <xTaskCreateStatic+0x4a>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	61fb      	str	r3, [r7, #28]
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	e7fd      	b.n	800581e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005822:	235c      	movs	r3, #92	@ 0x5c
 8005824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b5c      	cmp	r3, #92	@ 0x5c
 800582a:	d00b      	beq.n	8005844 <xTaskCreateStatic+0x6c>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	61bb      	str	r3, [r7, #24]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005844:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01e      	beq.n	800588a <xTaskCreateStatic+0xb2>
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01b      	beq.n	800588a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005864:	2300      	movs	r3, #0
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	9302      	str	r3, [sp, #8]
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f850 	bl	8005922 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005884:	f000 f8de 	bl	8005a44 <prvAddNewTaskToReadyList>
 8005888:	e001      	b.n	800588e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800588e:	697b      	ldr	r3, [r7, #20]
	}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	@ 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	@ 0x30
 800589c:	af04      	add	r7, sp, #16
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4613      	mov	r3, r2
 80058a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fc4d 	bl	800714c <pvPortMalloc>
 80058b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058ba:	205c      	movs	r0, #92	@ 0x5c
 80058bc:	f001 fc46 	bl	800714c <pvPortMalloc>
 80058c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80058ce:	e005      	b.n	80058dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f001 fd09 	bl	80072e8 <vPortFree>
 80058d6:	e001      	b.n	80058dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d017      	beq.n	8005912 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ea:	88fa      	ldrh	r2, [r7, #6]
 80058ec:	2300      	movs	r3, #0
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f80e 	bl	8005922 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005906:	69f8      	ldr	r0, [r7, #28]
 8005908:	f000 f89c 	bl	8005a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800590c:	2301      	movs	r3, #1
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e002      	b.n	8005918 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005918:	69bb      	ldr	r3, [r7, #24]
	}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b088      	sub	sp, #32
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	461a      	mov	r2, r3
 800593a:	21a5      	movs	r1, #165	@ 0xa5
 800593c:	f001 fe2a 	bl	8007594 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800594a:	3b01      	subs	r3, #1
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f023 0307 	bic.w	r3, r3, #7
 8005958:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	617b      	str	r3, [r7, #20]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01f      	beq.n	80059c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e012      	b.n	80059ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	7819      	ldrb	r1, [r3, #0]
 8005990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	3334      	adds	r3, #52	@ 0x34
 8005998:	460a      	mov	r2, r1
 800599a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b0f      	cmp	r3, #15
 80059b2:	d9e9      	bls.n	8005988 <prvInitialiseNewTask+0x66>
 80059b4:	e000      	b.n	80059b8 <prvInitialiseNewTask+0x96>
			{
				break;
 80059b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059c0:	e003      	b.n	80059ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	2b37      	cmp	r3, #55	@ 0x37
 80059ce:	d901      	bls.n	80059d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059d0:	2337      	movs	r3, #55	@ 0x37
 80059d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059de:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	2200      	movs	r2, #0
 80059e4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	3304      	adds	r3, #4
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f8a8 	bl	8004b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	3318      	adds	r3, #24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f8a3 	bl	8004b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	69b8      	ldr	r0, [r7, #24]
 8005a24:	f001 f93e 	bl	8006ca4 <pxPortInitialiseStack>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a3a:	bf00      	nop
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a4c:	f001 fa5c 	bl	8006f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a50:	4b2d      	ldr	r3, [pc, #180]	@ (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	4a2c      	ldr	r2, [pc, #176]	@ (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a62:	4a2a      	ldr	r2, [pc, #168]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a68:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d110      	bne.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a70:	f000 fc1e 	bl	80062b0 <prvInitialiseTaskLists>
 8005a74:	e00d      	b.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a76:	4b26      	ldr	r3, [pc, #152]	@ (8005b10 <prvAddNewTaskToReadyList+0xcc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a7e:	4b23      	ldr	r3, [pc, #140]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d802      	bhi.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a1e      	ldr	r2, [pc, #120]	@ (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <prvAddNewTaskToReadyList+0xd4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d903      	bls.n	8005ab8 <prvAddNewTaskToReadyList+0x74>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <prvAddNewTaskToReadyList+0xd4>)
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <prvAddNewTaskToReadyList+0xd8>)
 8005ac6:	441a      	add	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7ff f843 	bl	8004b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 fa4a 	bl	8006f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <prvAddNewTaskToReadyList+0xcc>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d207      	bcs.n	8005afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aee:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <prvAddNewTaskToReadyList+0xdc>)
 8005af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000ea4 	.word	0x20000ea4
 8005b0c:	200009d0 	.word	0x200009d0
 8005b10:	20000eb0 	.word	0x20000eb0
 8005b14:	20000ec0 	.word	0x20000ec0
 8005b18:	20000eac 	.word	0x20000eac
 8005b1c:	200009d4 	.word	0x200009d4
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d018      	beq.n	8005b68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <vTaskDelay+0x64>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <vTaskDelay+0x32>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60bb      	str	r3, [r7, #8]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b56:	f000 f883 	bl	8005c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fcf3 	bl	8006548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b62:	f000 f88b 	bl	8005c7c <xTaskResumeAll>
 8005b66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d107      	bne.n	8005b7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <vTaskDelay+0x68>)
 8005b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000ecc 	.word	0x20000ecc
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b9e:	463a      	mov	r2, r7
 8005ba0:	1d39      	adds	r1, r7, #4
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe ff76 	bl	8004a98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	9202      	str	r2, [sp, #8]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	460a      	mov	r2, r1
 8005bbe:	4922      	ldr	r1, [pc, #136]	@ (8005c48 <vTaskStartScheduler+0xb8>)
 8005bc0:	4822      	ldr	r0, [pc, #136]	@ (8005c4c <vTaskStartScheduler+0xbc>)
 8005bc2:	f7ff fe09 	bl	80057d8 <xTaskCreateStatic>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a21      	ldr	r2, [pc, #132]	@ (8005c50 <vTaskStartScheduler+0xc0>)
 8005bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bcc:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <vTaskStartScheduler+0xc0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e001      	b.n	8005bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d102      	bne.n	8005bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005be4:	f000 fd04 	bl	80065f0 <xTimerCreateTimerTask>
 8005be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d116      	bne.n	8005c1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c04:	4b13      	ldr	r3, [pc, #76]	@ (8005c54 <vTaskStartScheduler+0xc4>)
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c0c:	4b12      	ldr	r3, [pc, #72]	@ (8005c58 <vTaskStartScheduler+0xc8>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c12:	4b12      	ldr	r3, [pc, #72]	@ (8005c5c <vTaskStartScheduler+0xcc>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c18:	f001 f8d2 	bl	8006dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c1c:	e00f      	b.n	8005c3e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d10b      	bne.n	8005c3e <vTaskStartScheduler+0xae>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <vTaskStartScheduler+0xaa>
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08007f3c 	.word	0x08007f3c
 8005c4c:	08006281 	.word	0x08006281
 8005c50:	20000ec8 	.word	0x20000ec8
 8005c54:	20000ec4 	.word	0x20000ec4
 8005c58:	20000eb0 	.word	0x20000eb0
 8005c5c:	20000ea8 	.word	0x20000ea8

08005c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <vTaskSuspendAll+0x18>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	4a03      	ldr	r2, [pc, #12]	@ (8005c78 <vTaskSuspendAll+0x18>)
 8005c6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	20000ecc 	.word	0x20000ecc

08005c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c8a:	4b42      	ldr	r3, [pc, #264]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <xTaskResumeAll+0x2e>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	603b      	str	r3, [r7, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005caa:	f001 f92d 	bl	8006f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cae:	4b39      	ldr	r3, [pc, #228]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	4a37      	ldr	r2, [pc, #220]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb8:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d162      	bne.n	8005d86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cc0:	4b35      	ldr	r3, [pc, #212]	@ (8005d98 <xTaskResumeAll+0x11c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05e      	beq.n	8005d86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc8:	e02f      	b.n	8005d2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cca:	4b34      	ldr	r3, [pc, #208]	@ (8005d9c <xTaskResumeAll+0x120>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe ff9c 	bl	8004c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe ff97 	bl	8004c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cea:	4b2d      	ldr	r3, [pc, #180]	@ (8005da0 <xTaskResumeAll+0x124>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d903      	bls.n	8005cfa <xTaskResumeAll+0x7e>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8005da0 <xTaskResumeAll+0x124>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a27      	ldr	r2, [pc, #156]	@ (8005da4 <xTaskResumeAll+0x128>)
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7fe ff22 	bl	8004b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	4b23      	ldr	r3, [pc, #140]	@ (8005da8 <xTaskResumeAll+0x12c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005d24:	4b21      	ldr	r3, [pc, #132]	@ (8005dac <xTaskResumeAll+0x130>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d9c <xTaskResumeAll+0x120>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1cb      	bne.n	8005cca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d38:	f000 fb58 	bl	80063ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005db0 <xTaskResumeAll+0x134>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d48:	f000 f846 	bl	8005dd8 <xTaskIncrementTick>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005d52:	4b16      	ldr	r3, [pc, #88]	@ (8005dac <xTaskResumeAll+0x130>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f1      	bne.n	8005d48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005d64:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <xTaskResumeAll+0x134>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d6a:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <xTaskResumeAll+0x130>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d76:	4b0f      	ldr	r3, [pc, #60]	@ (8005db4 <xTaskResumeAll+0x138>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 f8f1 	bl	8006f6c <vPortExitCritical>

	return xAlreadyYielded;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000ecc 	.word	0x20000ecc
 8005d98:	20000ea4 	.word	0x20000ea4
 8005d9c:	20000e64 	.word	0x20000e64
 8005da0:	20000eac 	.word	0x20000eac
 8005da4:	200009d4 	.word	0x200009d4
 8005da8:	200009d0 	.word	0x200009d0
 8005dac:	20000eb8 	.word	0x20000eb8
 8005db0:	20000eb4 	.word	0x20000eb4
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dbe:	4b05      	ldr	r3, [pc, #20]	@ (8005dd4 <xTaskGetTickCount+0x1c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dc4:	687b      	ldr	r3, [r7, #4]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000ea8 	.word	0x20000ea8

08005dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f20 <xTaskIncrementTick+0x148>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8090 	bne.w	8005f0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dec:	4b4d      	ldr	r3, [pc, #308]	@ (8005f24 <xTaskIncrementTick+0x14c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005df4:	4a4b      	ldr	r2, [pc, #300]	@ (8005f24 <xTaskIncrementTick+0x14c>)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d121      	bne.n	8005e44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e00:	4b49      	ldr	r3, [pc, #292]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	603b      	str	r3, [r7, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <xTaskIncrementTick+0x46>
 8005e22:	4b41      	ldr	r3, [pc, #260]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	4b40      	ldr	r3, [pc, #256]	@ (8005f2c <xTaskIncrementTick+0x154>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a3e      	ldr	r2, [pc, #248]	@ (8005f2c <xTaskIncrementTick+0x154>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b3e      	ldr	r3, [pc, #248]	@ (8005f30 <xTaskIncrementTick+0x158>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <xTaskIncrementTick+0x158>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	f000 fad4 	bl	80063ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e44:	4b3b      	ldr	r3, [pc, #236]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d349      	bcc.n	8005ee2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4e:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	4b36      	ldr	r3, [pc, #216]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	601a      	str	r2, [r3, #0]
					break;
 8005e60:	e03f      	b.n	8005ee2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d203      	bcs.n	8005e82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e80:	e02f      	b.n	8005ee2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fec4 	bl	8004c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe febb 	bl	8004c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea2:	4b25      	ldr	r3, [pc, #148]	@ (8005f38 <xTaskIncrementTick+0x160>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d903      	bls.n	8005eb2 <xTaskIncrementTick+0xda>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	4a22      	ldr	r2, [pc, #136]	@ (8005f38 <xTaskIncrementTick+0x160>)
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f3c <xTaskIncrementTick+0x164>)
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7fe fe46 	bl	8004b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <xTaskIncrementTick+0x168>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3b8      	bcc.n	8005e4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee0:	e7b5      	b.n	8005e4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee2:	4b17      	ldr	r3, [pc, #92]	@ (8005f40 <xTaskIncrementTick+0x168>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee8:	4914      	ldr	r1, [pc, #80]	@ (8005f3c <xTaskIncrementTick+0x164>)
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d901      	bls.n	8005efe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <xTaskIncrementTick+0x16c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e004      	b.n	8005f16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <xTaskIncrementTick+0x170>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	4a0d      	ldr	r2, [pc, #52]	@ (8005f48 <xTaskIncrementTick+0x170>)
 8005f14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f16:	697b      	ldr	r3, [r7, #20]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000ecc 	.word	0x20000ecc
 8005f24:	20000ea8 	.word	0x20000ea8
 8005f28:	20000e5c 	.word	0x20000e5c
 8005f2c:	20000e60 	.word	0x20000e60
 8005f30:	20000ebc 	.word	0x20000ebc
 8005f34:	20000ec4 	.word	0x20000ec4
 8005f38:	20000eac 	.word	0x20000eac
 8005f3c:	200009d4 	.word	0x200009d4
 8005f40:	200009d0 	.word	0x200009d0
 8005f44:	20000eb8 	.word	0x20000eb8
 8005f48:	20000eb4 	.word	0x20000eb4

08005f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f52:	4b28      	ldr	r3, [pc, #160]	@ (8005ff4 <vTaskSwitchContext+0xa8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5a:	4b27      	ldr	r3, [pc, #156]	@ (8005ff8 <vTaskSwitchContext+0xac>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f60:	e042      	b.n	8005fe8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005f62:	4b25      	ldr	r3, [pc, #148]	@ (8005ff8 <vTaskSwitchContext+0xac>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <vTaskSwitchContext+0xb0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e011      	b.n	8005f94 <vTaskSwitchContext+0x48>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <vTaskSwitchContext+0x42>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	607b      	str	r3, [r7, #4]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <vTaskSwitchContext+0x3e>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	491a      	ldr	r1, [pc, #104]	@ (8006000 <vTaskSwitchContext+0xb4>)
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0e3      	beq.n	8005f70 <vTaskSwitchContext+0x24>
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a13      	ldr	r2, [pc, #76]	@ (8006000 <vTaskSwitchContext+0xb4>)
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d104      	bne.n	8005fd8 <vTaskSwitchContext+0x8c>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	4a09      	ldr	r2, [pc, #36]	@ (8006004 <vTaskSwitchContext+0xb8>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4a06      	ldr	r2, [pc, #24]	@ (8005ffc <vTaskSwitchContext+0xb0>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000ecc 	.word	0x20000ecc
 8005ff8:	20000eb8 	.word	0x20000eb8
 8005ffc:	20000eac 	.word	0x20000eac
 8006000:	200009d4 	.word	0x200009d4
 8006004:	200009d0 	.word	0x200009d0

08006008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006030:	4b07      	ldr	r3, [pc, #28]	@ (8006050 <vTaskPlaceOnEventList+0x48>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3318      	adds	r3, #24
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fe fdb2 	bl	8004ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800603e:	2101      	movs	r1, #1
 8006040:	6838      	ldr	r0, [r7, #0]
 8006042:	f000 fa81 	bl	8006548 <prvAddCurrentTaskToDelayedList>
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200009d0 	.word	0x200009d0

08006054 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	617b      	str	r3, [r7, #20]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800607e:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3318      	adds	r3, #24
 8006084:	4619      	mov	r1, r3
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7fe fd67 	bl	8004b5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68b8      	ldr	r0, [r7, #8]
 800609c:	f000 fa54 	bl	8006548 <prvAddCurrentTaskToDelayedList>
	}
 80060a0:	bf00      	nop
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200009d0 	.word	0x200009d0

080060ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60fb      	str	r3, [r7, #12]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3318      	adds	r3, #24
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fd98 	bl	8004c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e4:	4b1d      	ldr	r3, [pc, #116]	@ (800615c <xTaskRemoveFromEventList+0xb0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11d      	bne.n	8006128 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fd8f 	bl	8004c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <xTaskRemoveFromEventList+0xb4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d903      	bls.n	800610a <xTaskRemoveFromEventList+0x5e>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <xTaskRemoveFromEventList+0xb4>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4a13      	ldr	r2, [pc, #76]	@ (8006164 <xTaskRemoveFromEventList+0xb8>)
 8006118:	441a      	add	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fe fd1a 	bl	8004b5a <vListInsertEnd>
 8006126:	e005      	b.n	8006134 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3318      	adds	r3, #24
 800612c:	4619      	mov	r1, r3
 800612e:	480e      	ldr	r0, [pc, #56]	@ (8006168 <xTaskRemoveFromEventList+0xbc>)
 8006130:	f7fe fd13 	bl	8004b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006138:	4b0c      	ldr	r3, [pc, #48]	@ (800616c <xTaskRemoveFromEventList+0xc0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	429a      	cmp	r2, r3
 8006140:	d905      	bls.n	800614e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006146:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <xTaskRemoveFromEventList+0xc4>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e001      	b.n	8006152 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006152:	697b      	ldr	r3, [r7, #20]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20000ecc 	.word	0x20000ecc
 8006160:	20000eac 	.word	0x20000eac
 8006164:	200009d4 	.word	0x200009d4
 8006168:	20000e64 	.word	0x20000e64
 800616c:	200009d0 	.word	0x200009d0
 8006170:	20000eb8 	.word	0x20000eb8

08006174 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800617c:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <vTaskInternalSetTimeOutState+0x24>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <vTaskInternalSetTimeOutState+0x28>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000ebc 	.word	0x20000ebc
 800619c:	20000ea8 	.word	0x20000ea8

080061a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10b      	bne.n	80061c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60fb      	str	r3, [r7, #12]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061e6:	f000 fe8f 	bl	8006f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006260 <xTaskCheckForTimeOut+0xc0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d102      	bne.n	800620a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e023      	b.n	8006252 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4b15      	ldr	r3, [pc, #84]	@ (8006264 <xTaskCheckForTimeOut+0xc4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d007      	beq.n	8006226 <xTaskCheckForTimeOut+0x86>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e015      	b.n	8006252 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	429a      	cmp	r2, r3
 800622e:	d20b      	bcs.n	8006248 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ff99 	bl	8006174 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	e004      	b.n	8006252 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800624e:	2301      	movs	r3, #1
 8006250:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006252:	f000 fe8b 	bl	8006f6c <vPortExitCritical>

	return xReturn;
 8006256:	69fb      	ldr	r3, [r7, #28]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000ea8 	.word	0x20000ea8
 8006264:	20000ebc 	.word	0x20000ebc

08006268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800626c:	4b03      	ldr	r3, [pc, #12]	@ (800627c <vTaskMissedYield+0x14>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]
}
 8006272:	bf00      	nop
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	20000eb8 	.word	0x20000eb8

08006280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006288:	f000 f852 	bl	8006330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800628c:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <prvIdleTask+0x28>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d9f9      	bls.n	8006288 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006294:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <prvIdleTask+0x2c>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062a4:	e7f0      	b.n	8006288 <prvIdleTask+0x8>
 80062a6:	bf00      	nop
 80062a8:	200009d4 	.word	0x200009d4
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062b6:	2300      	movs	r3, #0
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	e00c      	b.n	80062d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4a12      	ldr	r2, [pc, #72]	@ (8006310 <prvInitialiseTaskLists+0x60>)
 80062c8:	4413      	add	r3, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fc18 	bl	8004b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3301      	adds	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b37      	cmp	r3, #55	@ 0x37
 80062da:	d9ef      	bls.n	80062bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062dc:	480d      	ldr	r0, [pc, #52]	@ (8006314 <prvInitialiseTaskLists+0x64>)
 80062de:	f7fe fc0f 	bl	8004b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062e2:	480d      	ldr	r0, [pc, #52]	@ (8006318 <prvInitialiseTaskLists+0x68>)
 80062e4:	f7fe fc0c 	bl	8004b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062e8:	480c      	ldr	r0, [pc, #48]	@ (800631c <prvInitialiseTaskLists+0x6c>)
 80062ea:	f7fe fc09 	bl	8004b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062ee:	480c      	ldr	r0, [pc, #48]	@ (8006320 <prvInitialiseTaskLists+0x70>)
 80062f0:	f7fe fc06 	bl	8004b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062f4:	480b      	ldr	r0, [pc, #44]	@ (8006324 <prvInitialiseTaskLists+0x74>)
 80062f6:	f7fe fc03 	bl	8004b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <prvInitialiseTaskLists+0x78>)
 80062fc:	4a05      	ldr	r2, [pc, #20]	@ (8006314 <prvInitialiseTaskLists+0x64>)
 80062fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006300:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <prvInitialiseTaskLists+0x7c>)
 8006302:	4a05      	ldr	r2, [pc, #20]	@ (8006318 <prvInitialiseTaskLists+0x68>)
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200009d4 	.word	0x200009d4
 8006314:	20000e34 	.word	0x20000e34
 8006318:	20000e48 	.word	0x20000e48
 800631c:	20000e64 	.word	0x20000e64
 8006320:	20000e78 	.word	0x20000e78
 8006324:	20000e90 	.word	0x20000e90
 8006328:	20000e5c 	.word	0x20000e5c
 800632c:	20000e60 	.word	0x20000e60

08006330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006336:	e019      	b.n	800636c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006338:	f000 fde6 	bl	8006f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800633c:	4b10      	ldr	r3, [pc, #64]	@ (8006380 <prvCheckTasksWaitingTermination+0x50>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fc63 	bl	8004c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800634e:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <prvCheckTasksWaitingTermination+0x54>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3b01      	subs	r3, #1
 8006354:	4a0b      	ldr	r2, [pc, #44]	@ (8006384 <prvCheckTasksWaitingTermination+0x54>)
 8006356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006358:	4b0b      	ldr	r3, [pc, #44]	@ (8006388 <prvCheckTasksWaitingTermination+0x58>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3b01      	subs	r3, #1
 800635e:	4a0a      	ldr	r2, [pc, #40]	@ (8006388 <prvCheckTasksWaitingTermination+0x58>)
 8006360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006362:	f000 fe03 	bl	8006f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f810 	bl	800638c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <prvCheckTasksWaitingTermination+0x58>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e1      	bne.n	8006338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000e78 	.word	0x20000e78
 8006384:	20000ea4 	.word	0x20000ea4
 8006388:	20000e8c 	.word	0x20000e8c

0800638c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800639a:	2b00      	cmp	r3, #0
 800639c:	d108      	bne.n	80063b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 ffa0 	bl	80072e8 <vPortFree>
				vPortFree( pxTCB );
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ff9d 	bl	80072e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ae:	e019      	b.n	80063e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d103      	bne.n	80063c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 ff94 	bl	80072e8 <vPortFree>
	}
 80063c0:	e010      	b.n	80063e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d00b      	beq.n	80063e4 <prvDeleteTCB+0x58>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60fb      	str	r3, [r7, #12]
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <prvDeleteTCB+0x54>
	}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <prvResetNextTaskUnblockTime+0x38>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006428 <prvResetNextTaskUnblockTime+0x3c>)
 80063fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006402:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006404:	e008      	b.n	8006418 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006406:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <prvResetNextTaskUnblockTime+0x38>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a04      	ldr	r2, [pc, #16]	@ (8006428 <prvResetNextTaskUnblockTime+0x3c>)
 8006416:	6013      	str	r3, [r2, #0]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	20000e5c 	.word	0x20000e5c
 8006428:	20000ec4 	.word	0x20000ec4

0800642c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006432:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <xTaskGetSchedulerState+0x34>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800643a:	2301      	movs	r3, #1
 800643c:	607b      	str	r3, [r7, #4]
 800643e:	e008      	b.n	8006452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006440:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <xTaskGetSchedulerState+0x38>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006448:	2302      	movs	r3, #2
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	e001      	b.n	8006452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800644e:	2300      	movs	r3, #0
 8006450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006452:	687b      	ldr	r3, [r7, #4]
	}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	20000eb0 	.word	0x20000eb0
 8006464:	20000ecc 	.word	0x20000ecc

08006468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d058      	beq.n	8006530 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800647e:	4b2f      	ldr	r3, [pc, #188]	@ (800653c <xTaskPriorityDisinherit+0xd4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	429a      	cmp	r2, r3
 8006486:	d00b      	beq.n	80064a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10b      	bne.n	80064c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	60bb      	str	r3, [r7, #8]
}
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c4:	1e5a      	subs	r2, r3, #1
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d02c      	beq.n	8006530 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d128      	bne.n	8006530 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fb96 	bl	8004c14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006500:	4b0f      	ldr	r3, [pc, #60]	@ (8006540 <xTaskPriorityDisinherit+0xd8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d903      	bls.n	8006510 <xTaskPriorityDisinherit+0xa8>
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <xTaskPriorityDisinherit+0xd8>)
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a09      	ldr	r2, [pc, #36]	@ (8006544 <xTaskPriorityDisinherit+0xdc>)
 800651e:	441a      	add	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe fb17 	bl	8004b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006530:	697b      	ldr	r3, [r7, #20]
	}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200009d0 	.word	0x200009d0
 8006540:	20000eac 	.word	0x20000eac
 8006544:	200009d4 	.word	0x200009d4

08006548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006552:	4b21      	ldr	r3, [pc, #132]	@ (80065d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006558:	4b20      	ldr	r3, [pc, #128]	@ (80065dc <prvAddCurrentTaskToDelayedList+0x94>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3304      	adds	r3, #4
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fb58 	bl	8004c14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656a:	d10a      	bne.n	8006582 <prvAddCurrentTaskToDelayedList+0x3a>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006572:	4b1a      	ldr	r3, [pc, #104]	@ (80065dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3304      	adds	r3, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4819      	ldr	r0, [pc, #100]	@ (80065e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800657c:	f7fe faed 	bl	8004b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006580:	e026      	b.n	80065d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4413      	add	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800658a:	4b14      	ldr	r3, [pc, #80]	@ (80065dc <prvAddCurrentTaskToDelayedList+0x94>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	429a      	cmp	r2, r3
 8006598:	d209      	bcs.n	80065ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b0f      	ldr	r3, [pc, #60]	@ (80065dc <prvAddCurrentTaskToDelayedList+0x94>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe fafb 	bl	8004ba2 <vListInsert>
}
 80065ac:	e010      	b.n	80065d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ae:	4b0e      	ldr	r3, [pc, #56]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <prvAddCurrentTaskToDelayedList+0x94>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f7fe faf1 	bl	8004ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065c0:	4b0a      	ldr	r3, [pc, #40]	@ (80065ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d202      	bcs.n	80065d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065ca:	4a08      	ldr	r2, [pc, #32]	@ (80065ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6013      	str	r3, [r2, #0]
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000ea8 	.word	0x20000ea8
 80065dc:	200009d0 	.word	0x200009d0
 80065e0:	20000e90 	.word	0x20000e90
 80065e4:	20000e60 	.word	0x20000e60
 80065e8:	20000e5c 	.word	0x20000e5c
 80065ec:	20000ec4 	.word	0x20000ec4

080065f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	@ 0x28
 80065f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065fa:	f000 fb13 	bl	8006c24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006674 <xTimerCreateTimerTask+0x84>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d021      	beq.n	800664a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800660e:	1d3a      	adds	r2, r7, #4
 8006610:	f107 0108 	add.w	r1, r7, #8
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe fa57 	bl	8004acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	9202      	str	r2, [sp, #8]
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	2302      	movs	r3, #2
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	2300      	movs	r3, #0
 800662e:	460a      	mov	r2, r1
 8006630:	4911      	ldr	r1, [pc, #68]	@ (8006678 <xTimerCreateTimerTask+0x88>)
 8006632:	4812      	ldr	r0, [pc, #72]	@ (800667c <xTimerCreateTimerTask+0x8c>)
 8006634:	f7ff f8d0 	bl	80057d8 <xTaskCreateStatic>
 8006638:	4603      	mov	r3, r0
 800663a:	4a11      	ldr	r2, [pc, #68]	@ (8006680 <xTimerCreateTimerTask+0x90>)
 800663c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800663e:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <xTimerCreateTimerTask+0x90>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006646:	2301      	movs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10b      	bne.n	8006668 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006668:	697b      	ldr	r3, [r7, #20]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000f00 	.word	0x20000f00
 8006678:	08007f44 	.word	0x08007f44
 800667c:	080067bd 	.word	0x080067bd
 8006680:	20000f04 	.word	0x20000f04

08006684 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	@ 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006692:	2300      	movs	r3, #0
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	623b      	str	r3, [r7, #32]
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066b4:	4b19      	ldr	r3, [pc, #100]	@ (800671c <xTimerGenericCommand+0x98>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d02a      	beq.n	8006712 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	dc18      	bgt.n	8006700 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066ce:	f7ff fead 	bl	800642c <xTaskGetSchedulerState>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d109      	bne.n	80066ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066d8:	4b10      	ldr	r3, [pc, #64]	@ (800671c <xTimerGenericCommand+0x98>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	f107 0110 	add.w	r1, r7, #16
 80066e0:	2300      	movs	r3, #0
 80066e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e4:	f7fe fc06 	bl	8004ef4 <xQueueGenericSend>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80066ea:	e012      	b.n	8006712 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066ec:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <xTimerGenericCommand+0x98>)
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	f107 0110 	add.w	r1, r7, #16
 80066f4:	2300      	movs	r3, #0
 80066f6:	2200      	movs	r2, #0
 80066f8:	f7fe fbfc 	bl	8004ef4 <xQueueGenericSend>
 80066fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80066fe:	e008      	b.n	8006712 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006700:	4b06      	ldr	r3, [pc, #24]	@ (800671c <xTimerGenericCommand+0x98>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	f107 0110 	add.w	r1, r7, #16
 8006708:	2300      	movs	r3, #0
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	f7fe fcf4 	bl	80050f8 <xQueueGenericSendFromISR>
 8006710:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006714:	4618      	mov	r0, r3
 8006716:	3728      	adds	r7, #40	@ 0x28
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000f00 	.word	0x20000f00

08006720 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af02      	add	r7, sp, #8
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672a:	4b23      	ldr	r3, [pc, #140]	@ (80067b8 <prvProcessExpiredTimer+0x98>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	3304      	adds	r3, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fa6b 	bl	8004c14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d023      	beq.n	8006794 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	18d1      	adds	r1, r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	6978      	ldr	r0, [r7, #20]
 800675a:	f000 f8d5 	bl	8006908 <prvInsertTimerInActiveList>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d020      	beq.n	80067a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006764:	2300      	movs	r3, #0
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	2100      	movs	r1, #0
 800676e:	6978      	ldr	r0, [r7, #20]
 8006770:	f7ff ff88 	bl	8006684 <xTimerGenericCommand>
 8006774:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d114      	bne.n	80067a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	60fb      	str	r3, [r7, #12]
}
 800678e:	bf00      	nop
 8006790:	bf00      	nop
 8006792:	e7fd      	b.n	8006790 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	6978      	ldr	r0, [r7, #20]
 80067ac:	4798      	blx	r3
}
 80067ae:	bf00      	nop
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000ef8 	.word	0x20000ef8

080067bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067c4:	f107 0308 	add.w	r3, r7, #8
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f859 	bl	8006880 <prvGetNextExpireTime>
 80067ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f805 	bl	80067e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067da:	f000 f8d7 	bl	800698c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067de:	bf00      	nop
 80067e0:	e7f0      	b.n	80067c4 <prvTimerTask+0x8>
	...

080067e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067ee:	f7ff fa37 	bl	8005c60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067f2:	f107 0308 	add.w	r3, r7, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f866 	bl	80068c8 <prvSampleTimeNow>
 80067fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d130      	bne.n	8006866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <prvProcessTimerOrBlockTask+0x3c>
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	429a      	cmp	r2, r3
 8006810:	d806      	bhi.n	8006820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006812:	f7ff fa33 	bl	8005c7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ff81 	bl	8006720 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800681e:	e024      	b.n	800686a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <prvProcessTimerOrBlockTask+0x90>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <prvProcessTimerOrBlockTask+0x50>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <prvProcessTimerOrBlockTask+0x52>
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006838:	4b0f      	ldr	r3, [pc, #60]	@ (8006878 <prvProcessTimerOrBlockTask+0x94>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	f7fe ff93 	bl	8005770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800684a:	f7ff fa17 	bl	8005c7c <xTaskResumeAll>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006854:	4b09      	ldr	r3, [pc, #36]	@ (800687c <prvProcessTimerOrBlockTask+0x98>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
}
 8006864:	e001      	b.n	800686a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006866:	f7ff fa09 	bl	8005c7c <xTaskResumeAll>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000efc 	.word	0x20000efc
 8006878:	20000f00 	.word	0x20000f00
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006888:	4b0e      	ldr	r3, [pc, #56]	@ (80068c4 <prvGetNextExpireTime+0x44>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <prvGetNextExpireTime+0x16>
 8006892:	2201      	movs	r2, #1
 8006894:	e000      	b.n	8006898 <prvGetNextExpireTime+0x18>
 8006896:	2200      	movs	r2, #0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068a4:	4b07      	ldr	r3, [pc, #28]	@ (80068c4 <prvGetNextExpireTime+0x44>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e001      	b.n	80068b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000ef8 	.word	0x20000ef8

080068c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068d0:	f7ff fa72 	bl	8005db8 <xTaskGetTickCount>
 80068d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <prvSampleTimeNow+0x3c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d205      	bcs.n	80068ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068e0:	f000 f93a 	bl	8006b58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068f2:	4a04      	ldr	r2, [pc, #16]	@ (8006904 <prvSampleTimeNow+0x3c>)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068f8:	68fb      	ldr	r3, [r7, #12]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000f08 	.word	0x20000f08

08006908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d812      	bhi.n	8006954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	429a      	cmp	r2, r3
 800693a:	d302      	bcc.n	8006942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e01b      	b.n	800697a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <prvInsertTimerInActiveList+0x7c>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f7fe f928 	bl	8004ba2 <vListInsert>
 8006952:	e012      	b.n	800697a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d206      	bcs.n	800696a <prvInsertTimerInActiveList+0x62>
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e007      	b.n	800697a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800696a:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <prvInsertTimerInActiveList+0x80>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fe f914 	bl	8004ba2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800697a:	697b      	ldr	r3, [r7, #20]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000efc 	.word	0x20000efc
 8006988:	20000ef8 	.word	0x20000ef8

0800698c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	@ 0x38
 8006990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006992:	e0ce      	b.n	8006b32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	da19      	bge.n	80069ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	3304      	adds	r3, #4
 800699e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	61fb      	str	r3, [r7, #28]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c4:	6850      	ldr	r0, [r2, #4]
 80069c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c8:	6892      	ldr	r2, [r2, #8]
 80069ca:	4611      	mov	r1, r2
 80069cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f2c0 80ae 	blt.w	8006b32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	3304      	adds	r3, #4
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe f914 	bl	8004c14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ec:	463b      	mov	r3, r7
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff ff6a 	bl	80068c8 <prvSampleTimeNow>
 80069f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	f200 8097 	bhi.w	8006b2c <prvProcessReceivedCommands+0x1a0>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <prvProcessReceivedCommands+0x78>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006aa3 	.word	0x08006aa3
 8006a14:	08006ab7 	.word	0x08006ab7
 8006a18:	08006b03 	.word	0x08006b03
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a2d 	.word	0x08006a2d
 8006a24:	08006aa3 	.word	0x08006aa3
 8006a28:	08006ab7 	.word	0x08006ab7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	18d1      	adds	r1, r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a4c:	f7ff ff5c 	bl	8006908 <prvInsertTimerInActiveList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d06c      	beq.n	8006b30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d061      	beq.n	8006b30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	441a      	add	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a7e:	f7ff fe01 	bl	8006684 <xTimerGenericCommand>
 8006a82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d152      	bne.n	8006b30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	61bb      	str	r3, [r7, #24]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ab4:	e03d      	b.n	8006b32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	617b      	str	r3, [r7, #20]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	18d1      	adds	r1, r2, r3
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006afc:	f7ff ff04 	bl	8006908 <prvInsertTimerInActiveList>
					break;
 8006b00:	e017      	b.n	8006b32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b12:	f000 fbe9 	bl	80072e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b16:	e00c      	b.n	8006b32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b2a:	e002      	b.n	8006b32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <prvProcessReceivedCommands+0x1a6>
					break;
 8006b30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b32:	4b08      	ldr	r3, [pc, #32]	@ (8006b54 <prvProcessReceivedCommands+0x1c8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1d39      	adds	r1, r7, #4
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fb7a 	bl	8005234 <xQueueReceive>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f47f af26 	bne.w	8006994 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	3730      	adds	r7, #48	@ 0x30
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000f00 	.word	0x20000f00

08006b58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b5e:	e049      	b.n	8006bf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b60:	4b2e      	ldr	r3, [pc, #184]	@ (8006c1c <prvSwitchTimerLists+0xc4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c1c <prvSwitchTimerLists+0xc4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe f84b 	bl	8004c14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d02f      	beq.n	8006bf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90e      	bls.n	8006bc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c1c <prvSwitchTimerLists+0xc4>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fd fff0 	bl	8004ba2 <vListInsert>
 8006bc2:	e017      	b.n	8006bf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fd58 	bl	8006684 <xTimerGenericCommand>
 8006bd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	603b      	str	r3, [r7, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bf4:	4b09      	ldr	r3, [pc, #36]	@ (8006c1c <prvSwitchTimerLists+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1b0      	bne.n	8006b60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bfe:	4b07      	ldr	r3, [pc, #28]	@ (8006c1c <prvSwitchTimerLists+0xc4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c04:	4b06      	ldr	r3, [pc, #24]	@ (8006c20 <prvSwitchTimerLists+0xc8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a04      	ldr	r2, [pc, #16]	@ (8006c1c <prvSwitchTimerLists+0xc4>)
 8006c0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c0c:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <prvSwitchTimerLists+0xc8>)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	6013      	str	r3, [r2, #0]
}
 8006c12:	bf00      	nop
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000ef8 	.word	0x20000ef8
 8006c20:	20000efc 	.word	0x20000efc

08006c24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c2a:	f000 f96d 	bl	8006f08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c2e:	4b15      	ldr	r3, [pc, #84]	@ (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d120      	bne.n	8006c78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c36:	4814      	ldr	r0, [pc, #80]	@ (8006c88 <prvCheckForValidListAndQueue+0x64>)
 8006c38:	f7fd ff62 	bl	8004b00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c3c:	4813      	ldr	r0, [pc, #76]	@ (8006c8c <prvCheckForValidListAndQueue+0x68>)
 8006c3e:	f7fd ff5f 	bl	8004b00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c42:	4b13      	ldr	r3, [pc, #76]	@ (8006c90 <prvCheckForValidListAndQueue+0x6c>)
 8006c44:	4a10      	ldr	r2, [pc, #64]	@ (8006c88 <prvCheckForValidListAndQueue+0x64>)
 8006c46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c48:	4b12      	ldr	r3, [pc, #72]	@ (8006c94 <prvCheckForValidListAndQueue+0x70>)
 8006c4a:	4a10      	ldr	r2, [pc, #64]	@ (8006c8c <prvCheckForValidListAndQueue+0x68>)
 8006c4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4b11      	ldr	r3, [pc, #68]	@ (8006c98 <prvCheckForValidListAndQueue+0x74>)
 8006c54:	4a11      	ldr	r2, [pc, #68]	@ (8006c9c <prvCheckForValidListAndQueue+0x78>)
 8006c56:	2110      	movs	r1, #16
 8006c58:	200a      	movs	r0, #10
 8006c5a:	f7fe f86f 	bl	8004d3c <xQueueGenericCreateStatic>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4a08      	ldr	r2, [pc, #32]	@ (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c64:	4b07      	ldr	r3, [pc, #28]	@ (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c6c:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <prvCheckForValidListAndQueue+0x60>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	490b      	ldr	r1, [pc, #44]	@ (8006ca0 <prvCheckForValidListAndQueue+0x7c>)
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fd52 	bl	800571c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c78:	f000 f978 	bl	8006f6c <vPortExitCritical>
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000f00 	.word	0x20000f00
 8006c88:	20000ed0 	.word	0x20000ed0
 8006c8c:	20000ee4 	.word	0x20000ee4
 8006c90:	20000ef8 	.word	0x20000ef8
 8006c94:	20000efc 	.word	0x20000efc
 8006c98:	20000fac 	.word	0x20000fac
 8006c9c:	20000f0c 	.word	0x20000f0c
 8006ca0:	08007f4c 	.word	0x08007f4c

08006ca4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3b04      	subs	r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006d08 <pxPortInitialiseStack+0x64>)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b14      	subs	r3, #20
 8006cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f06f 0202 	mvn.w	r2, #2
 8006cf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3b20      	subs	r3, #32
 8006cf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	08006d0d 	.word	0x08006d0d

08006d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <prvTaskExitError+0x58>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d00b      	beq.n	8006d38 <prvTaskExitError+0x2c>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <prvTaskExitError+0x28>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	60bb      	str	r3, [r7, #8]
}
 8006d4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d4c:	bf00      	nop
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0fc      	beq.n	8006d4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c
	...

08006d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d98:	4808      	ldr	r0, [pc, #32]	@ (8006dbc <prvPortStartFirstTask+0x24>)
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f380 8808 	msr	MSP, r0
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8814 	msr	CONTROL, r0
 8006daa:	b662      	cpsie	i
 8006dac:	b661      	cpsie	f
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	df00      	svc	0
 8006db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dba:	bf00      	nop
 8006dbc:	e000ed08 	.word	0xe000ed08

08006dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dc6:	4b47      	ldr	r3, [pc, #284]	@ (8006ee4 <xPortStartScheduler+0x124>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a47      	ldr	r2, [pc, #284]	@ (8006ee8 <xPortStartScheduler+0x128>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10b      	bne.n	8006de8 <xPortStartScheduler+0x28>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006de8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <xPortStartScheduler+0x124>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3f      	ldr	r2, [pc, #252]	@ (8006eec <xPortStartScheduler+0x12c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10b      	bne.n	8006e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	613b      	str	r3, [r7, #16]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e0a:	4b39      	ldr	r3, [pc, #228]	@ (8006ef0 <xPortStartScheduler+0x130>)
 8006e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	22ff      	movs	r2, #255	@ 0xff
 8006e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4b31      	ldr	r3, [pc, #196]	@ (8006ef4 <xPortStartScheduler+0x134>)
 8006e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e32:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e34:	2207      	movs	r2, #7
 8006e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e38:	e009      	b.n	8006e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b80      	cmp	r3, #128	@ 0x80
 8006e58:	d0ef      	beq.n	8006e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e5a:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1c3 0307 	rsb	r3, r3, #7
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00b      	beq.n	8006e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e90:	4a19      	ldr	r2, [pc, #100]	@ (8006ef8 <xPortStartScheduler+0x138>)
 8006e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e9c:	4b17      	ldr	r3, [pc, #92]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a16      	ldr	r2, [pc, #88]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ea8:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a13      	ldr	r2, [pc, #76]	@ (8006efc <xPortStartScheduler+0x13c>)
 8006eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006eb4:	f000 f8da 	bl	800706c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006eb8:	4b11      	ldr	r3, [pc, #68]	@ (8006f00 <xPortStartScheduler+0x140>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ebe:	f000 f8f9 	bl	80070b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ec2:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <xPortStartScheduler+0x144>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <xPortStartScheduler+0x144>)
 8006ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ece:	f7ff ff63 	bl	8006d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ed2:	f7ff f83b 	bl	8005f4c <vTaskSwitchContext>
	prvTaskExitError();
 8006ed6:	f7ff ff19 	bl	8006d0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	e000ed00 	.word	0xe000ed00
 8006ee8:	410fc271 	.word	0x410fc271
 8006eec:	410fc270 	.word	0x410fc270
 8006ef0:	e000e400 	.word	0xe000e400
 8006ef4:	20000ffc 	.word	0x20000ffc
 8006ef8:	20001000 	.word	0x20001000
 8006efc:	e000ed20 	.word	0xe000ed20
 8006f00:	2000000c 	.word	0x2000000c
 8006f04:	e000ef34 	.word	0xe000ef34

08006f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f22:	4b10      	ldr	r3, [pc, #64]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	4a0e      	ldr	r2, [pc, #56]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <vPortEnterCritical+0x5c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d110      	bne.n	8006f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <vPortEnterCritical+0x60>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	603b      	str	r3, [r7, #0]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <vPortEnterCritical+0x4a>
	}
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000000c 	.word	0x2000000c
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f72:	4b12      	ldr	r3, [pc, #72]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <vPortExitCritical+0x26>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	607b      	str	r3, [r7, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <vPortExitCritical+0x50>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <vPortExitCritical+0x44>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f383 8811 	msr	BASEPRI, r3
}
 8006fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000000c 	.word	0x2000000c

08006fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fc0:	f3ef 8009 	mrs	r0, PSP
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4b15      	ldr	r3, [pc, #84]	@ (8007020 <pxCurrentTCBConst>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f01e 0f10 	tst.w	lr, #16
 8006fd0:	bf08      	it	eq
 8006fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006fe4:	f380 8811 	msr	BASEPRI, r0
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f7fe ffac 	bl	8005f4c <vTaskSwitchContext>
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f380 8811 	msr	BASEPRI, r0
 8006ffc:	bc09      	pop	{r0, r3}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007006:	f01e 0f10 	tst.w	lr, #16
 800700a:	bf08      	it	eq
 800700c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007010:	f380 8809 	msr	PSP, r0
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst>:
 8007020:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
}
 8007040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007042:	f7fe fec9 	bl	8005dd8 <xTaskIncrementTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800704c:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <xPortSysTickHandler+0x40>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f383 8811 	msr	BASEPRI, r3
}
 800705e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007076:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <vPortSetupTimerInterrupt+0x38>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <vPortSetupTimerInterrupt+0x3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	@ (80070ac <vPortSetupTimerInterrupt+0x40>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	4a09      	ldr	r2, [pc, #36]	@ (80070b0 <vPortSetupTimerInterrupt+0x44>)
 800708a:	3b01      	subs	r3, #1
 800708c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708e:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e010 	.word	0xe000e010
 80070a4:	e000e018 	.word	0xe000e018
 80070a8:	20000000 	.word	0x20000000
 80070ac:	10624dd3 	.word	0x10624dd3
 80070b0:	e000e014 	.word	0xe000e014

080070b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070c4 <vPortEnableVFP+0x10>
 80070b8:	6801      	ldr	r1, [r0, #0]
 80070ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070be:	6001      	str	r1, [r0, #0]
 80070c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070c2:	bf00      	nop
 80070c4:	e000ed88 	.word	0xe000ed88

080070c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ce:	f3ef 8305 	mrs	r3, IPSR
 80070d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d915      	bls.n	8007106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070da:	4a18      	ldr	r2, [pc, #96]	@ (800713c <vPortValidateInterruptPriority+0x74>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070e4:	4b16      	ldr	r3, [pc, #88]	@ (8007140 <vPortValidateInterruptPriority+0x78>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	7afa      	ldrb	r2, [r7, #11]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d20b      	bcs.n	8007106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007106:	4b0f      	ldr	r3, [pc, #60]	@ (8007144 <vPortValidateInterruptPriority+0x7c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800710e:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <vPortValidateInterruptPriority+0x80>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d90b      	bls.n	800712e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	603b      	str	r3, [r7, #0]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <vPortValidateInterruptPriority+0x62>
	}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e3f0 	.word	0xe000e3f0
 8007140:	20000ffc 	.word	0x20000ffc
 8007144:	e000ed0c 	.word	0xe000ed0c
 8007148:	20001000 	.word	0x20001000

0800714c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007158:	f7fe fd82 	bl	8005c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800715c:	4b5c      	ldr	r3, [pc, #368]	@ (80072d0 <pvPortMalloc+0x184>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007164:	f000 f924 	bl	80073b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007168:	4b5a      	ldr	r3, [pc, #360]	@ (80072d4 <pvPortMalloc+0x188>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 8095 	bne.w	80072a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01e      	beq.n	80071ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800717c:	2208      	movs	r2, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d015      	beq.n	80071ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f023 0307 	bic.w	r3, r3, #7
 8007194:	3308      	adds	r3, #8
 8007196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <pvPortMalloc+0x6e>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	617b      	str	r3, [r7, #20]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d06f      	beq.n	80072a0 <pvPortMalloc+0x154>
 80071c0:	4b45      	ldr	r3, [pc, #276]	@ (80072d8 <pvPortMalloc+0x18c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d86a      	bhi.n	80072a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071ca:	4b44      	ldr	r3, [pc, #272]	@ (80072dc <pvPortMalloc+0x190>)
 80071cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071ce:	4b43      	ldr	r3, [pc, #268]	@ (80072dc <pvPortMalloc+0x190>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071d4:	e004      	b.n	80071e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d903      	bls.n	80071f2 <pvPortMalloc+0xa6>
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f1      	bne.n	80071d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071f2:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <pvPortMalloc+0x184>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d051      	beq.n	80072a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2208      	movs	r2, #8
 8007202:	4413      	add	r3, r2
 8007204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	2308      	movs	r3, #8
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	429a      	cmp	r2, r3
 800721c:	d920      	bls.n	8007260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800721e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4413      	add	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <pvPortMalloc+0xfc>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	613b      	str	r3, [r7, #16]
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800725a:	69b8      	ldr	r0, [r7, #24]
 800725c:	f000 f90a 	bl	8007474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007260:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <pvPortMalloc+0x18c>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	4a1b      	ldr	r2, [pc, #108]	@ (80072d8 <pvPortMalloc+0x18c>)
 800726c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800726e:	4b1a      	ldr	r3, [pc, #104]	@ (80072d8 <pvPortMalloc+0x18c>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b1b      	ldr	r3, [pc, #108]	@ (80072e0 <pvPortMalloc+0x194>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d203      	bcs.n	8007282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800727a:	4b17      	ldr	r3, [pc, #92]	@ (80072d8 <pvPortMalloc+0x18c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a18      	ldr	r2, [pc, #96]	@ (80072e0 <pvPortMalloc+0x194>)
 8007280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4b13      	ldr	r3, [pc, #76]	@ (80072d4 <pvPortMalloc+0x188>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	431a      	orrs	r2, r3
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007296:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <pvPortMalloc+0x198>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3301      	adds	r3, #1
 800729c:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <pvPortMalloc+0x198>)
 800729e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072a0:	f7fe fcec 	bl	8005c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <pvPortMalloc+0x17a>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60fb      	str	r3, [r7, #12]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <pvPortMalloc+0x176>
	return pvReturn;
 80072c6:	69fb      	ldr	r3, [r7, #28]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	@ 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20004c0c 	.word	0x20004c0c
 80072d4:	20004c20 	.word	0x20004c20
 80072d8:	20004c10 	.word	0x20004c10
 80072dc:	20004c04 	.word	0x20004c04
 80072e0:	20004c14 	.word	0x20004c14
 80072e4:	20004c18 	.word	0x20004c18

080072e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d04f      	beq.n	800739a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072fa:	2308      	movs	r3, #8
 80072fc:	425b      	negs	r3, r3
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4b25      	ldr	r3, [pc, #148]	@ (80073a4 <vPortFree+0xbc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <vPortFree+0x46>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60fb      	str	r3, [r7, #12]
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	e7fd      	b.n	800732a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <vPortFree+0x66>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60bb      	str	r3, [r7, #8]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	4b14      	ldr	r3, [pc, #80]	@ (80073a4 <vPortFree+0xbc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01e      	beq.n	800739a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11a      	bne.n	800739a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <vPortFree+0xbc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	43db      	mvns	r3, r3
 800736e:	401a      	ands	r2, r3
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007374:	f7fe fc74 	bl	8005c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <vPortFree+0xc0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4413      	add	r3, r2
 8007382:	4a09      	ldr	r2, [pc, #36]	@ (80073a8 <vPortFree+0xc0>)
 8007384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007386:	6938      	ldr	r0, [r7, #16]
 8007388:	f000 f874 	bl	8007474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <vPortFree+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	4a06      	ldr	r2, [pc, #24]	@ (80073ac <vPortFree+0xc4>)
 8007394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007396:	f7fe fc71 	bl	8005c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20004c20 	.word	0x20004c20
 80073a8:	20004c10 	.word	0x20004c10
 80073ac:	20004c1c 	.word	0x20004c1c

080073b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80073ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073bc:	4b27      	ldr	r3, [pc, #156]	@ (800745c <prvHeapInit+0xac>)
 80073be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00c      	beq.n	80073e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3307      	adds	r3, #7
 80073ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0307 	bic.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <prvHeapInit+0xac>)
 80073e0:	4413      	add	r3, r2
 80073e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <prvHeapInit+0xb0>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007460 <prvHeapInit+0xb0>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	4413      	add	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073fc:	2208      	movs	r2, #8
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4a15      	ldr	r2, [pc, #84]	@ (8007464 <prvHeapInit+0xb4>)
 8007410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007412:	4b14      	ldr	r3, [pc, #80]	@ (8007464 <prvHeapInit+0xb4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2200      	movs	r2, #0
 8007418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <prvHeapInit+0xb4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	1ad2      	subs	r2, r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <prvHeapInit+0xb4>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4a0a      	ldr	r2, [pc, #40]	@ (8007468 <prvHeapInit+0xb8>)
 800743e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4a09      	ldr	r2, [pc, #36]	@ (800746c <prvHeapInit+0xbc>)
 8007446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007448:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <prvHeapInit+0xc0>)
 800744a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800744e:	601a      	str	r2, [r3, #0]
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20001004 	.word	0x20001004
 8007460:	20004c04 	.word	0x20004c04
 8007464:	20004c0c 	.word	0x20004c0c
 8007468:	20004c14 	.word	0x20004c14
 800746c:	20004c10 	.word	0x20004c10
 8007470:	20004c20 	.word	0x20004c20

08007474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800747c:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <prvInsertBlockIntoFreeList+0xac>)
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e002      	b.n	8007488 <prvInsertBlockIntoFreeList+0x14>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d8f7      	bhi.n	8007482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d108      	bne.n	80074b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	441a      	add	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	441a      	add	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d118      	bne.n	80074fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b15      	ldr	r3, [pc, #84]	@ (8007524 <prvInsertBlockIntoFreeList+0xb0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d00d      	beq.n	80074f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	441a      	add	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e008      	b.n	8007504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007524 <prvInsertBlockIntoFreeList+0xb0>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e003      	b.n	8007504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d002      	beq.n	8007512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20004c04 	.word	0x20004c04
 8007524:	20004c0c 	.word	0x20004c0c

08007528 <sniprintf>:
 8007528:	b40c      	push	{r2, r3}
 800752a:	b530      	push	{r4, r5, lr}
 800752c:	4b18      	ldr	r3, [pc, #96]	@ (8007590 <sniprintf+0x68>)
 800752e:	1e0c      	subs	r4, r1, #0
 8007530:	681d      	ldr	r5, [r3, #0]
 8007532:	b09d      	sub	sp, #116	@ 0x74
 8007534:	da08      	bge.n	8007548 <sniprintf+0x20>
 8007536:	238b      	movs	r3, #139	@ 0x8b
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	b01d      	add	sp, #116	@ 0x74
 8007540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007544:	b002      	add	sp, #8
 8007546:	4770      	bx	lr
 8007548:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800754c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007556:	bf14      	ite	ne
 8007558:	f104 33ff 	addne.w	r3, r4, #4294967295
 800755c:	4623      	moveq	r3, r4
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	9307      	str	r3, [sp, #28]
 8007562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007566:	9002      	str	r0, [sp, #8]
 8007568:	9006      	str	r0, [sp, #24]
 800756a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800756e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007570:	ab21      	add	r3, sp, #132	@ 0x84
 8007572:	a902      	add	r1, sp, #8
 8007574:	4628      	mov	r0, r5
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	f000 f9a2 	bl	80078c0 <_svfiprintf_r>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	bfbc      	itt	lt
 8007580:	238b      	movlt	r3, #139	@ 0x8b
 8007582:	602b      	strlt	r3, [r5, #0]
 8007584:	2c00      	cmp	r4, #0
 8007586:	d0da      	beq.n	800753e <sniprintf+0x16>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	e7d6      	b.n	800753e <sniprintf+0x16>
 8007590:	20000010 	.word	0x20000010

08007594 <memset>:
 8007594:	4402      	add	r2, r0
 8007596:	4603      	mov	r3, r0
 8007598:	4293      	cmp	r3, r2
 800759a:	d100      	bne.n	800759e <memset+0xa>
 800759c:	4770      	bx	lr
 800759e:	f803 1b01 	strb.w	r1, [r3], #1
 80075a2:	e7f9      	b.n	8007598 <memset+0x4>

080075a4 <__errno>:
 80075a4:	4b01      	ldr	r3, [pc, #4]	@ (80075ac <__errno+0x8>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000010 	.word	0x20000010

080075b0 <__libc_init_array>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4d0d      	ldr	r5, [pc, #52]	@ (80075e8 <__libc_init_array+0x38>)
 80075b4:	4c0d      	ldr	r4, [pc, #52]	@ (80075ec <__libc_init_array+0x3c>)
 80075b6:	1b64      	subs	r4, r4, r5
 80075b8:	10a4      	asrs	r4, r4, #2
 80075ba:	2600      	movs	r6, #0
 80075bc:	42a6      	cmp	r6, r4
 80075be:	d109      	bne.n	80075d4 <__libc_init_array+0x24>
 80075c0:	4d0b      	ldr	r5, [pc, #44]	@ (80075f0 <__libc_init_array+0x40>)
 80075c2:	4c0c      	ldr	r4, [pc, #48]	@ (80075f4 <__libc_init_array+0x44>)
 80075c4:	f000 fc64 	bl	8007e90 <_init>
 80075c8:	1b64      	subs	r4, r4, r5
 80075ca:	10a4      	asrs	r4, r4, #2
 80075cc:	2600      	movs	r6, #0
 80075ce:	42a6      	cmp	r6, r4
 80075d0:	d105      	bne.n	80075de <__libc_init_array+0x2e>
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d8:	4798      	blx	r3
 80075da:	3601      	adds	r6, #1
 80075dc:	e7ee      	b.n	80075bc <__libc_init_array+0xc>
 80075de:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e2:	4798      	blx	r3
 80075e4:	3601      	adds	r6, #1
 80075e6:	e7f2      	b.n	80075ce <__libc_init_array+0x1e>
 80075e8:	08008090 	.word	0x08008090
 80075ec:	08008090 	.word	0x08008090
 80075f0:	08008090 	.word	0x08008090
 80075f4:	08008094 	.word	0x08008094

080075f8 <__retarget_lock_acquire_recursive>:
 80075f8:	4770      	bx	lr

080075fa <__retarget_lock_release_recursive>:
 80075fa:	4770      	bx	lr

080075fc <memcpy>:
 80075fc:	440a      	add	r2, r1
 80075fe:	4291      	cmp	r1, r2
 8007600:	f100 33ff 	add.w	r3, r0, #4294967295
 8007604:	d100      	bne.n	8007608 <memcpy+0xc>
 8007606:	4770      	bx	lr
 8007608:	b510      	push	{r4, lr}
 800760a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007612:	4291      	cmp	r1, r2
 8007614:	d1f9      	bne.n	800760a <memcpy+0xe>
 8007616:	bd10      	pop	{r4, pc}

08007618 <_free_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4605      	mov	r5, r0
 800761c:	2900      	cmp	r1, #0
 800761e:	d041      	beq.n	80076a4 <_free_r+0x8c>
 8007620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007624:	1f0c      	subs	r4, r1, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	18e4      	addlt	r4, r4, r3
 800762c:	f000 f8e0 	bl	80077f0 <__malloc_lock>
 8007630:	4a1d      	ldr	r2, [pc, #116]	@ (80076a8 <_free_r+0x90>)
 8007632:	6813      	ldr	r3, [r2, #0]
 8007634:	b933      	cbnz	r3, 8007644 <_free_r+0x2c>
 8007636:	6063      	str	r3, [r4, #4]
 8007638:	6014      	str	r4, [r2, #0]
 800763a:	4628      	mov	r0, r5
 800763c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007640:	f000 b8dc 	b.w	80077fc <__malloc_unlock>
 8007644:	42a3      	cmp	r3, r4
 8007646:	d908      	bls.n	800765a <_free_r+0x42>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	1821      	adds	r1, r4, r0
 800764c:	428b      	cmp	r3, r1
 800764e:	bf01      	itttt	eq
 8007650:	6819      	ldreq	r1, [r3, #0]
 8007652:	685b      	ldreq	r3, [r3, #4]
 8007654:	1809      	addeq	r1, r1, r0
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	e7ed      	b.n	8007636 <_free_r+0x1e>
 800765a:	461a      	mov	r2, r3
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b10b      	cbz	r3, 8007664 <_free_r+0x4c>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d9fa      	bls.n	800765a <_free_r+0x42>
 8007664:	6811      	ldr	r1, [r2, #0]
 8007666:	1850      	adds	r0, r2, r1
 8007668:	42a0      	cmp	r0, r4
 800766a:	d10b      	bne.n	8007684 <_free_r+0x6c>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	4401      	add	r1, r0
 8007670:	1850      	adds	r0, r2, r1
 8007672:	4283      	cmp	r3, r0
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	d1e0      	bne.n	800763a <_free_r+0x22>
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	6053      	str	r3, [r2, #4]
 800767e:	4408      	add	r0, r1
 8007680:	6010      	str	r0, [r2, #0]
 8007682:	e7da      	b.n	800763a <_free_r+0x22>
 8007684:	d902      	bls.n	800768c <_free_r+0x74>
 8007686:	230c      	movs	r3, #12
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	e7d6      	b.n	800763a <_free_r+0x22>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	1821      	adds	r1, r4, r0
 8007690:	428b      	cmp	r3, r1
 8007692:	bf04      	itt	eq
 8007694:	6819      	ldreq	r1, [r3, #0]
 8007696:	685b      	ldreq	r3, [r3, #4]
 8007698:	6063      	str	r3, [r4, #4]
 800769a:	bf04      	itt	eq
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	6054      	str	r4, [r2, #4]
 80076a2:	e7ca      	b.n	800763a <_free_r+0x22>
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	bf00      	nop
 80076a8:	20004d68 	.word	0x20004d68

080076ac <sbrk_aligned>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4e0f      	ldr	r6, [pc, #60]	@ (80076ec <sbrk_aligned+0x40>)
 80076b0:	460c      	mov	r4, r1
 80076b2:	6831      	ldr	r1, [r6, #0]
 80076b4:	4605      	mov	r5, r0
 80076b6:	b911      	cbnz	r1, 80076be <sbrk_aligned+0x12>
 80076b8:	f000 fba4 	bl	8007e04 <_sbrk_r>
 80076bc:	6030      	str	r0, [r6, #0]
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 fb9f 	bl	8007e04 <_sbrk_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d103      	bne.n	80076d2 <sbrk_aligned+0x26>
 80076ca:	f04f 34ff 	mov.w	r4, #4294967295
 80076ce:	4620      	mov	r0, r4
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
 80076d2:	1cc4      	adds	r4, r0, #3
 80076d4:	f024 0403 	bic.w	r4, r4, #3
 80076d8:	42a0      	cmp	r0, r4
 80076da:	d0f8      	beq.n	80076ce <sbrk_aligned+0x22>
 80076dc:	1a21      	subs	r1, r4, r0
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 fb90 	bl	8007e04 <_sbrk_r>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d1f2      	bne.n	80076ce <sbrk_aligned+0x22>
 80076e8:	e7ef      	b.n	80076ca <sbrk_aligned+0x1e>
 80076ea:	bf00      	nop
 80076ec:	20004d64 	.word	0x20004d64

080076f0 <_malloc_r>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	1ccd      	adds	r5, r1, #3
 80076f6:	f025 0503 	bic.w	r5, r5, #3
 80076fa:	3508      	adds	r5, #8
 80076fc:	2d0c      	cmp	r5, #12
 80076fe:	bf38      	it	cc
 8007700:	250c      	movcc	r5, #12
 8007702:	2d00      	cmp	r5, #0
 8007704:	4606      	mov	r6, r0
 8007706:	db01      	blt.n	800770c <_malloc_r+0x1c>
 8007708:	42a9      	cmp	r1, r5
 800770a:	d904      	bls.n	8007716 <_malloc_r+0x26>
 800770c:	230c      	movs	r3, #12
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	2000      	movs	r0, #0
 8007712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077ec <_malloc_r+0xfc>
 800771a:	f000 f869 	bl	80077f0 <__malloc_lock>
 800771e:	f8d8 3000 	ldr.w	r3, [r8]
 8007722:	461c      	mov	r4, r3
 8007724:	bb44      	cbnz	r4, 8007778 <_malloc_r+0x88>
 8007726:	4629      	mov	r1, r5
 8007728:	4630      	mov	r0, r6
 800772a:	f7ff ffbf 	bl	80076ac <sbrk_aligned>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	4604      	mov	r4, r0
 8007732:	d158      	bne.n	80077e6 <_malloc_r+0xf6>
 8007734:	f8d8 4000 	ldr.w	r4, [r8]
 8007738:	4627      	mov	r7, r4
 800773a:	2f00      	cmp	r7, #0
 800773c:	d143      	bne.n	80077c6 <_malloc_r+0xd6>
 800773e:	2c00      	cmp	r4, #0
 8007740:	d04b      	beq.n	80077da <_malloc_r+0xea>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	4639      	mov	r1, r7
 8007746:	4630      	mov	r0, r6
 8007748:	eb04 0903 	add.w	r9, r4, r3
 800774c:	f000 fb5a 	bl	8007e04 <_sbrk_r>
 8007750:	4581      	cmp	r9, r0
 8007752:	d142      	bne.n	80077da <_malloc_r+0xea>
 8007754:	6821      	ldr	r1, [r4, #0]
 8007756:	1a6d      	subs	r5, r5, r1
 8007758:	4629      	mov	r1, r5
 800775a:	4630      	mov	r0, r6
 800775c:	f7ff ffa6 	bl	80076ac <sbrk_aligned>
 8007760:	3001      	adds	r0, #1
 8007762:	d03a      	beq.n	80077da <_malloc_r+0xea>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	442b      	add	r3, r5
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	f8d8 3000 	ldr.w	r3, [r8]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	bb62      	cbnz	r2, 80077cc <_malloc_r+0xdc>
 8007772:	f8c8 7000 	str.w	r7, [r8]
 8007776:	e00f      	b.n	8007798 <_malloc_r+0xa8>
 8007778:	6822      	ldr	r2, [r4, #0]
 800777a:	1b52      	subs	r2, r2, r5
 800777c:	d420      	bmi.n	80077c0 <_malloc_r+0xd0>
 800777e:	2a0b      	cmp	r2, #11
 8007780:	d917      	bls.n	80077b2 <_malloc_r+0xc2>
 8007782:	1961      	adds	r1, r4, r5
 8007784:	42a3      	cmp	r3, r4
 8007786:	6025      	str	r5, [r4, #0]
 8007788:	bf18      	it	ne
 800778a:	6059      	strne	r1, [r3, #4]
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	bf08      	it	eq
 8007790:	f8c8 1000 	streq.w	r1, [r8]
 8007794:	5162      	str	r2, [r4, r5]
 8007796:	604b      	str	r3, [r1, #4]
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f82f 	bl	80077fc <__malloc_unlock>
 800779e:	f104 000b 	add.w	r0, r4, #11
 80077a2:	1d23      	adds	r3, r4, #4
 80077a4:	f020 0007 	bic.w	r0, r0, #7
 80077a8:	1ac2      	subs	r2, r0, r3
 80077aa:	bf1c      	itt	ne
 80077ac:	1a1b      	subne	r3, r3, r0
 80077ae:	50a3      	strne	r3, [r4, r2]
 80077b0:	e7af      	b.n	8007712 <_malloc_r+0x22>
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	bf0c      	ite	eq
 80077b8:	f8c8 2000 	streq.w	r2, [r8]
 80077bc:	605a      	strne	r2, [r3, #4]
 80077be:	e7eb      	b.n	8007798 <_malloc_r+0xa8>
 80077c0:	4623      	mov	r3, r4
 80077c2:	6864      	ldr	r4, [r4, #4]
 80077c4:	e7ae      	b.n	8007724 <_malloc_r+0x34>
 80077c6:	463c      	mov	r4, r7
 80077c8:	687f      	ldr	r7, [r7, #4]
 80077ca:	e7b6      	b.n	800773a <_malloc_r+0x4a>
 80077cc:	461a      	mov	r2, r3
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d1fb      	bne.n	80077cc <_malloc_r+0xdc>
 80077d4:	2300      	movs	r3, #0
 80077d6:	6053      	str	r3, [r2, #4]
 80077d8:	e7de      	b.n	8007798 <_malloc_r+0xa8>
 80077da:	230c      	movs	r3, #12
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	4630      	mov	r0, r6
 80077e0:	f000 f80c 	bl	80077fc <__malloc_unlock>
 80077e4:	e794      	b.n	8007710 <_malloc_r+0x20>
 80077e6:	6005      	str	r5, [r0, #0]
 80077e8:	e7d6      	b.n	8007798 <_malloc_r+0xa8>
 80077ea:	bf00      	nop
 80077ec:	20004d68 	.word	0x20004d68

080077f0 <__malloc_lock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	@ (80077f8 <__malloc_lock+0x8>)
 80077f2:	f7ff bf01 	b.w	80075f8 <__retarget_lock_acquire_recursive>
 80077f6:	bf00      	nop
 80077f8:	20004d60 	.word	0x20004d60

080077fc <__malloc_unlock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	@ (8007804 <__malloc_unlock+0x8>)
 80077fe:	f7ff befc 	b.w	80075fa <__retarget_lock_release_recursive>
 8007802:	bf00      	nop
 8007804:	20004d60 	.word	0x20004d60

08007808 <__ssputs_r>:
 8007808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	688e      	ldr	r6, [r1, #8]
 800780e:	461f      	mov	r7, r3
 8007810:	42be      	cmp	r6, r7
 8007812:	680b      	ldr	r3, [r1, #0]
 8007814:	4682      	mov	sl, r0
 8007816:	460c      	mov	r4, r1
 8007818:	4690      	mov	r8, r2
 800781a:	d82d      	bhi.n	8007878 <__ssputs_r+0x70>
 800781c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007820:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007824:	d026      	beq.n	8007874 <__ssputs_r+0x6c>
 8007826:	6965      	ldr	r5, [r4, #20]
 8007828:	6909      	ldr	r1, [r1, #16]
 800782a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800782e:	eba3 0901 	sub.w	r9, r3, r1
 8007832:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007836:	1c7b      	adds	r3, r7, #1
 8007838:	444b      	add	r3, r9
 800783a:	106d      	asrs	r5, r5, #1
 800783c:	429d      	cmp	r5, r3
 800783e:	bf38      	it	cc
 8007840:	461d      	movcc	r5, r3
 8007842:	0553      	lsls	r3, r2, #21
 8007844:	d527      	bpl.n	8007896 <__ssputs_r+0x8e>
 8007846:	4629      	mov	r1, r5
 8007848:	f7ff ff52 	bl	80076f0 <_malloc_r>
 800784c:	4606      	mov	r6, r0
 800784e:	b360      	cbz	r0, 80078aa <__ssputs_r+0xa2>
 8007850:	6921      	ldr	r1, [r4, #16]
 8007852:	464a      	mov	r2, r9
 8007854:	f7ff fed2 	bl	80075fc <memcpy>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800785e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	6126      	str	r6, [r4, #16]
 8007866:	6165      	str	r5, [r4, #20]
 8007868:	444e      	add	r6, r9
 800786a:	eba5 0509 	sub.w	r5, r5, r9
 800786e:	6026      	str	r6, [r4, #0]
 8007870:	60a5      	str	r5, [r4, #8]
 8007872:	463e      	mov	r6, r7
 8007874:	42be      	cmp	r6, r7
 8007876:	d900      	bls.n	800787a <__ssputs_r+0x72>
 8007878:	463e      	mov	r6, r7
 800787a:	6820      	ldr	r0, [r4, #0]
 800787c:	4632      	mov	r2, r6
 800787e:	4641      	mov	r1, r8
 8007880:	f000 faa6 	bl	8007dd0 <memmove>
 8007884:	68a3      	ldr	r3, [r4, #8]
 8007886:	1b9b      	subs	r3, r3, r6
 8007888:	60a3      	str	r3, [r4, #8]
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	4433      	add	r3, r6
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	2000      	movs	r0, #0
 8007892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007896:	462a      	mov	r2, r5
 8007898:	f000 fac4 	bl	8007e24 <_realloc_r>
 800789c:	4606      	mov	r6, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	d1e0      	bne.n	8007864 <__ssputs_r+0x5c>
 80078a2:	6921      	ldr	r1, [r4, #16]
 80078a4:	4650      	mov	r0, sl
 80078a6:	f7ff feb7 	bl	8007618 <_free_r>
 80078aa:	230c      	movs	r3, #12
 80078ac:	f8ca 3000 	str.w	r3, [sl]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	e7e9      	b.n	8007892 <__ssputs_r+0x8a>
	...

080078c0 <_svfiprintf_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4698      	mov	r8, r3
 80078c6:	898b      	ldrh	r3, [r1, #12]
 80078c8:	061b      	lsls	r3, r3, #24
 80078ca:	b09d      	sub	sp, #116	@ 0x74
 80078cc:	4607      	mov	r7, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	4614      	mov	r4, r2
 80078d2:	d510      	bpl.n	80078f6 <_svfiprintf_r+0x36>
 80078d4:	690b      	ldr	r3, [r1, #16]
 80078d6:	b973      	cbnz	r3, 80078f6 <_svfiprintf_r+0x36>
 80078d8:	2140      	movs	r1, #64	@ 0x40
 80078da:	f7ff ff09 	bl	80076f0 <_malloc_r>
 80078de:	6028      	str	r0, [r5, #0]
 80078e0:	6128      	str	r0, [r5, #16]
 80078e2:	b930      	cbnz	r0, 80078f2 <_svfiprintf_r+0x32>
 80078e4:	230c      	movs	r3, #12
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	b01d      	add	sp, #116	@ 0x74
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	2340      	movs	r3, #64	@ 0x40
 80078f4:	616b      	str	r3, [r5, #20]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fa:	2320      	movs	r3, #32
 80078fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007900:	f8cd 800c 	str.w	r8, [sp, #12]
 8007904:	2330      	movs	r3, #48	@ 0x30
 8007906:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007aa4 <_svfiprintf_r+0x1e4>
 800790a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800790e:	f04f 0901 	mov.w	r9, #1
 8007912:	4623      	mov	r3, r4
 8007914:	469a      	mov	sl, r3
 8007916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791a:	b10a      	cbz	r2, 8007920 <_svfiprintf_r+0x60>
 800791c:	2a25      	cmp	r2, #37	@ 0x25
 800791e:	d1f9      	bne.n	8007914 <_svfiprintf_r+0x54>
 8007920:	ebba 0b04 	subs.w	fp, sl, r4
 8007924:	d00b      	beq.n	800793e <_svfiprintf_r+0x7e>
 8007926:	465b      	mov	r3, fp
 8007928:	4622      	mov	r2, r4
 800792a:	4629      	mov	r1, r5
 800792c:	4638      	mov	r0, r7
 800792e:	f7ff ff6b 	bl	8007808 <__ssputs_r>
 8007932:	3001      	adds	r0, #1
 8007934:	f000 80a7 	beq.w	8007a86 <_svfiprintf_r+0x1c6>
 8007938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800793a:	445a      	add	r2, fp
 800793c:	9209      	str	r2, [sp, #36]	@ 0x24
 800793e:	f89a 3000 	ldrb.w	r3, [sl]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 809f 	beq.w	8007a86 <_svfiprintf_r+0x1c6>
 8007948:	2300      	movs	r3, #0
 800794a:	f04f 32ff 	mov.w	r2, #4294967295
 800794e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007952:	f10a 0a01 	add.w	sl, sl, #1
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	9307      	str	r3, [sp, #28]
 800795a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800795e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007960:	4654      	mov	r4, sl
 8007962:	2205      	movs	r2, #5
 8007964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007968:	484e      	ldr	r0, [pc, #312]	@ (8007aa4 <_svfiprintf_r+0x1e4>)
 800796a:	f7f8 fc41 	bl	80001f0 <memchr>
 800796e:	9a04      	ldr	r2, [sp, #16]
 8007970:	b9d8      	cbnz	r0, 80079aa <_svfiprintf_r+0xea>
 8007972:	06d0      	lsls	r0, r2, #27
 8007974:	bf44      	itt	mi
 8007976:	2320      	movmi	r3, #32
 8007978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800797c:	0711      	lsls	r1, r2, #28
 800797e:	bf44      	itt	mi
 8007980:	232b      	movmi	r3, #43	@ 0x2b
 8007982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007986:	f89a 3000 	ldrb.w	r3, [sl]
 800798a:	2b2a      	cmp	r3, #42	@ 0x2a
 800798c:	d015      	beq.n	80079ba <_svfiprintf_r+0xfa>
 800798e:	9a07      	ldr	r2, [sp, #28]
 8007990:	4654      	mov	r4, sl
 8007992:	2000      	movs	r0, #0
 8007994:	f04f 0c0a 	mov.w	ip, #10
 8007998:	4621      	mov	r1, r4
 800799a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800799e:	3b30      	subs	r3, #48	@ 0x30
 80079a0:	2b09      	cmp	r3, #9
 80079a2:	d94b      	bls.n	8007a3c <_svfiprintf_r+0x17c>
 80079a4:	b1b0      	cbz	r0, 80079d4 <_svfiprintf_r+0x114>
 80079a6:	9207      	str	r2, [sp, #28]
 80079a8:	e014      	b.n	80079d4 <_svfiprintf_r+0x114>
 80079aa:	eba0 0308 	sub.w	r3, r0, r8
 80079ae:	fa09 f303 	lsl.w	r3, r9, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	46a2      	mov	sl, r4
 80079b8:	e7d2      	b.n	8007960 <_svfiprintf_r+0xa0>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	1d19      	adds	r1, r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	9103      	str	r1, [sp, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bfbb      	ittet	lt
 80079c6:	425b      	neglt	r3, r3
 80079c8:	f042 0202 	orrlt.w	r2, r2, #2
 80079cc:	9307      	strge	r3, [sp, #28]
 80079ce:	9307      	strlt	r3, [sp, #28]
 80079d0:	bfb8      	it	lt
 80079d2:	9204      	strlt	r2, [sp, #16]
 80079d4:	7823      	ldrb	r3, [r4, #0]
 80079d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80079d8:	d10a      	bne.n	80079f0 <_svfiprintf_r+0x130>
 80079da:	7863      	ldrb	r3, [r4, #1]
 80079dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80079de:	d132      	bne.n	8007a46 <_svfiprintf_r+0x186>
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	9203      	str	r2, [sp, #12]
 80079e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079ec:	3402      	adds	r4, #2
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ab4 <_svfiprintf_r+0x1f4>
 80079f4:	7821      	ldrb	r1, [r4, #0]
 80079f6:	2203      	movs	r2, #3
 80079f8:	4650      	mov	r0, sl
 80079fa:	f7f8 fbf9 	bl	80001f0 <memchr>
 80079fe:	b138      	cbz	r0, 8007a10 <_svfiprintf_r+0x150>
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	eba0 000a 	sub.w	r0, r0, sl
 8007a06:	2240      	movs	r2, #64	@ 0x40
 8007a08:	4082      	lsls	r2, r0
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a14:	4824      	ldr	r0, [pc, #144]	@ (8007aa8 <_svfiprintf_r+0x1e8>)
 8007a16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a1a:	2206      	movs	r2, #6
 8007a1c:	f7f8 fbe8 	bl	80001f0 <memchr>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d036      	beq.n	8007a92 <_svfiprintf_r+0x1d2>
 8007a24:	4b21      	ldr	r3, [pc, #132]	@ (8007aac <_svfiprintf_r+0x1ec>)
 8007a26:	bb1b      	cbnz	r3, 8007a70 <_svfiprintf_r+0x1b0>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	3307      	adds	r3, #7
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	3308      	adds	r3, #8
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a36:	4433      	add	r3, r6
 8007a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3a:	e76a      	b.n	8007912 <_svfiprintf_r+0x52>
 8007a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a40:	460c      	mov	r4, r1
 8007a42:	2001      	movs	r0, #1
 8007a44:	e7a8      	b.n	8007998 <_svfiprintf_r+0xd8>
 8007a46:	2300      	movs	r3, #0
 8007a48:	3401      	adds	r4, #1
 8007a4a:	9305      	str	r3, [sp, #20]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f04f 0c0a 	mov.w	ip, #10
 8007a52:	4620      	mov	r0, r4
 8007a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a58:	3a30      	subs	r2, #48	@ 0x30
 8007a5a:	2a09      	cmp	r2, #9
 8007a5c:	d903      	bls.n	8007a66 <_svfiprintf_r+0x1a6>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0c6      	beq.n	80079f0 <_svfiprintf_r+0x130>
 8007a62:	9105      	str	r1, [sp, #20]
 8007a64:	e7c4      	b.n	80079f0 <_svfiprintf_r+0x130>
 8007a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e7f0      	b.n	8007a52 <_svfiprintf_r+0x192>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	462a      	mov	r2, r5
 8007a76:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab0 <_svfiprintf_r+0x1f0>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f3af 8000 	nop.w
 8007a80:	1c42      	adds	r2, r0, #1
 8007a82:	4606      	mov	r6, r0
 8007a84:	d1d6      	bne.n	8007a34 <_svfiprintf_r+0x174>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	065b      	lsls	r3, r3, #25
 8007a8a:	f53f af2d 	bmi.w	80078e8 <_svfiprintf_r+0x28>
 8007a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a90:	e72c      	b.n	80078ec <_svfiprintf_r+0x2c>
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	462a      	mov	r2, r5
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <_svfiprintf_r+0x1f0>)
 8007a9a:	a904      	add	r1, sp, #16
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f000 f879 	bl	8007b94 <_printf_i>
 8007aa2:	e7ed      	b.n	8007a80 <_svfiprintf_r+0x1c0>
 8007aa4:	08008054 	.word	0x08008054
 8007aa8:	0800805e 	.word	0x0800805e
 8007aac:	00000000 	.word	0x00000000
 8007ab0:	08007809 	.word	0x08007809
 8007ab4:	0800805a 	.word	0x0800805a

08007ab8 <_printf_common>:
 8007ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	4616      	mov	r6, r2
 8007abe:	4698      	mov	r8, r3
 8007ac0:	688a      	ldr	r2, [r1, #8]
 8007ac2:	690b      	ldr	r3, [r1, #16]
 8007ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bfb8      	it	lt
 8007acc:	4613      	movlt	r3, r2
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b10a      	cbz	r2, 8007ade <_printf_common+0x26>
 8007ada:	3301      	adds	r3, #1
 8007adc:	6033      	str	r3, [r6, #0]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	0699      	lsls	r1, r3, #26
 8007ae2:	bf42      	ittt	mi
 8007ae4:	6833      	ldrmi	r3, [r6, #0]
 8007ae6:	3302      	addmi	r3, #2
 8007ae8:	6033      	strmi	r3, [r6, #0]
 8007aea:	6825      	ldr	r5, [r4, #0]
 8007aec:	f015 0506 	ands.w	r5, r5, #6
 8007af0:	d106      	bne.n	8007b00 <_printf_common+0x48>
 8007af2:	f104 0a19 	add.w	sl, r4, #25
 8007af6:	68e3      	ldr	r3, [r4, #12]
 8007af8:	6832      	ldr	r2, [r6, #0]
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	42ab      	cmp	r3, r5
 8007afe:	dc26      	bgt.n	8007b4e <_printf_common+0x96>
 8007b00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b04:	6822      	ldr	r2, [r4, #0]
 8007b06:	3b00      	subs	r3, #0
 8007b08:	bf18      	it	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	0692      	lsls	r2, r2, #26
 8007b0e:	d42b      	bmi.n	8007b68 <_printf_common+0xb0>
 8007b10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b14:	4641      	mov	r1, r8
 8007b16:	4638      	mov	r0, r7
 8007b18:	47c8      	blx	r9
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d01e      	beq.n	8007b5c <_printf_common+0xa4>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	f003 0306 	and.w	r3, r3, #6
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	bf02      	ittt	eq
 8007b2a:	68e5      	ldreq	r5, [r4, #12]
 8007b2c:	6833      	ldreq	r3, [r6, #0]
 8007b2e:	1aed      	subeq	r5, r5, r3
 8007b30:	68a3      	ldr	r3, [r4, #8]
 8007b32:	bf0c      	ite	eq
 8007b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b38:	2500      	movne	r5, #0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bfc4      	itt	gt
 8007b3e:	1a9b      	subgt	r3, r3, r2
 8007b40:	18ed      	addgt	r5, r5, r3
 8007b42:	2600      	movs	r6, #0
 8007b44:	341a      	adds	r4, #26
 8007b46:	42b5      	cmp	r5, r6
 8007b48:	d11a      	bne.n	8007b80 <_printf_common+0xc8>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e008      	b.n	8007b60 <_printf_common+0xa8>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4652      	mov	r2, sl
 8007b52:	4641      	mov	r1, r8
 8007b54:	4638      	mov	r0, r7
 8007b56:	47c8      	blx	r9
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d103      	bne.n	8007b64 <_printf_common+0xac>
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	3501      	adds	r5, #1
 8007b66:	e7c6      	b.n	8007af6 <_printf_common+0x3e>
 8007b68:	18e1      	adds	r1, r4, r3
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	2030      	movs	r0, #48	@ 0x30
 8007b6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b72:	4422      	add	r2, r4
 8007b74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	e7c7      	b.n	8007b10 <_printf_common+0x58>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4622      	mov	r2, r4
 8007b84:	4641      	mov	r1, r8
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c8      	blx	r9
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d0e6      	beq.n	8007b5c <_printf_common+0xa4>
 8007b8e:	3601      	adds	r6, #1
 8007b90:	e7d9      	b.n	8007b46 <_printf_common+0x8e>
	...

08007b94 <_printf_i>:
 8007b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	7e0f      	ldrb	r7, [r1, #24]
 8007b9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b9c:	2f78      	cmp	r7, #120	@ 0x78
 8007b9e:	4691      	mov	r9, r2
 8007ba0:	4680      	mov	r8, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	469a      	mov	sl, r3
 8007ba6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007baa:	d807      	bhi.n	8007bbc <_printf_i+0x28>
 8007bac:	2f62      	cmp	r7, #98	@ 0x62
 8007bae:	d80a      	bhi.n	8007bc6 <_printf_i+0x32>
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	f000 80d1 	beq.w	8007d58 <_printf_i+0x1c4>
 8007bb6:	2f58      	cmp	r7, #88	@ 0x58
 8007bb8:	f000 80b8 	beq.w	8007d2c <_printf_i+0x198>
 8007bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bc4:	e03a      	b.n	8007c3c <_printf_i+0xa8>
 8007bc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bca:	2b15      	cmp	r3, #21
 8007bcc:	d8f6      	bhi.n	8007bbc <_printf_i+0x28>
 8007bce:	a101      	add	r1, pc, #4	@ (adr r1, 8007bd4 <_printf_i+0x40>)
 8007bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c41 	.word	0x08007c41
 8007bdc:	08007bbd 	.word	0x08007bbd
 8007be0:	08007bbd 	.word	0x08007bbd
 8007be4:	08007bbd 	.word	0x08007bbd
 8007be8:	08007bbd 	.word	0x08007bbd
 8007bec:	08007c41 	.word	0x08007c41
 8007bf0:	08007bbd 	.word	0x08007bbd
 8007bf4:	08007bbd 	.word	0x08007bbd
 8007bf8:	08007bbd 	.word	0x08007bbd
 8007bfc:	08007bbd 	.word	0x08007bbd
 8007c00:	08007d3f 	.word	0x08007d3f
 8007c04:	08007c6b 	.word	0x08007c6b
 8007c08:	08007cf9 	.word	0x08007cf9
 8007c0c:	08007bbd 	.word	0x08007bbd
 8007c10:	08007bbd 	.word	0x08007bbd
 8007c14:	08007d61 	.word	0x08007d61
 8007c18:	08007bbd 	.word	0x08007bbd
 8007c1c:	08007c6b 	.word	0x08007c6b
 8007c20:	08007bbd 	.word	0x08007bbd
 8007c24:	08007bbd 	.word	0x08007bbd
 8007c28:	08007d01 	.word	0x08007d01
 8007c2c:	6833      	ldr	r3, [r6, #0]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6032      	str	r2, [r6, #0]
 8007c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e09c      	b.n	8007d7a <_printf_i+0x1e6>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	6820      	ldr	r0, [r4, #0]
 8007c44:	1d19      	adds	r1, r3, #4
 8007c46:	6031      	str	r1, [r6, #0]
 8007c48:	0606      	lsls	r6, r0, #24
 8007c4a:	d501      	bpl.n	8007c50 <_printf_i+0xbc>
 8007c4c:	681d      	ldr	r5, [r3, #0]
 8007c4e:	e003      	b.n	8007c58 <_printf_i+0xc4>
 8007c50:	0645      	lsls	r5, r0, #25
 8007c52:	d5fb      	bpl.n	8007c4c <_printf_i+0xb8>
 8007c54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	da03      	bge.n	8007c64 <_printf_i+0xd0>
 8007c5c:	232d      	movs	r3, #45	@ 0x2d
 8007c5e:	426d      	negs	r5, r5
 8007c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c64:	4858      	ldr	r0, [pc, #352]	@ (8007dc8 <_printf_i+0x234>)
 8007c66:	230a      	movs	r3, #10
 8007c68:	e011      	b.n	8007c8e <_printf_i+0xfa>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	6833      	ldr	r3, [r6, #0]
 8007c6e:	0608      	lsls	r0, r1, #24
 8007c70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c74:	d402      	bmi.n	8007c7c <_printf_i+0xe8>
 8007c76:	0649      	lsls	r1, r1, #25
 8007c78:	bf48      	it	mi
 8007c7a:	b2ad      	uxthmi	r5, r5
 8007c7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c7e:	4852      	ldr	r0, [pc, #328]	@ (8007dc8 <_printf_i+0x234>)
 8007c80:	6033      	str	r3, [r6, #0]
 8007c82:	bf14      	ite	ne
 8007c84:	230a      	movne	r3, #10
 8007c86:	2308      	moveq	r3, #8
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c8e:	6866      	ldr	r6, [r4, #4]
 8007c90:	60a6      	str	r6, [r4, #8]
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	db05      	blt.n	8007ca2 <_printf_i+0x10e>
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	432e      	orrs	r6, r5
 8007c9a:	f021 0104 	bic.w	r1, r1, #4
 8007c9e:	6021      	str	r1, [r4, #0]
 8007ca0:	d04b      	beq.n	8007d3a <_printf_i+0x1a6>
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ca8:	fb03 5711 	mls	r7, r3, r1, r5
 8007cac:	5dc7      	ldrb	r7, [r0, r7]
 8007cae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cb2:	462f      	mov	r7, r5
 8007cb4:	42bb      	cmp	r3, r7
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	d9f4      	bls.n	8007ca4 <_printf_i+0x110>
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d10b      	bne.n	8007cd6 <_printf_i+0x142>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	07df      	lsls	r7, r3, #31
 8007cc2:	d508      	bpl.n	8007cd6 <_printf_i+0x142>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	6861      	ldr	r1, [r4, #4]
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	bfde      	ittt	le
 8007ccc:	2330      	movle	r3, #48	@ 0x30
 8007cce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cd6:	1b92      	subs	r2, r2, r6
 8007cd8:	6122      	str	r2, [r4, #16]
 8007cda:	f8cd a000 	str.w	sl, [sp]
 8007cde:	464b      	mov	r3, r9
 8007ce0:	aa03      	add	r2, sp, #12
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	f7ff fee7 	bl	8007ab8 <_printf_common>
 8007cea:	3001      	adds	r0, #1
 8007cec:	d14a      	bne.n	8007d84 <_printf_i+0x1f0>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	b004      	add	sp, #16
 8007cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f043 0320 	orr.w	r3, r3, #32
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	4832      	ldr	r0, [pc, #200]	@ (8007dcc <_printf_i+0x238>)
 8007d02:	2778      	movs	r7, #120	@ 0x78
 8007d04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	6831      	ldr	r1, [r6, #0]
 8007d0c:	061f      	lsls	r7, r3, #24
 8007d0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d12:	d402      	bmi.n	8007d1a <_printf_i+0x186>
 8007d14:	065f      	lsls	r7, r3, #25
 8007d16:	bf48      	it	mi
 8007d18:	b2ad      	uxthmi	r5, r5
 8007d1a:	6031      	str	r1, [r6, #0]
 8007d1c:	07d9      	lsls	r1, r3, #31
 8007d1e:	bf44      	itt	mi
 8007d20:	f043 0320 	orrmi.w	r3, r3, #32
 8007d24:	6023      	strmi	r3, [r4, #0]
 8007d26:	b11d      	cbz	r5, 8007d30 <_printf_i+0x19c>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	e7ad      	b.n	8007c88 <_printf_i+0xf4>
 8007d2c:	4826      	ldr	r0, [pc, #152]	@ (8007dc8 <_printf_i+0x234>)
 8007d2e:	e7e9      	b.n	8007d04 <_printf_i+0x170>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	f023 0320 	bic.w	r3, r3, #32
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	e7f6      	b.n	8007d28 <_printf_i+0x194>
 8007d3a:	4616      	mov	r6, r2
 8007d3c:	e7bd      	b.n	8007cba <_printf_i+0x126>
 8007d3e:	6833      	ldr	r3, [r6, #0]
 8007d40:	6825      	ldr	r5, [r4, #0]
 8007d42:	6961      	ldr	r1, [r4, #20]
 8007d44:	1d18      	adds	r0, r3, #4
 8007d46:	6030      	str	r0, [r6, #0]
 8007d48:	062e      	lsls	r6, r5, #24
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	d501      	bpl.n	8007d52 <_printf_i+0x1be>
 8007d4e:	6019      	str	r1, [r3, #0]
 8007d50:	e002      	b.n	8007d58 <_printf_i+0x1c4>
 8007d52:	0668      	lsls	r0, r5, #25
 8007d54:	d5fb      	bpl.n	8007d4e <_printf_i+0x1ba>
 8007d56:	8019      	strh	r1, [r3, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	e7bc      	b.n	8007cda <_printf_i+0x146>
 8007d60:	6833      	ldr	r3, [r6, #0]
 8007d62:	1d1a      	adds	r2, r3, #4
 8007d64:	6032      	str	r2, [r6, #0]
 8007d66:	681e      	ldr	r6, [r3, #0]
 8007d68:	6862      	ldr	r2, [r4, #4]
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7f8 fa3f 	bl	80001f0 <memchr>
 8007d72:	b108      	cbz	r0, 8007d78 <_printf_i+0x1e4>
 8007d74:	1b80      	subs	r0, r0, r6
 8007d76:	6060      	str	r0, [r4, #4]
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d82:	e7aa      	b.n	8007cda <_printf_i+0x146>
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	4632      	mov	r2, r6
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	47d0      	blx	sl
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d0ad      	beq.n	8007cee <_printf_i+0x15a>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	079b      	lsls	r3, r3, #30
 8007d96:	d413      	bmi.n	8007dc0 <_printf_i+0x22c>
 8007d98:	68e0      	ldr	r0, [r4, #12]
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	4298      	cmp	r0, r3
 8007d9e:	bfb8      	it	lt
 8007da0:	4618      	movlt	r0, r3
 8007da2:	e7a6      	b.n	8007cf2 <_printf_i+0x15e>
 8007da4:	2301      	movs	r3, #1
 8007da6:	4632      	mov	r2, r6
 8007da8:	4649      	mov	r1, r9
 8007daa:	4640      	mov	r0, r8
 8007dac:	47d0      	blx	sl
 8007dae:	3001      	adds	r0, #1
 8007db0:	d09d      	beq.n	8007cee <_printf_i+0x15a>
 8007db2:	3501      	adds	r5, #1
 8007db4:	68e3      	ldr	r3, [r4, #12]
 8007db6:	9903      	ldr	r1, [sp, #12]
 8007db8:	1a5b      	subs	r3, r3, r1
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	dcf2      	bgt.n	8007da4 <_printf_i+0x210>
 8007dbe:	e7eb      	b.n	8007d98 <_printf_i+0x204>
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	f104 0619 	add.w	r6, r4, #25
 8007dc6:	e7f5      	b.n	8007db4 <_printf_i+0x220>
 8007dc8:	08008065 	.word	0x08008065
 8007dcc:	08008076 	.word	0x08008076

08007dd0 <memmove>:
 8007dd0:	4288      	cmp	r0, r1
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	eb01 0402 	add.w	r4, r1, r2
 8007dd8:	d902      	bls.n	8007de0 <memmove+0x10>
 8007dda:	4284      	cmp	r4, r0
 8007ddc:	4623      	mov	r3, r4
 8007dde:	d807      	bhi.n	8007df0 <memmove+0x20>
 8007de0:	1e43      	subs	r3, r0, #1
 8007de2:	42a1      	cmp	r1, r4
 8007de4:	d008      	beq.n	8007df8 <memmove+0x28>
 8007de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dee:	e7f8      	b.n	8007de2 <memmove+0x12>
 8007df0:	4402      	add	r2, r0
 8007df2:	4601      	mov	r1, r0
 8007df4:	428a      	cmp	r2, r1
 8007df6:	d100      	bne.n	8007dfa <memmove+0x2a>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e02:	e7f7      	b.n	8007df4 <memmove+0x24>

08007e04 <_sbrk_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4d06      	ldr	r5, [pc, #24]	@ (8007e20 <_sbrk_r+0x1c>)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	602b      	str	r3, [r5, #0]
 8007e10:	f7f9 f99c 	bl	800114c <_sbrk>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_sbrk_r+0x1a>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_sbrk_r+0x1a>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20004d5c 	.word	0x20004d5c

08007e24 <_realloc_r>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4607      	mov	r7, r0
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	b921      	cbnz	r1, 8007e3a <_realloc_r+0x16>
 8007e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	4611      	mov	r1, r2
 8007e36:	f7ff bc5b 	b.w	80076f0 <_malloc_r>
 8007e3a:	b92a      	cbnz	r2, 8007e48 <_realloc_r+0x24>
 8007e3c:	f7ff fbec 	bl	8007618 <_free_r>
 8007e40:	4625      	mov	r5, r4
 8007e42:	4628      	mov	r0, r5
 8007e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e48:	f000 f81a 	bl	8007e80 <_malloc_usable_size_r>
 8007e4c:	4284      	cmp	r4, r0
 8007e4e:	4606      	mov	r6, r0
 8007e50:	d802      	bhi.n	8007e58 <_realloc_r+0x34>
 8007e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e56:	d8f4      	bhi.n	8007e42 <_realloc_r+0x1e>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f7ff fc48 	bl	80076f0 <_malloc_r>
 8007e60:	4680      	mov	r8, r0
 8007e62:	b908      	cbnz	r0, 8007e68 <_realloc_r+0x44>
 8007e64:	4645      	mov	r5, r8
 8007e66:	e7ec      	b.n	8007e42 <_realloc_r+0x1e>
 8007e68:	42b4      	cmp	r4, r6
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	bf28      	it	cs
 8007e70:	4632      	movcs	r2, r6
 8007e72:	f7ff fbc3 	bl	80075fc <memcpy>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f7ff fbcd 	bl	8007618 <_free_r>
 8007e7e:	e7f1      	b.n	8007e64 <_realloc_r+0x40>

08007e80 <_malloc_usable_size_r>:
 8007e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e84:	1f18      	subs	r0, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfbc      	itt	lt
 8007e8a:	580b      	ldrlt	r3, [r1, r0]
 8007e8c:	18c0      	addlt	r0, r0, r3
 8007e8e:	4770      	bx	lr

08007e90 <_init>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr

08007e9c <_fini>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr
