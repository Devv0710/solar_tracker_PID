
solar_tracker_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005df4  08005df4  00006df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f54  08005f54  00006f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f5c  08005f5c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00006f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f60  08005f60  00006f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005f64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a60  20000010  08005f74  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a70  08005f74  00007a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f48  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003904  00000000  00000000  0001ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00022890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106d  00000000  00000000  00023dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ea  00000000  00000000  00024e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184e4  00000000  00000000  0003e417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a36f3  00000000  00000000  000568fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005880  00000000  00000000  000fa034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ff8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ddc 	.word	0x08005ddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005ddc 	.word	0x08005ddc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051e:	4b3d      	ldr	r3, [pc, #244]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000520:	4a3d      	ldr	r2, [pc, #244]	@ (8000618 <MX_ADC1_Init+0x10c>)
 8000522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000524:	4b3b      	ldr	r3, [pc, #236]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000526:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800052a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800052c:	4b39      	ldr	r3, [pc, #228]	@ (8000614 <MX_ADC1_Init+0x108>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000532:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000534:	2201      	movs	r2, #1
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000538:	4b36      	ldr	r3, [pc, #216]	@ (8000614 <MX_ADC1_Init+0x108>)
 800053a:	2201      	movs	r2, #1
 800053c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053e:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000546:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000548:	2200      	movs	r2, #0
 800054a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054c:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <MX_ADC1_Init+0x108>)
 800054e:	4a33      	ldr	r2, [pc, #204]	@ (800061c <MX_ADC1_Init+0x110>)
 8000550:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000552:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000558:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <MX_ADC1_Init+0x108>)
 800055a:	2205      	movs	r2, #5
 800055c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055e:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000560:	2200      	movs	r2, #0
 8000562:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000566:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_ADC1_Init+0x108>)
 8000568:	2201      	movs	r2, #1
 800056a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056c:	4829      	ldr	r0, [pc, #164]	@ (8000614 <MX_ADC1_Init+0x108>)
 800056e:	f000 fd4f 	bl	8001010 <HAL_ADC_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000578:	f000 fb90 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800057c:	2309      	movs	r3, #9
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000584:	2302      	movs	r3, #2
 8000586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	4821      	ldr	r0, [pc, #132]	@ (8000614 <MX_ADC1_Init+0x108>)
 800058e:	f000 fd83 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000598:	f000 fb80 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800059c:	230a      	movs	r3, #10
 800059e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	481a      	ldr	r0, [pc, #104]	@ (8000614 <MX_ADC1_Init+0x108>)
 80005aa:	f000 fd75 	bl	8001098 <HAL_ADC_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005b4:	f000 fb72 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005b8:	230b      	movs	r3, #11
 80005ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4813      	ldr	r0, [pc, #76]	@ (8000614 <MX_ADC1_Init+0x108>)
 80005c6:	f000 fd67 	bl	8001098 <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005d0:	f000 fb64 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005d4:	230c      	movs	r3, #12
 80005d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_ADC1_Init+0x108>)
 80005e2:	f000 fd59 	bl	8001098 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005ec:	f000 fb56 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005f0:	230d      	movs	r3, #13
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005f4:	2305      	movs	r3, #5
 80005f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_ADC1_Init+0x108>)
 80005fe:	f000 fd4b 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000608:	f000 fb48 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000002c 	.word	0x2000002c
 8000618:	40012000 	.word	0x40012000
 800061c:	0f000001 	.word	0x0f000001

08000620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a24      	ldr	r2, [pc, #144]	@ (80006d0 <HAL_ADC_MspInit+0xb0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d141      	bne.n	80006c6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	4a22      	ldr	r2, [pc, #136]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 800064c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000650:	6453      	str	r3, [r2, #68]	@ 0x44
 8000652:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <HAL_ADC_MspInit+0xb4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LDR_2_Pin|LDR_3_Pin|LDR_4_Pin|LDR_5_Pin;
 8000696:	230f      	movs	r3, #15
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <HAL_ADC_MspInit+0xb8>)
 80006aa:	f000 fff5 	bl	8001698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR_1_Pin;
 80006ae:	2302      	movs	r3, #2
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR_1_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4806      	ldr	r0, [pc, #24]	@ (80006dc <HAL_ADC_MspInit+0xbc>)
 80006c2:	f000 ffe9 	bl	8001698 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020400 	.word	0x40020400

080006e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorAzQueue */
  motorAzQueueHandle = osMessageQueueNew (5, sizeof(int32_t), &motorAzQueue_attributes);
 80006e4:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <MX_FREERTOS_Init+0x68>)
 80006e6:	2104      	movs	r1, #4
 80006e8:	2005      	movs	r0, #5
 80006ea:	f002 fcc4 	bl	8003076 <osMessageQueueNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a16      	ldr	r2, [pc, #88]	@ (800074c <MX_FREERTOS_Init+0x6c>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of motorElQueue */
  motorElQueueHandle = osMessageQueueNew (5, sizeof(int32_t), &motorElQueue_attributes);
 80006f4:	4a16      	ldr	r2, [pc, #88]	@ (8000750 <MX_FREERTOS_Init+0x70>)
 80006f6:	2104      	movs	r1, #4
 80006f8:	2005      	movs	r0, #5
 80006fa:	f002 fcbc 	bl	8003076 <osMessageQueueNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <MX_FREERTOS_Init+0x74>)
 8000702:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000704:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <MX_FREERTOS_Init+0x78>)
 8000706:	2100      	movs	r1, #0
 8000708:	4814      	ldr	r0, [pc, #80]	@ (800075c <MX_FREERTOS_Init+0x7c>)
 800070a:	f002 fc07 	bl	8002f1c <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_FREERTOS_Init+0x80>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of controlTask */
  controlTaskHandle = osThreadNew(ControlTask, NULL, &controlTask_attributes);
 8000714:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <MX_FREERTOS_Init+0x84>)
 8000716:	2100      	movs	r1, #0
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_FREERTOS_Init+0x88>)
 800071a:	f002 fbff 	bl	8002f1c <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_FREERTOS_Init+0x8c>)
 8000722:	6013      	str	r3, [r2, #0]

  /* creation of motorAzTask */
  motorAzTaskHandle = osThreadNew(MotorAzTask, NULL, &motorAzTask_attributes);
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_FREERTOS_Init+0x90>)
 8000726:	2100      	movs	r1, #0
 8000728:	4812      	ldr	r0, [pc, #72]	@ (8000774 <MX_FREERTOS_Init+0x94>)
 800072a:	f002 fbf7 	bl	8002f1c <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <MX_FREERTOS_Init+0x98>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of motorElTask */
  motorElTaskHandle = osThreadNew(MotorElTask, NULL, &motorElTask_attributes);
 8000734:	4a11      	ldr	r2, [pc, #68]	@ (800077c <MX_FREERTOS_Init+0x9c>)
 8000736:	2100      	movs	r1, #0
 8000738:	4811      	ldr	r0, [pc, #68]	@ (8000780 <MX_FREERTOS_Init+0xa0>)
 800073a:	f002 fbef 	bl	8002f1c <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <MX_FREERTOS_Init+0xa4>)
 8000742:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	08005f0c 	.word	0x08005f0c
 800074c:	20000084 	.word	0x20000084
 8000750:	08005f24 	.word	0x08005f24
 8000754:	20000088 	.word	0x20000088
 8000758:	08005e7c 	.word	0x08005e7c
 800075c:	08000789 	.word	0x08000789
 8000760:	20000074 	.word	0x20000074
 8000764:	08005ea0 	.word	0x08005ea0
 8000768:	080007a9 	.word	0x080007a9
 800076c:	20000078 	.word	0x20000078
 8000770:	08005ec4 	.word	0x08005ec4
 8000774:	08000829 	.word	0x08000829
 8000778:	2000007c 	.word	0x2000007c
 800077c:	08005ee8 	.word	0x08005ee8
 8000780:	080008a5 	.word	0x080008a5
 8000784:	20000080 	.word	0x20000080

08000788 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000790:	2120      	movs	r1, #32
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <StartDefaultTask+0x1c>)
 8000794:	f001 f91d 	bl	80019d2 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079c:	f002 fc50 	bl	8003040 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a0:	bf00      	nop
 80007a2:	e7f5      	b.n	8000790 <StartDefaultTask+0x8>
 80007a4:	40020000 	.word	0x40020000

080007a8 <ControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlTask */
	int32_t pasos_az_prueba = 20000;
 80007b0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80007b4:	617b      	str	r3, [r7, #20]
	int32_t pasos_el_prueba = 10000;
 80007b6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007ba:	613b      	str	r3, [r7, #16]
//
//		// 6. Dormir esta tarea por 50ms (para el bucle de control)
//		vTaskDelay(pdMS_TO_TICKS(50));

// Enviar 20000 al motor Azimuth
		osMessageQueuePut(motorAzQueueHandle, &pasos_az_prueba, 0U, 0U);
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <ControlTask+0x70>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	f107 0114 	add.w	r1, r7, #20
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	f002 fcc8 	bl	800315c <osMessageQueuePut>
		// Enviar 10000 al motor Elevación
		osMessageQueuePut(motorElQueueHandle, &pasos_el_prueba, 0U, 0U);
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <ControlTask+0x74>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f107 0110 	add.w	r1, r7, #16
 80007d4:	2300      	movs	r3, #0
 80007d6:	2200      	movs	r2, #0
 80007d8:	f002 fcc0 	bl	800315c <osMessageQueuePut>

		// 2. Dormir 5 segundos (para ver el movimiento)
		osDelay(5000);
 80007dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007e0:	f002 fc2e 	bl	8003040 <osDelay>

		// 3. Enviar órdenes de regreso
		int32_t pasos_az_regreso = -20000;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <ControlTask+0x78>)
 80007e6:	60fb      	str	r3, [r7, #12]
		int32_t pasos_el_regreso = -10000;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <ControlTask+0x7c>)
 80007ea:	60bb      	str	r3, [r7, #8]
		osMessageQueuePut(motorAzQueueHandle, &pasos_az_regreso, 0U, 0U);
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <ControlTask+0x70>)
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	f107 010c 	add.w	r1, r7, #12
 80007f4:	2300      	movs	r3, #0
 80007f6:	2200      	movs	r2, #0
 80007f8:	f002 fcb0 	bl	800315c <osMessageQueuePut>
		osMessageQueuePut(motorElQueueHandle, &pasos_el_regreso, 0U, 0U);
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <ControlTask+0x74>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	f107 0108 	add.w	r1, r7, #8
 8000804:	2300      	movs	r3, #0
 8000806:	2200      	movs	r2, #0
 8000808:	f002 fca8 	bl	800315c <osMessageQueuePut>

		// 4. Dormir 5 segundos
		osDelay(5000);
 800080c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000810:	f002 fc16 	bl	8003040 <osDelay>
	for (;;) {
 8000814:	bf00      	nop
 8000816:	e7d1      	b.n	80007bc <ControlTask+0x14>
 8000818:	20000084 	.word	0x20000084
 800081c:	20000088 	.word	0x20000088
 8000820:	ffffb1e0 	.word	0xffffb1e0
 8000824:	ffffd8f0 	.word	0xffffd8f0

08000828 <MotorAzTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MotorAzTask */
void MotorAzTask(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorAzTask */
	int32_t pasos_a_mover = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
	uint8_t paso_actual_az = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	75fb      	strb	r3, [r7, #23]
	/* Infinite loop */
	for (;;) {
		// 1. Esperar (bloqueado) hasta recibir una orden en la cola de AZIMUTH
		if (osMessageQueueGet(motorAzQueueHandle, &pasos_a_mover, NULL,
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MotorAzTask+0x78>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	f107 0108 	add.w	r1, r7, #8
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	2200      	movs	r2, #0
 8000846:	f002 fce9 	bl	800321c <osMessageQueueGet>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f3      	bne.n	8000838 <MotorAzTask+0x10>
		osWaitForever) == osOK) {

			// 2. Ejecutar la orden
			int32_t pasos_abs =
					(pasos_a_mover > 0) ? pasos_a_mover : -pasos_a_mover;
 8000850:	68bb      	ldr	r3, [r7, #8]
			int32_t pasos_abs =
 8000852:	2b00      	cmp	r3, #0
 8000854:	bfb8      	it	lt
 8000856:	425b      	neglt	r3, r3
 8000858:	60fb      	str	r3, [r7, #12]

			for (int i = 0; i < pasos_abs; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	e019      	b.n	8000894 <MotorAzTask+0x6c>
				if (pasos_a_mover > 0) {
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd08      	ble.n	8000878 <MotorAzTask+0x50>
					paso_actual_az++;
 8000866:	7dfb      	ldrb	r3, [r7, #23]
 8000868:	3301      	adds	r3, #1
 800086a:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_az > 7)
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d905      	bls.n	800087e <MotorAzTask+0x56>
						paso_actual_az = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	75fb      	strb	r3, [r7, #23]
 8000876:	e002      	b.n	800087e <MotorAzTask+0x56>
				} else {
					paso_actual_az--;
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	3b01      	subs	r3, #1
 800087c:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_az < 0)
						paso_actual_az = 7;
				}
				setStep(paso_actual_az, MOTOR_AZIMUTH);
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f84c 	bl	8000920 <setStep>
				osDelay(4);
 8000888:	2004      	movs	r0, #4
 800088a:	f002 fbd9 	bl	8003040 <osDelay>
			for (int i = 0; i < pasos_abs; i++) {
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	3301      	adds	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbe1      	blt.n	8000860 <MotorAzTask+0x38>
		if (osMessageQueueGet(motorAzQueueHandle, &pasos_a_mover, NULL,
 800089c:	e7cc      	b.n	8000838 <MotorAzTask+0x10>
 800089e:	bf00      	nop
 80008a0:	20000084 	.word	0x20000084

080008a4 <MotorElTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MotorElTask */
void MotorElTask(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorElTask */
	int32_t pasos_a_mover = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
	uint8_t paso_actual_el = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
	/* Infinite loop */
	for (;;) {
		if (osMessageQueueGet(motorElQueueHandle, &pasos_a_mover, NULL,
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <MotorElTask+0x78>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	f107 0108 	add.w	r1, r7, #8
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	2200      	movs	r2, #0
 80008c2:	f002 fcab 	bl	800321c <osMessageQueueGet>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f3      	bne.n	80008b4 <MotorElTask+0x10>
		osWaitForever) == osOK) {
			int32_t pasos_abs =
					(pasos_a_mover > 0) ? pasos_a_mover : -pasos_a_mover;
 80008cc:	68bb      	ldr	r3, [r7, #8]
			int32_t pasos_abs =
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bfb8      	it	lt
 80008d2:	425b      	neglt	r3, r3
 80008d4:	60fb      	str	r3, [r7, #12]

			for (int i = 0; i < pasos_abs; i++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	e019      	b.n	8000910 <MotorElTask+0x6c>
				if (pasos_a_mover > 0) {
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dd08      	ble.n	80008f4 <MotorElTask+0x50>
					paso_actual_el++;
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3301      	adds	r3, #1
 80008e6:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_el > 7)
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	2b07      	cmp	r3, #7
 80008ec:	d905      	bls.n	80008fa <MotorElTask+0x56>
						paso_actual_el = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	75fb      	strb	r3, [r7, #23]
 80008f2:	e002      	b.n	80008fa <MotorElTask+0x56>
				} else {
					paso_actual_el--;
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	75fb      	strb	r3, [r7, #23]
					if (paso_actual_el < 0)
						paso_actual_el = 7;
				}
				setStep(paso_actual_el, MOTOR_ELEVATION);
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f80e 	bl	8000920 <setStep>
				osDelay(4);
 8000904:	2004      	movs	r0, #4
 8000906:	f002 fb9b 	bl	8003040 <osDelay>
			for (int i = 0; i < pasos_abs; i++) {
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	3301      	adds	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbe1      	blt.n	80008dc <MotorElTask+0x38>
		if (osMessageQueueGet(motorElQueueHandle, &pasos_a_mover, NULL,
 8000918:	e7cc      	b.n	80008b4 <MotorElTask+0x10>
 800091a:	bf00      	nop
 800091c:	20000088 	.word	0x20000088

08000920 <setStep>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void setStep(uint8_t step, enum Motor_Id motor_id) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
// Asegurarse de que el índice esté en el rango 0-7
	step = step % 8;
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	71fb      	strb	r3, [r7, #7]

	switch (motor_id) {
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d03d      	beq.n	80009ba <setStep+0x9a>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d177      	bne.n	8000a32 <setStep+0x112>
	case MOTOR_AZIMUTH:
		HAL_GPIO_WritePin(M_AZ_1_GPIO_Port, M_AZ_1_Pin,
				step_sequence[step][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a3d      	ldr	r2, [pc, #244]	@ (8000a3c <setStep+0x11c>)
 8000946:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(M_AZ_1_GPIO_Port, M_AZ_1_Pin,
 800094a:	2b00      	cmp	r3, #0
 800094c:	bf14      	ite	ne
 800094e:	2301      	movne	r3, #1
 8000950:	2300      	moveq	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	2101      	movs	r1, #1
 8000958:	4839      	ldr	r0, [pc, #228]	@ (8000a40 <setStep+0x120>)
 800095a:	f001 f821 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_2_GPIO_Port, M_AZ_2_Pin,
				step_sequence[step][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a36      	ldr	r2, [pc, #216]	@ (8000a3c <setStep+0x11c>)
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(M_AZ_2_GPIO_Port, M_AZ_2_Pin,
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	2102      	movs	r1, #2
 8000976:	4832      	ldr	r0, [pc, #200]	@ (8000a40 <setStep+0x120>)
 8000978:	f001 f812 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_3_GPIO_Port, M_AZ_3_Pin,
				step_sequence[step][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <setStep+0x11c>)
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(M_AZ_3_GPIO_Port, M_AZ_3_Pin,
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	2110      	movs	r1, #16
 8000994:	482a      	ldr	r0, [pc, #168]	@ (8000a40 <setStep+0x120>)
 8000996:	f001 f803 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_AZ_4_GPIO_Port, M_AZ_4_Pin,
				step_sequence[step][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <setStep+0x11c>)
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(M_AZ_4_GPIO_Port, M_AZ_4_Pin,
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	2101      	movs	r1, #1
 80009b2:	4824      	ldr	r0, [pc, #144]	@ (8000a44 <setStep+0x124>)
 80009b4:	f000 fff4 	bl	80019a0 <HAL_GPIO_WritePin>
		break;
 80009b8:	e03c      	b.n	8000a34 <setStep+0x114>
	case MOTOR_ELEVATION:
		HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin,
				step_sequence[step][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <setStep+0x11c>)
 80009be:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin,
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf14      	ite	ne
 80009c6:	2301      	movne	r3, #1
 80009c8:	2300      	moveq	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	2180      	movs	r1, #128	@ 0x80
 80009d0:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <setStep+0x128>)
 80009d2:	f000 ffe5 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_2_GPIO_Port, M_EL_2_Pin,
				step_sequence[step][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a18      	ldr	r2, [pc, #96]	@ (8000a3c <setStep+0x11c>)
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(M_EL_2_GPIO_Port, M_EL_2_Pin,
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	2140      	movs	r1, #64	@ 0x40
 80009ee:	4815      	ldr	r0, [pc, #84]	@ (8000a44 <setStep+0x124>)
 80009f0:	f000 ffd6 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_3_GPIO_Port, M_EL_3_Pin,
				step_sequence[step][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <setStep+0x11c>)
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(M_EL_3_GPIO_Port, M_EL_3_Pin,
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <setStep+0x120>)
 8000a0e:	f000 ffc7 	bl	80019a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_EL_4_GPIO_Port, M_EL_4_Pin,
				step_sequence[step][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <setStep+0x11c>)
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(M_EL_4_GPIO_Port, M_EL_4_Pin,
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	2140      	movs	r1, #64	@ 0x40
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <setStep+0x120>)
 8000a2c:	f000 ffb8 	bl	80019a0 <HAL_GPIO_WritePin>
		break;
 8000a30:	e000      	b.n	8000a34 <setStep+0x114>
	default:
		break;
 8000a32:	bf00      	nop
	}
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08005e5c 	.word	0x08005e5c
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020800 	.word	0x40020800

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b3d      	ldr	r3, [pc, #244]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b39      	ldr	r3, [pc, #228]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a38      	ldr	r2, [pc, #224]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b36      	ldr	r3, [pc, #216]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a31      	ldr	r2, [pc, #196]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a2a      	ldr	r2, [pc, #168]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <MX_GPIO_Init+0x11c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_AZ_1_Pin|M_AZ_2_Pin|M_AZ_3_Pin|LD2_Pin
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	21f3      	movs	r1, #243	@ 0xf3
 8000ad6:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <MX_GPIO_Init+0x120>)
 8000ad8:	f000 ff62 	bl	80019a0 <HAL_GPIO_WritePin>
                          |M_EL_4_Pin|M_EL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_AZ_4_Pin|M_EL_2_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2141      	movs	r1, #65	@ 0x41
 8000ae0:	4823      	ldr	r0, [pc, #140]	@ (8000b70 <MX_GPIO_Init+0x124>)
 8000ae2:	f000 ff5d 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EL_1_GPIO_Port, M_EL_1_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	4822      	ldr	r0, [pc, #136]	@ (8000b74 <MX_GPIO_Init+0x128>)
 8000aec:	f000 ff58 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <MX_GPIO_Init+0x128>)
 8000b08:	f000 fdc6 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_AZ_1_Pin M_AZ_2_Pin M_AZ_3_Pin LD2_Pin
                           M_EL_4_Pin M_EL_3_Pin */
  GPIO_InitStruct.Pin = M_AZ_1_Pin|M_AZ_2_Pin|M_AZ_3_Pin|LD2_Pin
 8000b0c:	23f3      	movs	r3, #243	@ 0xf3
 8000b0e:	617b      	str	r3, [r7, #20]
                          |M_EL_4_Pin|M_EL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <MX_GPIO_Init+0x120>)
 8000b24:	f000 fdb8 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_AZ_4_Pin M_EL_2_Pin */
  GPIO_InitStruct.Pin = M_AZ_4_Pin|M_EL_2_Pin;
 8000b28:	2341      	movs	r3, #65	@ 0x41
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <MX_GPIO_Init+0x124>)
 8000b40:	f000 fdaa 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : M_EL_1_Pin */
  GPIO_InitStruct.Pin = M_EL_1_Pin;
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EL_1_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <MX_GPIO_Init+0x128>)
 8000b5c:	f000 fd9c 	bl	8001698 <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	@ 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fa06 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f80e 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f7ff ff62 	bl	8000a4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b88:	f000 f964 	bl	8000e54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b8c:	f7ff fcbe 	bl	800050c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000b90:	f002 f97a 	bl	8002e88 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b94:	f7ff fda4 	bl	80006e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b98:	f002 f99a 	bl	8002ed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <main+0x24>

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	@ 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	@ 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 f8da 	bl	8005d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <SystemClock_Config+0xd0>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <SystemClock_Config+0xd0>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <SystemClock_Config+0xd0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bec:	4a21      	ldr	r2, [pc, #132]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c14:	2310      	movs	r3, #16
 8000c16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 feec 	bl	8001a08 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c36:	f000 f831 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 f94e 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c62:	f000 f81b 	bl	8000c9c <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	@ 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c8a:	f000 f9a1 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010000 	.word	0x40010000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a11      	ldr	r2, [pc, #68]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_MspInit+0x54>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210f      	movs	r1, #15
 8000cea:	f06f 0001 	mvn.w	r0, #1
 8000cee:	f000 fca9 	bl	8001644 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	@ 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_InitTick+0xd0>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d18:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <HAL_InitTick+0xd0>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <HAL_InitTick+0xd0>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fafe 	bl	8002338 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d3c:	f001 fae8 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8000d40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d44:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <HAL_InitTick+0xd4>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d52:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <HAL_InitTick+0xdc>)
 8000d54:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d76:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d78:	f001 fb10 	bl	800239c <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d11b      	bne.n	8000dc2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <HAL_InitTick+0xd8>)
 8000d8c:	f001 fb60 	bl	8002450 <HAL_TIM_Base_Start_IT>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d111      	bne.n	8000dc2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d9e:	2019      	movs	r0, #25
 8000da0:	f000 fc6c 	bl	800167c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d808      	bhi.n	8000dbc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000daa:	2200      	movs	r2, #0
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	2019      	movs	r0, #25
 8000db0:	f000 fc48 	bl	8001644 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_InitTick+0xe0>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e002      	b.n	8000dc2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	2000008c 	.word	0x2000008c
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	20000004 	.word	0x20000004

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e22:	f001 fb77 	bl	8002514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000008c 	.word	0x2000008c

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f001 fcf4 	bl	8002878 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f7ff ff01 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000d4 	.word	0x200000d4
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_UART_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12b      	bne.n	8000f22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0x8c>)
 8000f1e:	f000 fbbb 	bl	8001698 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f3c:	f7ff ff78 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f004 ff07 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fe05 	bl	8000b78 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f7c:	08005f64 	.word	0x08005f64
  ldr r2, =_sbss
 8000f80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f84:	20004a70 	.word	0x20004a70

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 fb3a 	bl	800162e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f7ff fea0 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe72 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	2000011c 	.word	0x2000011c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000011c 	.word	0x2000011c

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff faf6 	bl	8000620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f93a 	bl	80012dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e105      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x228>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d925      	bls.n	8001110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d9      	ldr	r1, [r3, #12]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4403      	add	r3, r0
 8001102:	3b1e      	subs	r3, #30
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	e022      	b.n	8001156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6919      	ldr	r1, [r3, #16]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	2207      	movs	r2, #7
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4403      	add	r3, r0
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d824      	bhi.n	80011a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b05      	subs	r3, #5
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b05      	subs	r3, #5
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	e04c      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d824      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3b23      	subs	r3, #35	@ 0x23
 80011c2:	221f      	movs	r2, #31
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43da      	mvns	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	400a      	ands	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b23      	subs	r3, #35	@ 0x23
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f8:	e023      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b41      	subs	r3, #65	@ 0x41
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b41      	subs	r3, #65	@ 0x41
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <HAL_ADC_ConfigChannel+0x234>)
 8001244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_ADC_ConfigChannel+0x238>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d109      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1cc>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d105      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <HAL_ADC_ConfigChannel+0x238>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d123      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d003      	beq.n	800127e <HAL_ADC_ConfigChannel+0x1e6>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b11      	cmp	r3, #17
 800127c:	d11b      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_ADC_ConfigChannel+0x240>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9a      	lsrs	r2, r3, #18
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e4:	4b79      	ldr	r3, [pc, #484]	@ (80014cc <ADC_Init+0x1f0>)
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	021a      	lsls	r2, r3, #8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136e:	4a58      	ldr	r2, [pc, #352]	@ (80014d0 <ADC_Init+0x1f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d022      	beq.n	80013ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001382:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e00f      	b.n	80013da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0202 	bic.w	r2, r2, #2
 80013e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
 80013f4:	005a      	lsls	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01b      	beq.n	8001440 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001416:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001426:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	035a      	lsls	r2, r3, #13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e007      	b.n	8001450 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	3b01      	subs	r3, #1
 800146c:	051a      	lsls	r2, r3, #20
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6899      	ldr	r1, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001492:	025a      	lsls	r2, r3, #9
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	029a      	lsls	r2, r3, #10
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40012300 	.word	0x40012300
 80014d0:	0f000001 	.word	0x0f000001

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	@ (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff4c 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001656:	f7ff ff61 	bl	800151c <__NVIC_GetPriorityGrouping>
 800165a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	6978      	ldr	r0, [r7, #20]
 8001662:	f7ff ffb1 	bl	80015c8 <NVIC_EncodePriority>
 8001666:	4602      	mov	r2, r0
 8001668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff80 	bl	8001574 <__NVIC_SetPriority>
}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff54 	bl	8001538 <__NVIC_EnableIRQ>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e159      	b.n	8001968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8148 	bne.w	8001962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a2 	beq.w	8001962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b57      	ldr	r3, [pc, #348]	@ (8001980 <HAL_GPIO_Init+0x2e8>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a56      	ldr	r2, [pc, #344]	@ (8001980 <HAL_GPIO_Init+0x2e8>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b54      	ldr	r3, [pc, #336]	@ (8001980 <HAL_GPIO_Init+0x2e8>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_GPIO_Init+0x2ec>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	@ (8001988 <HAL_GPIO_Init+0x2f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x202>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	@ (800198c <HAL_GPIO_Init+0x2f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x1fe>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a47      	ldr	r2, [pc, #284]	@ (8001990 <HAL_GPIO_Init+0x2f8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a46      	ldr	r2, [pc, #280]	@ (8001994 <HAL_GPIO_Init+0x2fc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x1f6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a45      	ldr	r2, [pc, #276]	@ (8001998 <HAL_GPIO_Init+0x300>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x1f2>
 8001886:	2304      	movs	r3, #4
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188a:	2307      	movs	r3, #7
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x204>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	@ (8001984 <HAL_GPIO_Init+0x2ec>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b38      	ldr	r3, [pc, #224]	@ (800199c <HAL_GPIO_Init+0x304>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a2f      	ldr	r2, [pc, #188]	@ (800199c <HAL_GPIO_Init+0x304>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <HAL_GPIO_Init+0x304>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a24      	ldr	r2, [pc, #144]	@ (800199c <HAL_GPIO_Init+0x304>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <HAL_GPIO_Init+0x304>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1a      	ldr	r2, [pc, #104]	@ (800199c <HAL_GPIO_Init+0x304>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_GPIO_Init+0x304>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a0f      	ldr	r2, [pc, #60]	@ (800199c <HAL_GPIO_Init+0x304>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f aea2 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	041a      	lsls	r2, r3, #16
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	400b      	ands	r3, r1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e267      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d075      	beq.n	8001b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b85      	ldr	r3, [pc, #532]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3e:	4b82      	ldr	r3, [pc, #520]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x108>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d157      	bne.n	8001b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e242      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x74>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b70      	ldr	r3, [pc, #448]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6d      	ldr	r3, [pc, #436]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6c      	ldr	r2, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001aa0:	4b69      	ldr	r3, [pc, #420]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b66      	ldr	r3, [pc, #408]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa9a 	bl	8000ff8 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fa96 	bl	8000ff8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	@ 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e207      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5b      	ldr	r3, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xc0>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa86 	bl	8000ff8 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa82 	bl	8000ff8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	@ 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1f3      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b51      	ldr	r3, [pc, #324]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0xe8>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1c7      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fa3b 	bl	8000ff8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff fa37 	bl	8000ff8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1a8      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa1a 	bl	8000ff8 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fa16 	bl	8000ff8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e187      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f9fa 	bl	8000ff8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f9f6 	bl	8000ff8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e167      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x200>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f9e3 	bl	8000ff8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f9df 	bl	8000ff8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e150      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b88      	ldr	r3, [pc, #544]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b81      	ldr	r3, [pc, #516]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7d      	ldr	r3, [pc, #500]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a7c      	ldr	r2, [pc, #496]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b77      	ldr	r3, [pc, #476]	@ (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b74      	ldr	r3, [pc, #464]	@ (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a73      	ldr	r2, [pc, #460]	@ (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f99f 	bl	8000ff8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f99b 	bl	8000ff8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e10c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
 8001ce4:	4b64      	ldr	r3, [pc, #400]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a63      	ldr	r2, [pc, #396]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x30c>
 8001cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	4a5e      	ldr	r2, [pc, #376]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d06:	4b5c      	ldr	r3, [pc, #368]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001d14:	4b58      	ldr	r3, [pc, #352]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a57      	ldr	r2, [pc, #348]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	4b55      	ldr	r3, [pc, #340]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	4a54      	ldr	r2, [pc, #336]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f960 	bl	8000ff8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f95c 	bl	8000ff8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0cb      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b49      	ldr	r3, [pc, #292]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff f94a 	bl	8000ff8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f946 	bl	8000ff8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0b5      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b39      	ldr	r3, [pc, #228]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	4a38      	ldr	r2, [pc, #224]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a1 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d05c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d141      	bne.n	8001e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f91a 	bl	8000ff8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f916 	bl	8000ff8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e087      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b27      	ldr	r3, [pc, #156]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	491b      	ldr	r1, [pc, #108]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8ef 	bl	8000ff8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f8eb 	bl	8000ff8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e05c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x416>
 8001e3c:	e054      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f8d8 	bl	8000ff8 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f8d4 	bl	8000ff8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e045      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
 8001e6a:	e03d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e038      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d028      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d121      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0cc      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b68      	ldr	r3, [pc, #416]	@ (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90c      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b65      	ldr	r3, [pc, #404]	@ (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	@ (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a58      	ldr	r2, [pc, #352]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a52      	ldr	r2, [pc, #328]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d044      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e067      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b37      	ldr	r3, [pc, #220]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4934      	ldr	r1, [pc, #208]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7ff f806 	bl	8000ff8 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7ff f802 	bl	8000ff8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d20c      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4602      	mov	r2, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	490a      	ldr	r1, [pc, #40]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	5ccb      	ldrb	r3, [r1, r3]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fe2e 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08005f3c 	.word	0x08005f3c
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c8:	b094      	sub	sp, #80	@ 0x50
 80020ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020dc:	4b79      	ldr	r3, [pc, #484]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d00d      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x40>
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	f200 80e1 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x34>
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x3a>
 80020f6:	e0db      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b73      	ldr	r3, [pc, #460]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020fc:	e0db      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fe:	4b73      	ldr	r3, [pc, #460]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002100:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002102:	e0d8      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002104:	4b6f      	ldr	r3, [pc, #444]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800210c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210e:	4b6d      	ldr	r3, [pc, #436]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b6a      	ldr	r3, [pc, #424]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	2200      	movs	r2, #0
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002124:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
 8002132:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4621      	mov	r1, r4
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	6139      	str	r1, [r7, #16]
 8002154:	4629      	mov	r1, r5
 8002156:	eb63 0301 	sbc.w	r3, r3, r1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002168:	4659      	mov	r1, fp
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4651      	mov	r1, sl
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4651      	mov	r1, sl
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4651      	mov	r1, sl
 8002178:	ebb2 0801 	subs.w	r8, r2, r1
 800217c:	4659      	mov	r1, fp
 800217e:	eb63 0901 	sbc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	462b      	mov	r3, r5
 80021a4:	eb49 0303 	adc.w	r3, r9, r3
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021b6:	4629      	mov	r1, r5
 80021b8:	024b      	lsls	r3, r1, #9
 80021ba:	4621      	mov	r1, r4
 80021bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c0:	4621      	mov	r1, r4
 80021c2:	024a      	lsls	r2, r1, #9
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021d4:	f7fe f804 	bl	80001e0 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e0:	e058      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	2200      	movs	r2, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	4611      	mov	r1, r2
 80021ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0159      	lsls	r1, r3, #5
 800220a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220e:	0150      	lsls	r0, r2, #5
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4641      	mov	r1, r8
 8002216:	ebb2 0a01 	subs.w	sl, r2, r1
 800221a:	4649      	mov	r1, r9
 800221c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800222c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002234:	ebb2 040a 	subs.w	r4, r2, sl
 8002238:	eb63 050b 	sbc.w	r5, r3, fp
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	00eb      	lsls	r3, r5, #3
 8002246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224a:	00e2      	lsls	r2, r4, #3
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	4643      	mov	r3, r8
 8002252:	18e3      	adds	r3, r4, r3
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	464b      	mov	r3, r9
 8002258:	eb45 0303 	adc.w	r3, r5, r3
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226a:	4629      	mov	r1, r5
 800226c:	028b      	lsls	r3, r1, #10
 800226e:	4621      	mov	r1, r4
 8002270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002274:	4621      	mov	r1, r4
 8002276:	028a      	lsls	r2, r1, #10
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800227e:	2200      	movs	r2, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	61fa      	str	r2, [r7, #28]
 8002284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002288:	f7fd ffaa 	bl	80001e0 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3750      	adds	r7, #80	@ 0x50
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	08005f4c 	.word	0x08005f4c

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffdc 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	08005f4c 	.word	0x08005f4c

08002338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	220f      	movs	r2, #15
 8002346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	08db      	lsrs	r3, r3, #3
 8002372:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <HAL_RCC_GetClockConfig+0x60>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0207 	and.w	r2, r3, #7
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40023c00 	.word	0x40023c00

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e041      	b.n	8002432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f839 	bl	800243a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 f9b2 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e044      	b.n	80024f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1e      	ldr	r2, [pc, #120]	@ (8002500 <HAL_TIM_Base_Start_IT+0xb0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d018      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x6c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002492:	d013      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x6c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1a      	ldr	r2, [pc, #104]	@ (8002504 <HAL_TIM_Base_Start_IT+0xb4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x6c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a19      	ldr	r2, [pc, #100]	@ (8002508 <HAL_TIM_Base_Start_IT+0xb8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x6c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_TIM_Base_Start_IT+0xbc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x6c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_TIM_Base_Start_IT+0xc0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d111      	bne.n	80024e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d010      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024de:	e007      	b.n	80024f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40010000 	.word	0x40010000
 8002504:	40000400 	.word	0x40000400
 8002508:	40000800 	.word	0x40000800
 800250c:	40000c00 	.word	0x40000c00
 8002510:	40014000 	.word	0x40014000

08002514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d020      	beq.n	8002578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8d2 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8c4 	bl	80026f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8d5 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d020      	beq.n	80025c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0204 	mvn.w	r2, #4
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8ac 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f89e 	bl	80026f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8af 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d020      	beq.n	8002610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0208 	mvn.w	r2, #8
 80025e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f886 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f878 	bl	80026f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f889 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d020      	beq.n	800265c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01b      	beq.n	800265c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0210 	mvn.w	r2, #16
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2208      	movs	r2, #8
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f860 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f852 	bl	80026f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f863 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0201 	mvn.w	r2, #1
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fafc 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8e0 	bl	8002864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f834 	bl	8002730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0220 	mvn.w	r2, #32
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8b2 	bl	8002850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a37      	ldr	r2, [pc, #220]	@ (8002834 <TIM_Base_SetConfig+0xf0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00f      	beq.n	800277c <TIM_Base_SetConfig+0x38>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002762:	d00b      	beq.n	800277c <TIM_Base_SetConfig+0x38>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a34      	ldr	r2, [pc, #208]	@ (8002838 <TIM_Base_SetConfig+0xf4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0x38>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a33      	ldr	r2, [pc, #204]	@ (800283c <TIM_Base_SetConfig+0xf8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0x38>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a32      	ldr	r2, [pc, #200]	@ (8002840 <TIM_Base_SetConfig+0xfc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a28      	ldr	r2, [pc, #160]	@ (8002834 <TIM_Base_SetConfig+0xf0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01b      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279c:	d017      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a25      	ldr	r2, [pc, #148]	@ (8002838 <TIM_Base_SetConfig+0xf4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a24      	ldr	r2, [pc, #144]	@ (800283c <TIM_Base_SetConfig+0xf8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00f      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a23      	ldr	r2, [pc, #140]	@ (8002840 <TIM_Base_SetConfig+0xfc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a22      	ldr	r2, [pc, #136]	@ (8002844 <TIM_Base_SetConfig+0x100>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a21      	ldr	r2, [pc, #132]	@ (8002848 <TIM_Base_SetConfig+0x104>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0x8a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a20      	ldr	r2, [pc, #128]	@ (800284c <TIM_Base_SetConfig+0x108>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0c      	ldr	r2, [pc, #48]	@ (8002834 <TIM_Base_SetConfig+0xf0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d103      	bne.n	800280e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800

08002850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e042      	b.n	8002910 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fb02 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2224      	movs	r2, #36	@ 0x24
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f82b 	bl	8002918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800291c:	b0c0      	sub	sp, #256	@ 0x100
 800291e:	af00      	add	r7, sp, #0
 8002920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	68d9      	ldr	r1, [r3, #12]
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	ea40 0301 	orr.w	r3, r0, r1
 8002940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	431a      	orrs	r2, r3
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	431a      	orrs	r2, r3
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002970:	f021 010c 	bic.w	r1, r1, #12
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800297e:	430b      	orrs	r3, r1
 8002980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	6999      	ldr	r1, [r3, #24]
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	ea40 0301 	orr.w	r3, r0, r1
 800299e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b8f      	ldr	r3, [pc, #572]	@ (8002be4 <UART_SetConfig+0x2cc>)
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d005      	beq.n	80029b8 <UART_SetConfig+0xa0>
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b8d      	ldr	r3, [pc, #564]	@ (8002be8 <UART_SetConfig+0x2d0>)
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d104      	bne.n	80029c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b8:	f7ff fcaa 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 80029bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029c0:	e003      	b.n	80029ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c2:	f7ff fc91 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80029c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d4:	f040 810c 	bne.w	8002bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029ea:	4622      	mov	r2, r4
 80029ec:	462b      	mov	r3, r5
 80029ee:	1891      	adds	r1, r2, r2
 80029f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029f2:	415b      	adcs	r3, r3
 80029f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029fa:	4621      	mov	r1, r4
 80029fc:	eb12 0801 	adds.w	r8, r2, r1
 8002a00:	4629      	mov	r1, r5
 8002a02:	eb43 0901 	adc.w	r9, r3, r1
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1a:	4690      	mov	r8, r2
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	4623      	mov	r3, r4
 8002a20:	eb18 0303 	adds.w	r3, r8, r3
 8002a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a28:	462b      	mov	r3, r5
 8002a2a:	eb49 0303 	adc.w	r3, r9, r3
 8002a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a46:	460b      	mov	r3, r1
 8002a48:	18db      	adds	r3, r3, r3
 8002a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	eb42 0303 	adc.w	r3, r2, r3
 8002a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a5c:	f7fd fbc0 	bl	80001e0 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4b61      	ldr	r3, [pc, #388]	@ (8002bec <UART_SetConfig+0x2d4>)
 8002a66:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	011c      	lsls	r4, r3, #4
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a80:	4642      	mov	r2, r8
 8002a82:	464b      	mov	r3, r9
 8002a84:	1891      	adds	r1, r2, r2
 8002a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a88:	415b      	adcs	r3, r3
 8002a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a90:	4641      	mov	r1, r8
 8002a92:	eb12 0a01 	adds.w	sl, r2, r1
 8002a96:	4649      	mov	r1, r9
 8002a98:	eb43 0b01 	adc.w	fp, r3, r1
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab0:	4692      	mov	sl, r2
 8002ab2:	469b      	mov	fp, r3
 8002ab4:	4643      	mov	r3, r8
 8002ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8002aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002adc:	460b      	mov	r3, r1
 8002ade:	18db      	adds	r3, r3, r3
 8002ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	eb42 0303 	adc.w	r3, r2, r3
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002af2:	f7fd fb75 	bl	80001e0 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4611      	mov	r1, r2
 8002afc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <UART_SetConfig+0x2d4>)
 8002afe:	fba3 2301 	umull	r2, r3, r3, r1
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2264      	movs	r2, #100	@ 0x64
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	1acb      	subs	r3, r1, r3
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b12:	4b36      	ldr	r3, [pc, #216]	@ (8002bec <UART_SetConfig+0x2d4>)
 8002b14:	fba3 2302 	umull	r2, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b20:	441c      	add	r4, r3
 8002b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	1891      	adds	r1, r2, r2
 8002b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b3c:	415b      	adcs	r3, r3
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b44:	4641      	mov	r1, r8
 8002b46:	1851      	adds	r1, r2, r1
 8002b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	414b      	adcs	r3, r1
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	00cb      	lsls	r3, r1, #3
 8002b60:	4651      	mov	r1, sl
 8002b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b66:	4651      	mov	r1, sl
 8002b68:	00ca      	lsls	r2, r1, #3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4642      	mov	r2, r8
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b78:	464b      	mov	r3, r9
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	eb42 0303 	adc.w	r3, r2, r3
 8002b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b98:	460b      	mov	r3, r1
 8002b9a:	18db      	adds	r3, r3, r3
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	eb42 0303 	adc.w	r3, r2, r3
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bae:	f7fd fb17 	bl	80001e0 <__aeabi_uldivmod>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <UART_SetConfig+0x2d4>)
 8002bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	2164      	movs	r1, #100	@ 0x64
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	3332      	adds	r3, #50	@ 0x32
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <UART_SetConfig+0x2d4>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	f003 0207 	and.w	r2, r3, #7
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4422      	add	r2, r4
 8002bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be0:	e106      	b.n	8002df0 <UART_SetConfig+0x4d8>
 8002be2:	bf00      	nop
 8002be4:	40011000 	.word	0x40011000
 8002be8:	40011400 	.word	0x40011400
 8002bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c02:	4642      	mov	r2, r8
 8002c04:	464b      	mov	r3, r9
 8002c06:	1891      	adds	r1, r2, r2
 8002c08:	6239      	str	r1, [r7, #32]
 8002c0a:	415b      	adcs	r3, r3
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c12:	4641      	mov	r1, r8
 8002c14:	1854      	adds	r4, r2, r1
 8002c16:	4649      	mov	r1, r9
 8002c18:	eb43 0501 	adc.w	r5, r3, r1
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	00eb      	lsls	r3, r5, #3
 8002c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2a:	00e2      	lsls	r2, r4, #3
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	461d      	mov	r5, r3
 8002c30:	4643      	mov	r3, r8
 8002c32:	18e3      	adds	r3, r4, r3
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c38:	464b      	mov	r3, r9
 8002c3a:	eb45 0303 	adc.w	r3, r5, r3
 8002c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c5e:	4629      	mov	r1, r5
 8002c60:	008b      	lsls	r3, r1, #2
 8002c62:	4621      	mov	r1, r4
 8002c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c68:	4621      	mov	r1, r4
 8002c6a:	008a      	lsls	r2, r1, #2
 8002c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c70:	f7fd fab6 	bl	80001e0 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4b60      	ldr	r3, [pc, #384]	@ (8002dfc <UART_SetConfig+0x4e4>)
 8002c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	011c      	lsls	r4, r3, #4
 8002c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	1891      	adds	r1, r2, r2
 8002c9a:	61b9      	str	r1, [r7, #24]
 8002c9c:	415b      	adcs	r3, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	1851      	adds	r1, r2, r1
 8002ca8:	6139      	str	r1, [r7, #16]
 8002caa:	4649      	mov	r1, r9
 8002cac:	414b      	adcs	r3, r1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	00cb      	lsls	r3, r1, #3
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	00ca      	lsls	r2, r1, #3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cd8:	464b      	mov	r3, r9
 8002cda:	460a      	mov	r2, r1
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	008b      	lsls	r3, r1, #2
 8002d00:	4641      	mov	r1, r8
 8002d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d06:	4641      	mov	r1, r8
 8002d08:	008a      	lsls	r2, r1, #2
 8002d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d0e:	f7fd fa67 	bl	80001e0 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <UART_SetConfig+0x4e4>)
 8002d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2264      	movs	r2, #100	@ 0x64
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	1acb      	subs	r3, r1, r3
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	3332      	adds	r3, #50	@ 0x32
 8002d2c:	4a33      	ldr	r2, [pc, #204]	@ (8002dfc <UART_SetConfig+0x4e4>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d38:	441c      	add	r4, r3
 8002d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d3e:	2200      	movs	r2, #0
 8002d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d48:	4642      	mov	r2, r8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	1891      	adds	r1, r2, r2
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	415b      	adcs	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d58:	4641      	mov	r1, r8
 8002d5a:	1851      	adds	r1, r2, r1
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	4649      	mov	r1, r9
 8002d60:	414b      	adcs	r3, r1
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d70:	4659      	mov	r1, fp
 8002d72:	00cb      	lsls	r3, r1, #3
 8002d74:	4651      	mov	r1, sl
 8002d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	00ca      	lsls	r2, r1, #3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	4642      	mov	r2, r8
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	eb42 0303 	adc.w	r3, r2, r3
 8002d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002dac:	4649      	mov	r1, r9
 8002dae:	008b      	lsls	r3, r1, #2
 8002db0:	4641      	mov	r1, r8
 8002db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db6:	4641      	mov	r1, r8
 8002db8:	008a      	lsls	r2, r1, #2
 8002dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dbe:	f7fd fa0f 	bl	80001e0 <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <UART_SetConfig+0x4e4>)
 8002dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	2164      	movs	r1, #100	@ 0x64
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	3332      	adds	r3, #50	@ 0x32
 8002dda:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <UART_SetConfig+0x4e4>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	f003 020f 	and.w	r2, r3, #15
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4422      	add	r2, r4
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002df6:	46bd      	mov	sp, r7
 8002df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dfc:	51eb851f 	.word	0x51eb851f

08002e00 <__NVIC_SetPriority>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <SysTick_Handler+0x1c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e5c:	f001 ff06 	bl	8004c6c <xTaskGetSchedulerState>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e66:	f002 fcff 	bl	8005868 <xPortSysTickHandler>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f06f 0004 	mvn.w	r0, #4
 8002e7e:	f7ff ffbf 	bl	8002e00 <__NVIC_SetPriority>
#endif
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e8e:	f3ef 8305 	mrs	r3, IPSR
 8002e92:	603b      	str	r3, [r7, #0]
  return(result);
 8002e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e9a:	f06f 0305 	mvn.w	r3, #5
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	e00c      	b.n	8002ebc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <osKernelInitialize+0x44>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <osKernelInitialize+0x44>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e002      	b.n	8002ebc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ebc:	687b      	ldr	r3, [r7, #4]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000120 	.word	0x20000120

08002ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ed6:	f3ef 8305 	mrs	r3, IPSR
 8002eda:	603b      	str	r3, [r7, #0]
  return(result);
 8002edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ee2:	f06f 0305 	mvn.w	r3, #5
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	e010      	b.n	8002f0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <osKernelStart+0x48>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d109      	bne.n	8002f06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ef2:	f7ff ffbf 	bl	8002e74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <osKernelStart+0x48>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002efc:	f001 fa68 	bl	80043d0 <vTaskStartScheduler>
      stat = osOK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	e002      	b.n	8002f0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000120 	.word	0x20000120

08002f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	@ 0x38
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f2c:	f3ef 8305 	mrs	r3, IPSR
 8002f30:	617b      	str	r3, [r7, #20]
  return(result);
 8002f32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17e      	bne.n	8003036 <osThreadNew+0x11a>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d07b      	beq.n	8003036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f42:	2318      	movs	r3, #24
 8002f44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d045      	beq.n	8002fe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <osThreadNew+0x48>
        name = attr->name;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <osThreadNew+0x6e>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b38      	cmp	r3, #56	@ 0x38
 8002f7c:	d805      	bhi.n	8002f8a <osThreadNew+0x6e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <osThreadNew+0x72>
        return (NULL);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e054      	b.n	8003038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <osThreadNew+0xa8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b5b      	cmp	r3, #91	@ 0x5b
 8002fac:	d90a      	bls.n	8002fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <osThreadNew+0xa8>
        mem = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e010      	b.n	8002fe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10c      	bne.n	8002fe6 <osThreadNew+0xca>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <osThreadNew+0xca>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <osThreadNew+0xca>
          mem = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e001      	b.n	8002fe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d110      	bne.n	800300e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ff4:	9202      	str	r2, [sp, #8]
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f001 f808 	bl	8004018 <xTaskCreateStatic>
 8003008:	4603      	mov	r3, r0
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	e013      	b.n	8003036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d110      	bne.n	8003036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	b29a      	uxth	r2, r3
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f001 f856 	bl	80040d8 <xTaskCreate>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <osThreadNew+0x11a>
            hTask = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003036:	693b      	ldr	r3, [r7, #16]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3728      	adds	r7, #40	@ 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003048:	f3ef 8305 	mrs	r3, IPSR
 800304c:	60bb      	str	r3, [r7, #8]
  return(result);
 800304e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <osDelay+0x1c>
    stat = osErrorISR;
 8003054:	f06f 0305 	mvn.w	r3, #5
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e007      	b.n	800306c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f001 f97c 	bl	8004364 <vTaskDelay>
    }
  }

  return (stat);
 800306c:	68fb      	ldr	r3, [r7, #12]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003076:	b580      	push	{r7, lr}
 8003078:	b08a      	sub	sp, #40	@ 0x28
 800307a:	af02      	add	r7, sp, #8
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003086:	f3ef 8305 	mrs	r3, IPSR
 800308a:	613b      	str	r3, [r7, #16]
  return(result);
 800308c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800308e:	2b00      	cmp	r3, #0
 8003090:	d15f      	bne.n	8003152 <osMessageQueueNew+0xdc>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05c      	beq.n	8003152 <osMessageQueueNew+0xdc>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d059      	beq.n	8003152 <osMessageQueueNew+0xdc>
    mem = -1;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d029      	beq.n	80030fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <osMessageQueueNew+0x62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80030b8:	d90e      	bls.n	80030d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <osMessageQueueNew+0x62>
        mem = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e014      	b.n	8003102 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d110      	bne.n	8003102 <osMessageQueueNew+0x8c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10c      	bne.n	8003102 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <osMessageQueueNew+0x8c>
          mem = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e001      	b.n	8003102 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10b      	bne.n	8003120 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2100      	movs	r1, #0
 8003112:	9100      	str	r1, [sp, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa30 	bl	800357c <xQueueGenericCreateStatic>
 800311c:	61f8      	str	r0, [r7, #28]
 800311e:	e008      	b.n	8003132 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003126:	2200      	movs	r2, #0
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 faa3 	bl	8003676 <xQueueGenericCreate>
 8003130:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00c      	beq.n	8003152 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <osMessageQueueNew+0xd0>
        name = attr->name;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e001      	b.n	800314a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800314a:	6979      	ldr	r1, [r7, #20]
 800314c:	69f8      	ldr	r0, [r7, #28]
 800314e:	f000 ff05 	bl	8003f5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003152:	69fb      	ldr	r3, [r7, #28]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003174:	f3ef 8305 	mrs	r3, IPSR
 8003178:	617b      	str	r3, [r7, #20]
  return(result);
 800317a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800317c:	2b00      	cmp	r3, #0
 800317e:	d028      	beq.n	80031d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <osMessageQueuePut+0x36>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <osMessageQueuePut+0x36>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003192:	f06f 0303 	mvn.w	r3, #3
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e038      	b.n	800320c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800319e:	f107 0210 	add.w	r2, r7, #16
 80031a2:	2300      	movs	r3, #0
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	69b8      	ldr	r0, [r7, #24]
 80031a8:	f000 fbc6 	bl	8003938 <xQueueGenericSendFromISR>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d003      	beq.n	80031ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80031b2:	f06f 0302 	mvn.w	r3, #2
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e028      	b.n	800320c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d025      	beq.n	800320c <osMessageQueuePut+0xb0>
 80031c0:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <osMessageQueuePut+0xbc>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	e01c      	b.n	800320c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <osMessageQueuePut+0x82>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80031de:	f06f 0303 	mvn.w	r3, #3
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e012      	b.n	800320c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80031e6:	2300      	movs	r3, #0
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	69b8      	ldr	r0, [r7, #24]
 80031ee:	f000 faa1 	bl	8003734 <xQueueGenericSend>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d009      	beq.n	800320c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80031fe:	f06f 0301 	mvn.w	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	e002      	b.n	800320c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003206:	f06f 0302 	mvn.w	r3, #2
 800320a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800320c:	69fb      	ldr	r3, [r7, #28]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003232:	f3ef 8305 	mrs	r3, IPSR
 8003236:	617b      	str	r3, [r7, #20]
  return(result);
 8003238:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800323a:	2b00      	cmp	r3, #0
 800323c:	d028      	beq.n	8003290 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <osMessageQueueGet+0x34>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <osMessageQueueGet+0x34>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003250:	f06f 0303 	mvn.w	r3, #3
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e037      	b.n	80032c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800325c:	f107 0310 	add.w	r3, r7, #16
 8003260:	461a      	mov	r2, r3
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	69b8      	ldr	r0, [r7, #24]
 8003266:	f000 fce7 	bl	8003c38 <xQueueReceiveFromISR>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d003      	beq.n	8003278 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003270:	f06f 0302 	mvn.w	r3, #2
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	e027      	b.n	80032c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d024      	beq.n	80032c8 <osMessageQueueGet+0xac>
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <osMessageQueueGet+0xb8>)
 8003280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	e01b      	b.n	80032c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <osMessageQueueGet+0x80>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d103      	bne.n	80032a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800329c:	f06f 0303 	mvn.w	r3, #3
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e011      	b.n	80032c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	69b8      	ldr	r0, [r7, #24]
 80032aa:	f000 fbe3 	bl	8003a74 <xQueueReceive>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d009      	beq.n	80032c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80032ba:	f06f 0301 	mvn.w	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	e002      	b.n	80032c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80032c2:	f06f 0302 	mvn.w	r3, #2
 80032c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80032c8:	69fb      	ldr	r3, [r7, #28]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <vApplicationGetIdleTaskMemory+0x2c>)
 80032e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4a06      	ldr	r2, [pc, #24]	@ (8003308 <vApplicationGetIdleTaskMemory+0x30>)
 80032ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2280      	movs	r2, #128	@ 0x80
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000124 	.word	0x20000124
 8003308:	20000180 	.word	0x20000180

0800330c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a07      	ldr	r2, [pc, #28]	@ (8003338 <vApplicationGetTimerTaskMemory+0x2c>)
 800331c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a06      	ldr	r2, [pc, #24]	@ (800333c <vApplicationGetTimerTaskMemory+0x30>)
 8003322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800332a:	601a      	str	r2, [r3, #0]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	20000380 	.word	0x20000380
 800333c:	200003dc 	.word	0x200003dc

08003340 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f103 0208 	add.w	r2, r3, #8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f103 0208 	add.w	r2, r3, #8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 0208 	add.w	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d103      	bne.n	8003402 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e00c      	b.n	800341c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3308      	adds	r3, #8
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e002      	b.n	8003410 <vListInsert+0x2e>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d2f6      	bcs.n	800340a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d103      	bne.n	8003488 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034d4:	f002 f938 	bl	8005748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	3b01      	subs	r3, #1
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	441a      	add	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	22ff      	movs	r2, #255	@ 0xff
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	22ff      	movs	r2, #255	@ 0xff
 8003520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d114      	bne.n	8003554 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01a      	beq.n	8003568 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3310      	adds	r3, #16
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f9d8 	bl	80048ec <xTaskRemoveFromEventList>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d012      	beq.n	8003568 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <xQueueGenericReset+0xd0>)
 8003544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	e009      	b.n	8003568 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3310      	adds	r3, #16
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fef1 	bl	8003340 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3324      	adds	r3, #36	@ 0x24
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff feec 	bl	8003340 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003568:	f002 f920 	bl	80057ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08e      	sub	sp, #56	@ 0x38
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <xQueueGenericCreateStatic+0x56>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <xQueueGenericCreateStatic+0x5a>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <xQueueGenericCreateStatic+0x5c>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <xQueueGenericCreateStatic+0x84>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <xQueueGenericCreateStatic+0x88>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <xQueueGenericCreateStatic+0x8a>
 8003604:	2300      	movs	r3, #0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	61fb      	str	r3, [r7, #28]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003622:	2350      	movs	r3, #80	@ 0x50
 8003624:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b50      	cmp	r3, #80	@ 0x50
 800362a:	d00b      	beq.n	8003644 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61bb      	str	r3, [r7, #24]
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003644:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003658:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f840 	bl	80036ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800366e:	4618      	mov	r0, r3
 8003670:	3730      	adds	r7, #48	@ 0x30
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	@ 0x28
 800367a:	af02      	add	r7, sp, #8
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	4613      	mov	r3, r2
 8003682:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	613b      	str	r3, [r7, #16]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3350      	adds	r3, #80	@ 0x50
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 f96b 	bl	800598c <pvPortMalloc>
 80036b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d011      	beq.n	80036e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3350      	adds	r3, #80	@ 0x50
 80036c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036d0:	79fa      	ldrb	r2, [r7, #7]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f805 	bl	80036ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036e2:	69bb      	ldr	r3, [r7, #24]
	}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e002      	b.n	800370e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800371a:	2101      	movs	r1, #1
 800371c:	69b8      	ldr	r0, [r7, #24]
 800371e:	f7ff fec3 	bl	80034a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08e      	sub	sp, #56	@ 0x38
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <xQueueGenericSend+0x34>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <xQueueGenericSend+0x42>
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <xQueueGenericSend+0x46>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSend+0x48>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <xQueueGenericSend+0x64>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <xQueueGenericSend+0x72>
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <xQueueGenericSend+0x76>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericSend+0x78>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <xQueueGenericSend+0x94>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	623b      	str	r3, [r7, #32]
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037c8:	f001 fa50 	bl	8004c6c <xTaskGetSchedulerState>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <xQueueGenericSend+0xa4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <xQueueGenericSend+0xa8>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <xQueueGenericSend+0xaa>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <xQueueGenericSend+0xc6>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	61fb      	str	r3, [r7, #28]
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	e7fd      	b.n	80037f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037fa:	f001 ffa5 	bl	8005748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <xQueueGenericSend+0xdc>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d129      	bne.n	8003864 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003816:	f000 fa91 	bl	8003d3c <prvCopyDataToQueue>
 800381a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	3324      	adds	r3, #36	@ 0x24
 8003828:	4618      	mov	r0, r3
 800382a:	f001 f85f 	bl	80048ec <xTaskRemoveFromEventList>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003834:	4b3f      	ldr	r3, [pc, #252]	@ (8003934 <xQueueGenericSend+0x200>)
 8003836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	e00a      	b.n	800385c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800384c:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <xQueueGenericSend+0x200>)
 800384e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800385c:	f001 ffa6 	bl	80057ac <vPortExitCritical>
				return pdPASS;
 8003860:	2301      	movs	r3, #1
 8003862:	e063      	b.n	800392c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800386a:	f001 ff9f 	bl	80057ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800386e:	2300      	movs	r3, #0
 8003870:	e05c      	b.n	800392c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f899 	bl	80049b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003882:	2301      	movs	r3, #1
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003886:	f001 ff91 	bl	80057ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800388a:	f000 fe09 	bl	80044a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800388e:	f001 ff5b 	bl	8005748 <vPortEnterCritical>
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003898:	b25b      	sxtb	r3, r3
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d103      	bne.n	80038a8 <xQueueGenericSend+0x174>
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d103      	bne.n	80038be <xQueueGenericSend+0x18a>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038be:	f001 ff75 	bl	80057ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c2:	1d3a      	adds	r2, r7, #4
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 f888 	bl	80049e0 <xTaskCheckForTimeOut>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d124      	bne.n	8003920 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038d8:	f000 fb28 	bl	8003f2c <prvIsQueueFull>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	3310      	adds	r3, #16
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 ffac 	bl	8004848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038f2:	f000 fab3 	bl	8003e5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038f6:	f000 fde1 	bl	80044bc <xTaskResumeAll>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af7c 	bne.w	80037fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003902:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <xQueueGenericSend+0x200>)
 8003904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	e772      	b.n	80037fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003916:	f000 faa1 	bl	8003e5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800391a:	f000 fdcf 	bl	80044bc <xTaskResumeAll>
 800391e:	e76c      	b.n	80037fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003922:	f000 fa9b 	bl	8003e5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003926:	f000 fdc9 	bl	80044bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800392a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800392c:	4618      	mov	r0, r3
 800392e:	3738      	adds	r7, #56	@ 0x38
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b090      	sub	sp, #64	@ 0x40
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <xQueueGenericSendFromISR+0x3e>
 800396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueGenericSendFromISR+0x42>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueGenericSendFromISR+0x44>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d103      	bne.n	80039a6 <xQueueGenericSendFromISR+0x6e>
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <xQueueGenericSendFromISR+0x72>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <xQueueGenericSendFromISR+0x74>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	623b      	str	r3, [r7, #32]
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039c8:	f001 ff9e 	bl	8005908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039cc:	f3ef 8211 	mrs	r2, BASEPRI
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	61fa      	str	r2, [r7, #28]
 80039e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <xQueueGenericSendFromISR+0xc2>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d12f      	bne.n	8003a5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a10:	f000 f994 	bl	8003d3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d112      	bne.n	8003a44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a28:	3324      	adds	r3, #36	@ 0x24
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 ff5e 	bl	80048ec <xTaskRemoveFromEventList>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e007      	b.n	8003a54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	b25a      	sxtb	r2, r3
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003a54:	2301      	movs	r3, #1
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003a58:	e001      	b.n	8003a5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3740      	adds	r7, #64	@ 0x40
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	@ 0x30
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <xQueueReceive+0x32>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	623b      	str	r3, [r7, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <xQueueReceive+0x40>
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <xQueueReceive+0x44>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <xQueueReceive+0x46>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <xQueueReceive+0x62>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	61fb      	str	r3, [r7, #28]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ad6:	f001 f8c9 	bl	8004c6c <xTaskGetSchedulerState>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <xQueueReceive+0x72>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <xQueueReceive+0x76>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueReceive+0x78>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <xQueueReceive+0x94>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	61bb      	str	r3, [r7, #24]
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b08:	f001 fe1e 	bl	8005748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01f      	beq.n	8003b58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b1c:	f000 f978 	bl	8003e10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	1e5a      	subs	r2, r3, #1
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00f      	beq.n	8003b50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	3310      	adds	r3, #16
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fed9 	bl	80048ec <xTaskRemoveFromEventList>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b40:	4b3c      	ldr	r3, [pc, #240]	@ (8003c34 <xQueueReceive+0x1c0>)
 8003b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b50:	f001 fe2c 	bl	80057ac <vPortExitCritical>
				return pdPASS;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e069      	b.n	8003c2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b5e:	f001 fe25 	bl	80057ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e062      	b.n	8003c2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b6c:	f107 0310 	add.w	r3, r7, #16
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 ff1f 	bl	80049b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b7a:	f001 fe17 	bl	80057ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b7e:	f000 fc8f 	bl	80044a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b82:	f001 fde1 	bl	8005748 <vPortEnterCritical>
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d103      	bne.n	8003b9c <xQueueReceive+0x128>
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ba2:	b25b      	sxtb	r3, r3
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d103      	bne.n	8003bb2 <xQueueReceive+0x13e>
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bb2:	f001 fdfb 	bl	80057ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bb6:	1d3a      	adds	r2, r7, #4
 8003bb8:	f107 0310 	add.w	r3, r7, #16
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 ff0e 	bl	80049e0 <xTaskCheckForTimeOut>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d123      	bne.n	8003c12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bcc:	f000 f998 	bl	8003f00 <prvIsQueueEmpty>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d017      	beq.n	8003c06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	3324      	adds	r3, #36	@ 0x24
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fe32 	bl	8004848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003be6:	f000 f939 	bl	8003e5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bea:	f000 fc67 	bl	80044bc <xTaskResumeAll>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d189      	bne.n	8003b08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <xQueueReceive+0x1c0>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	e780      	b.n	8003b08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c08:	f000 f928 	bl	8003e5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c0c:	f000 fc56 	bl	80044bc <xTaskResumeAll>
 8003c10:	e77a      	b.n	8003b08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c14:	f000 f922 	bl	8003e5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c18:	f000 fc50 	bl	80044bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c1e:	f000 f96f 	bl	8003f00 <prvIsQueueEmpty>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f43f af6f 	beq.w	8003b08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3730      	adds	r7, #48	@ 0x30
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	@ 0x38
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	623b      	str	r3, [r7, #32]
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	e7fd      	b.n	8003c62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <xQueueReceiveFromISR+0x3c>
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <xQueueReceiveFromISR+0x40>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <xQueueReceiveFromISR+0x42>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	61fb      	str	r3, [r7, #28]
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	e7fd      	b.n	8003c92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c96:	f001 fe37 	bl	8005908 <vPortValidateInterruptPriority>
	__asm volatile
 8003c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	61ba      	str	r2, [r7, #24]
 8003cb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003cb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02f      	beq.n	8003d22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cd0:	f000 f89e 	bl	8003e10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003cdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d112      	bne.n	8003d0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fdfa 	bl	80048ec <xTaskRemoveFromEventList>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e007      	b.n	8003d1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d10:	3301      	adds	r3, #1
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	b25a      	sxtb	r2, r3
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d20:	e001      	b.n	8003d26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f383 8811 	msr	BASEPRI, r3
}
 8003d30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3738      	adds	r7, #56	@ 0x38
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d14d      	bne.n	8003dfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff9e 	bl	8004ca8 <xTaskPriorityDisinherit>
 8003d6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	e043      	b.n	8003dfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d119      	bne.n	8003db0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6858      	ldr	r0, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	461a      	mov	r2, r3
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	f002 f81a 	bl	8005dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	441a      	add	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d32b      	bcc.n	8003dfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	e026      	b.n	8003dfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68d8      	ldr	r0, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	f002 f800 	bl	8005dc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	425b      	negs	r3, r3
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d207      	bcs.n	8003dec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	425b      	negs	r3, r3
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d105      	bne.n	8003dfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e06:	697b      	ldr	r3, [r7, #20]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d018      	beq.n	8003e54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	441a      	add	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d303      	bcc.n	8003e44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68d9      	ldr	r1, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f001 ffb6 	bl	8005dc0 <memcpy>
	}
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e64:	f001 fc70 	bl	8005748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e70:	e011      	b.n	8003e96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3324      	adds	r3, #36	@ 0x24
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fd34 	bl	80048ec <xTaskRemoveFromEventList>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e8a:	f000 fe0d 	bl	8004aa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dce9      	bgt.n	8003e72 <prvUnlockQueue+0x16>
 8003e9e:	e000      	b.n	8003ea2 <prvUnlockQueue+0x46>
					break;
 8003ea0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	22ff      	movs	r2, #255	@ 0xff
 8003ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003eaa:	f001 fc7f 	bl	80057ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003eae:	f001 fc4b 	bl	8005748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eba:	e011      	b.n	8003ee0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d012      	beq.n	8003eea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd0f 	bl	80048ec <xTaskRemoveFromEventList>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ed4:	f000 fde8 	bl	8004aa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ed8:	7bbb      	ldrb	r3, [r7, #14]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	dce9      	bgt.n	8003ebc <prvUnlockQueue+0x60>
 8003ee8:	e000      	b.n	8003eec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003eea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	22ff      	movs	r2, #255	@ 0xff
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ef4:	f001 fc5a 	bl	80057ac <vPortExitCritical>
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f08:	f001 fc1e 	bl	8005748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e001      	b.n	8003f1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f1e:	f001 fc45 	bl	80057ac <vPortExitCritical>

	return xReturn;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f34:	f001 fc08 	bl	8005748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d102      	bne.n	8003f4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e001      	b.n	8003f4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f4e:	f001 fc2d 	bl	80057ac <vPortExitCritical>

	return xReturn;
 8003f52:	68fb      	ldr	r3, [r7, #12]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e014      	b.n	8003f96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003fac <vQueueAddToRegistry+0x50>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f78:	490c      	ldr	r1, [pc, #48]	@ (8003fac <vQueueAddToRegistry+0x50>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <vQueueAddToRegistry+0x50>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f8e:	e006      	b.n	8003f9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b07      	cmp	r3, #7
 8003f9a:	d9e7      	bls.n	8003f6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	200007dc 	.word	0x200007dc

08003fb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fc0:	f001 fbc2 	bl	8005748 <vPortEnterCritical>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d103      	bne.n	8003fda <vQueueWaitForMessageRestricted+0x2a>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe6:	d103      	bne.n	8003ff0 <vQueueWaitForMessageRestricted+0x40>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff0:	f001 fbdc 	bl	80057ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3324      	adds	r3, #36	@ 0x24
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fc45 	bl	8004894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7ff ff26 	bl	8003e5c <prvUnlockQueue>
	}
 8004010:	bf00      	nop
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08e      	sub	sp, #56	@ 0x38
 800401c:	af04      	add	r7, sp, #16
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <xTaskCreateStatic+0x2c>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	623b      	str	r3, [r7, #32]
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <xTaskCreateStatic+0x4a>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	61fb      	str	r3, [r7, #28]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004062:	235c      	movs	r3, #92	@ 0x5c
 8004064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b5c      	cmp	r3, #92	@ 0x5c
 800406a:	d00b      	beq.n	8004084 <xTaskCreateStatic+0x6c>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004084:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01e      	beq.n	80040ca <xTaskCreateStatic+0xb2>
 800408c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01b      	beq.n	80040ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040a4:	2300      	movs	r3, #0
 80040a6:	9303      	str	r3, [sp, #12]
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f850 	bl	8004162 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040c4:	f000 f8de 	bl	8004284 <prvAddNewTaskToReadyList>
 80040c8:	e001      	b.n	80040ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040ce:	697b      	ldr	r3, [r7, #20]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3728      	adds	r7, #40	@ 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	@ 0x30
 80040dc:	af04      	add	r7, sp, #16
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 fc4d 	bl	800598c <pvPortMalloc>
 80040f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040fa:	205c      	movs	r0, #92	@ 0x5c
 80040fc:	f001 fc46 	bl	800598c <pvPortMalloc>
 8004100:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
 800410e:	e005      	b.n	800411c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004110:	6978      	ldr	r0, [r7, #20]
 8004112:	f001 fd09 	bl	8005b28 <vPortFree>
 8004116:	e001      	b.n	800411c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800412a:	88fa      	ldrh	r2, [r7, #6]
 800412c:	2300      	movs	r3, #0
 800412e:	9303      	str	r3, [sp, #12]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	9302      	str	r3, [sp, #8]
 8004134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f80e 	bl	8004162 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004146:	69f8      	ldr	r0, [r7, #28]
 8004148:	f000 f89c 	bl	8004284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	e002      	b.n	8004158 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004158:	69bb      	ldr	r3, [r7, #24]
	}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b088      	sub	sp, #32
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	461a      	mov	r2, r3
 800417a:	21a5      	movs	r1, #165	@ 0xa5
 800417c:	f001 fdf4 	bl	8005d68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800418a:	3b01      	subs	r3, #1
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f023 0307 	bic.w	r3, r3, #7
 8004198:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	617b      	str	r3, [r7, #20]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01f      	beq.n	8004202 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e012      	b.n	80041ee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	7819      	ldrb	r1, [r3, #0]
 80041d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	3334      	adds	r3, #52	@ 0x34
 80041d8:	460a      	mov	r2, r1
 80041da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d006      	beq.n	80041f6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d9e9      	bls.n	80041c8 <prvInitialiseNewTask+0x66>
 80041f4:	e000      	b.n	80041f8 <prvInitialiseNewTask+0x96>
			{
				break;
 80041f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004200:	e003      	b.n	800420a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	2b37      	cmp	r3, #55	@ 0x37
 800420e:	d901      	bls.n	8004214 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004210:	2337      	movs	r3, #55	@ 0x37
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004218:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800421e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	2200      	movs	r2, #0
 8004224:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	3304      	adds	r3, #4
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff f8a8 	bl	8003380 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	3318      	adds	r3, #24
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f8a3 	bl	8003380 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800423e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004242:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	2200      	movs	r2, #0
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	69b8      	ldr	r0, [r7, #24]
 8004264:	f001 f93e 	bl	80054e4 <pxPortInitialiseStack>
 8004268:	4602      	mov	r2, r0
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800426e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800427a:	bf00      	nop
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800428c:	f001 fa5c 	bl	8005748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004290:	4b2d      	ldr	r3, [pc, #180]	@ (8004348 <prvAddNewTaskToReadyList+0xc4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	4a2c      	ldr	r2, [pc, #176]	@ (8004348 <prvAddNewTaskToReadyList+0xc4>)
 8004298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800429a:	4b2c      	ldr	r3, [pc, #176]	@ (800434c <prvAddNewTaskToReadyList+0xc8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042a2:	4a2a      	ldr	r2, [pc, #168]	@ (800434c <prvAddNewTaskToReadyList+0xc8>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042a8:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <prvAddNewTaskToReadyList+0xc4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d110      	bne.n	80042d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042b0:	f000 fc1e 	bl	8004af0 <prvInitialiseTaskLists>
 80042b4:	e00d      	b.n	80042d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042b6:	4b26      	ldr	r3, [pc, #152]	@ (8004350 <prvAddNewTaskToReadyList+0xcc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042be:	4b23      	ldr	r3, [pc, #140]	@ (800434c <prvAddNewTaskToReadyList+0xc8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d802      	bhi.n	80042d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <prvAddNewTaskToReadyList+0xc8>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <prvAddNewTaskToReadyList+0xd0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <prvAddNewTaskToReadyList+0xd0>)
 80042da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <prvAddNewTaskToReadyList+0xd0>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <prvAddNewTaskToReadyList+0xd4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d903      	bls.n	80042f8 <prvAddNewTaskToReadyList+0x74>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <prvAddNewTaskToReadyList+0xd4>)
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4a15      	ldr	r2, [pc, #84]	@ (800435c <prvAddNewTaskToReadyList+0xd8>)
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7ff f843 	bl	800339a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004314:	f001 fa4a 	bl	80057ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004318:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <prvAddNewTaskToReadyList+0xcc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <prvAddNewTaskToReadyList+0xc8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	429a      	cmp	r2, r3
 800432c:	d207      	bcs.n	800433e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800432e:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <prvAddNewTaskToReadyList+0xdc>)
 8004330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000cf0 	.word	0x20000cf0
 800434c:	2000081c 	.word	0x2000081c
 8004350:	20000cfc 	.word	0x20000cfc
 8004354:	20000d0c 	.word	0x20000d0c
 8004358:	20000cf8 	.word	0x20000cf8
 800435c:	20000820 	.word	0x20000820
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d018      	beq.n	80043a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004376:	4b14      	ldr	r3, [pc, #80]	@ (80043c8 <vTaskDelay+0x64>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <vTaskDelay+0x32>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	60bb      	str	r3, [r7, #8]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004396:	f000 f883 	bl	80044a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800439a:	2100      	movs	r1, #0
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fcf3 	bl	8004d88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043a2:	f000 f88b 	bl	80044bc <xTaskResumeAll>
 80043a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80043ae:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <vTaskDelay+0x68>)
 80043b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000d18 	.word	0x20000d18
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	@ 0x28
 80043d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043de:	463a      	mov	r2, r7
 80043e0:	1d39      	adds	r1, r7, #4
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe ff76 	bl	80032d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	9202      	str	r2, [sp, #8]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	2300      	movs	r3, #0
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	460a      	mov	r2, r1
 80043fe:	4922      	ldr	r1, [pc, #136]	@ (8004488 <vTaskStartScheduler+0xb8>)
 8004400:	4822      	ldr	r0, [pc, #136]	@ (800448c <vTaskStartScheduler+0xbc>)
 8004402:	f7ff fe09 	bl	8004018 <xTaskCreateStatic>
 8004406:	4603      	mov	r3, r0
 8004408:	4a21      	ldr	r2, [pc, #132]	@ (8004490 <vTaskStartScheduler+0xc0>)
 800440a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800440c:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <vTaskStartScheduler+0xc0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004414:	2301      	movs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e001      	b.n	800441e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004424:	f000 fd04 	bl	8004e30 <xTimerCreateTimerTask>
 8004428:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d116      	bne.n	800445e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004444:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <vTaskStartScheduler+0xc4>)
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <vTaskStartScheduler+0xc8>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004452:	4b12      	ldr	r3, [pc, #72]	@ (800449c <vTaskStartScheduler+0xcc>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004458:	f001 f8d2 	bl	8005600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800445c:	e00f      	b.n	800447e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d10b      	bne.n	800447e <vTaskStartScheduler+0xae>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60fb      	str	r3, [r7, #12]
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <vTaskStartScheduler+0xaa>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	08005e44 	.word	0x08005e44
 800448c:	08004ac1 	.word	0x08004ac1
 8004490:	20000d14 	.word	0x20000d14
 8004494:	20000d10 	.word	0x20000d10
 8004498:	20000cfc 	.word	0x20000cfc
 800449c:	20000cf4 	.word	0x20000cf4

080044a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <vTaskSuspendAll+0x18>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a03      	ldr	r2, [pc, #12]	@ (80044b8 <vTaskSuspendAll+0x18>)
 80044ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	20000d18 	.word	0x20000d18

080044bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ca:	4b42      	ldr	r3, [pc, #264]	@ (80045d4 <xTaskResumeAll+0x118>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <xTaskResumeAll+0x2e>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	603b      	str	r3, [r7, #0]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044ea:	f001 f92d 	bl	8005748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044ee:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <xTaskResumeAll+0x118>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4a37      	ldr	r2, [pc, #220]	@ (80045d4 <xTaskResumeAll+0x118>)
 80044f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f8:	4b36      	ldr	r3, [pc, #216]	@ (80045d4 <xTaskResumeAll+0x118>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d162      	bne.n	80045c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004500:	4b35      	ldr	r3, [pc, #212]	@ (80045d8 <xTaskResumeAll+0x11c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05e      	beq.n	80045c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004508:	e02f      	b.n	800456a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450a:	4b34      	ldr	r3, [pc, #208]	@ (80045dc <xTaskResumeAll+0x120>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3318      	adds	r3, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe ff9c 	bl	8003454 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe ff97 	bl	8003454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452a:	4b2d      	ldr	r3, [pc, #180]	@ (80045e0 <xTaskResumeAll+0x124>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d903      	bls.n	800453a <xTaskResumeAll+0x7e>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	4a2a      	ldr	r2, [pc, #168]	@ (80045e0 <xTaskResumeAll+0x124>)
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a27      	ldr	r2, [pc, #156]	@ (80045e4 <xTaskResumeAll+0x128>)
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe ff22 	bl	800339a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455a:	4b23      	ldr	r3, [pc, #140]	@ (80045e8 <xTaskResumeAll+0x12c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004564:	4b21      	ldr	r3, [pc, #132]	@ (80045ec <xTaskResumeAll+0x130>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800456a:	4b1c      	ldr	r3, [pc, #112]	@ (80045dc <xTaskResumeAll+0x120>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cb      	bne.n	800450a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004578:	f000 fb58 	bl	8004c2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800457c:	4b1c      	ldr	r3, [pc, #112]	@ (80045f0 <xTaskResumeAll+0x134>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d010      	beq.n	80045aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004588:	f000 f846 	bl	8004618 <xTaskIncrementTick>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004592:	4b16      	ldr	r3, [pc, #88]	@ (80045ec <xTaskResumeAll+0x130>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3b01      	subs	r3, #1
 800459c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f1      	bne.n	8004588 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80045a4:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <xTaskResumeAll+0x134>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045aa:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <xTaskResumeAll+0x130>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045b2:	2301      	movs	r3, #1
 80045b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <xTaskResumeAll+0x138>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045c6:	f001 f8f1 	bl	80057ac <vPortExitCritical>

	return xAlreadyYielded;
 80045ca:	68bb      	ldr	r3, [r7, #8]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000d18 	.word	0x20000d18
 80045d8:	20000cf0 	.word	0x20000cf0
 80045dc:	20000cb0 	.word	0x20000cb0
 80045e0:	20000cf8 	.word	0x20000cf8
 80045e4:	20000820 	.word	0x20000820
 80045e8:	2000081c 	.word	0x2000081c
 80045ec:	20000d04 	.word	0x20000d04
 80045f0:	20000d00 	.word	0x20000d00
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <xTaskGetTickCount+0x1c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000cf4 	.word	0x20000cf4

08004618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004622:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <xTaskIncrementTick+0x148>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8090 	bne.w	800474c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800462c:	4b4d      	ldr	r3, [pc, #308]	@ (8004764 <xTaskIncrementTick+0x14c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004634:	4a4b      	ldr	r2, [pc, #300]	@ (8004764 <xTaskIncrementTick+0x14c>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d121      	bne.n	8004684 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004640:	4b49      	ldr	r3, [pc, #292]	@ (8004768 <xTaskIncrementTick+0x150>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <xTaskIncrementTick+0x4a>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <xTaskIncrementTick+0x46>
 8004662:	4b41      	ldr	r3, [pc, #260]	@ (8004768 <xTaskIncrementTick+0x150>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	4b40      	ldr	r3, [pc, #256]	@ (800476c <xTaskIncrementTick+0x154>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3e      	ldr	r2, [pc, #248]	@ (8004768 <xTaskIncrementTick+0x150>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4a3e      	ldr	r2, [pc, #248]	@ (800476c <xTaskIncrementTick+0x154>)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b3e      	ldr	r3, [pc, #248]	@ (8004770 <xTaskIncrementTick+0x158>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a3c      	ldr	r2, [pc, #240]	@ (8004770 <xTaskIncrementTick+0x158>)
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	f000 fad4 	bl	8004c2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004684:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <xTaskIncrementTick+0x15c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d349      	bcc.n	8004722 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468e:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <xTaskIncrementTick+0x150>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004698:	4b36      	ldr	r3, [pc, #216]	@ (8004774 <xTaskIncrementTick+0x15c>)
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	601a      	str	r2, [r3, #0]
					break;
 80046a0:	e03f      	b.n	8004722 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a2:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <xTaskIncrementTick+0x150>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d203      	bcs.n	80046c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004774 <xTaskIncrementTick+0x15c>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046c0:	e02f      	b.n	8004722 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fec4 	bl	8003454 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	3318      	adds	r3, #24
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe febb 	bl	8003454 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e2:	4b25      	ldr	r3, [pc, #148]	@ (8004778 <xTaskIncrementTick+0x160>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d903      	bls.n	80046f2 <xTaskIncrementTick+0xda>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <xTaskIncrementTick+0x160>)
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <xTaskIncrementTick+0x164>)
 8004700:	441a      	add	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	3304      	adds	r3, #4
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7fe fe46 	bl	800339a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <xTaskIncrementTick+0x168>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	429a      	cmp	r2, r3
 800471a:	d3b8      	bcc.n	800468e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800471c:	2301      	movs	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004720:	e7b5      	b.n	800468e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004722:	4b17      	ldr	r3, [pc, #92]	@ (8004780 <xTaskIncrementTick+0x168>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004728:	4914      	ldr	r1, [pc, #80]	@ (800477c <xTaskIncrementTick+0x164>)
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d901      	bls.n	800473e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800473e:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <xTaskIncrementTick+0x16c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004746:	2301      	movs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e004      	b.n	8004756 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800474c:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <xTaskIncrementTick+0x170>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a0d      	ldr	r2, [pc, #52]	@ (8004788 <xTaskIncrementTick+0x170>)
 8004754:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004756:	697b      	ldr	r3, [r7, #20]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000d18 	.word	0x20000d18
 8004764:	20000cf4 	.word	0x20000cf4
 8004768:	20000ca8 	.word	0x20000ca8
 800476c:	20000cac 	.word	0x20000cac
 8004770:	20000d08 	.word	0x20000d08
 8004774:	20000d10 	.word	0x20000d10
 8004778:	20000cf8 	.word	0x20000cf8
 800477c:	20000820 	.word	0x20000820
 8004780:	2000081c 	.word	0x2000081c
 8004784:	20000d04 	.word	0x20000d04
 8004788:	20000d00 	.word	0x20000d00

0800478c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004792:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <vTaskSwitchContext+0xa8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800479a:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <vTaskSwitchContext+0xac>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047a0:	e042      	b.n	8004828 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80047a2:	4b25      	ldr	r3, [pc, #148]	@ (8004838 <vTaskSwitchContext+0xac>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a8:	4b24      	ldr	r3, [pc, #144]	@ (800483c <vTaskSwitchContext+0xb0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e011      	b.n	80047d4 <vTaskSwitchContext+0x48>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <vTaskSwitchContext+0x42>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	607b      	str	r3, [r7, #4]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <vTaskSwitchContext+0x3e>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	491a      	ldr	r1, [pc, #104]	@ (8004840 <vTaskSwitchContext+0xb4>)
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0e3      	beq.n	80047b0 <vTaskSwitchContext+0x24>
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <vTaskSwitchContext+0xb4>)
 80047f4:	4413      	add	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	3308      	adds	r3, #8
 800480a:	429a      	cmp	r2, r3
 800480c:	d104      	bne.n	8004818 <vTaskSwitchContext+0x8c>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <vTaskSwitchContext+0xb8>)
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4a06      	ldr	r2, [pc, #24]	@ (800483c <vTaskSwitchContext+0xb0>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20000d18 	.word	0x20000d18
 8004838:	20000d04 	.word	0x20000d04
 800483c:	20000cf8 	.word	0x20000cf8
 8004840:	20000820 	.word	0x20000820
 8004844:	2000081c 	.word	0x2000081c

08004848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60fb      	str	r3, [r7, #12]
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <vTaskPlaceOnEventList+0x48>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3318      	adds	r3, #24
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fe fdb2 	bl	80033e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800487e:	2101      	movs	r1, #1
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	f000 fa81 	bl	8004d88 <prvAddCurrentTaskToDelayedList>
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2000081c 	.word	0x2000081c

08004894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	617b      	str	r3, [r7, #20]
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048be:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3318      	adds	r3, #24
 80048c4:	4619      	mov	r1, r3
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7fe fd67 	bl	800339a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	f000 fa54 	bl	8004d88 <prvAddCurrentTaskToDelayedList>
	}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	2000081c 	.word	0x2000081c

080048ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60fb      	str	r3, [r7, #12]
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3318      	adds	r3, #24
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fd98 	bl	8003454 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004924:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <xTaskRemoveFromEventList+0xb0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11d      	bne.n	8004968 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3304      	adds	r3, #4
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fd8f 	bl	8003454 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493a:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <xTaskRemoveFromEventList+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d903      	bls.n	800494a <xTaskRemoveFromEventList+0x5e>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	4a16      	ldr	r2, [pc, #88]	@ (80049a0 <xTaskRemoveFromEventList+0xb4>)
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4a13      	ldr	r2, [pc, #76]	@ (80049a4 <xTaskRemoveFromEventList+0xb8>)
 8004958:	441a      	add	r2, r3
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f7fe fd1a 	bl	800339a <vListInsertEnd>
 8004966:	e005      	b.n	8004974 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	3318      	adds	r3, #24
 800496c:	4619      	mov	r1, r3
 800496e:	480e      	ldr	r0, [pc, #56]	@ (80049a8 <xTaskRemoveFromEventList+0xbc>)
 8004970:	f7fe fd13 	bl	800339a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <xTaskRemoveFromEventList+0xc0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	429a      	cmp	r2, r3
 8004980:	d905      	bls.n	800498e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004982:	2301      	movs	r3, #1
 8004984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004986:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <xTaskRemoveFromEventList+0xc4>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e001      	b.n	8004992 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004992:	697b      	ldr	r3, [r7, #20]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000d18 	.word	0x20000d18
 80049a0:	20000cf8 	.word	0x20000cf8
 80049a4:	20000820 	.word	0x20000820
 80049a8:	20000cb0 	.word	0x20000cb0
 80049ac:	2000081c 	.word	0x2000081c
 80049b0:	20000d04 	.word	0x20000d04

080049b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049bc:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <vTaskInternalSetTimeOutState+0x24>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <vTaskInternalSetTimeOutState+0x28>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	605a      	str	r2, [r3, #4]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000d08 	.word	0x20000d08
 80049dc:	20000cf4 	.word	0x20000cf4

080049e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60fb      	str	r3, [r7, #12]
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a26:	f000 fe8f 	bl	8005748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <xTaskCheckForTimeOut+0xc0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d102      	bne.n	8004a4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	e023      	b.n	8004a92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <xTaskCheckForTimeOut+0xc4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d007      	beq.n	8004a66 <xTaskCheckForTimeOut+0x86>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a60:	2301      	movs	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	e015      	b.n	8004a92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d20b      	bcs.n	8004a88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff99 	bl	80049b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e004      	b.n	8004a92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a92:	f000 fe8b 	bl	80057ac <vPortExitCritical>

	return xReturn;
 8004a96:	69fb      	ldr	r3, [r7, #28]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000cf4 	.word	0x20000cf4
 8004aa4:	20000d08 	.word	0x20000d08

08004aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <vTaskMissedYield+0x14>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000d04 	.word	0x20000d04

08004ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ac8:	f000 f852 	bl	8004b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <prvIdleTask+0x28>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d9f9      	bls.n	8004ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ad4:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <prvIdleTask+0x2c>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ae4:	e7f0      	b.n	8004ac8 <prvIdleTask+0x8>
 8004ae6:	bf00      	nop
 8004ae8:	20000820 	.word	0x20000820
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	e00c      	b.n	8004b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4a12      	ldr	r2, [pc, #72]	@ (8004b50 <prvInitialiseTaskLists+0x60>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fc18 	bl	8003340 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3301      	adds	r3, #1
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b37      	cmp	r3, #55	@ 0x37
 8004b1a:	d9ef      	bls.n	8004afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b1c:	480d      	ldr	r0, [pc, #52]	@ (8004b54 <prvInitialiseTaskLists+0x64>)
 8004b1e:	f7fe fc0f 	bl	8003340 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b22:	480d      	ldr	r0, [pc, #52]	@ (8004b58 <prvInitialiseTaskLists+0x68>)
 8004b24:	f7fe fc0c 	bl	8003340 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b28:	480c      	ldr	r0, [pc, #48]	@ (8004b5c <prvInitialiseTaskLists+0x6c>)
 8004b2a:	f7fe fc09 	bl	8003340 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b2e:	480c      	ldr	r0, [pc, #48]	@ (8004b60 <prvInitialiseTaskLists+0x70>)
 8004b30:	f7fe fc06 	bl	8003340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b34:	480b      	ldr	r0, [pc, #44]	@ (8004b64 <prvInitialiseTaskLists+0x74>)
 8004b36:	f7fe fc03 	bl	8003340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <prvInitialiseTaskLists+0x78>)
 8004b3c:	4a05      	ldr	r2, [pc, #20]	@ (8004b54 <prvInitialiseTaskLists+0x64>)
 8004b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <prvInitialiseTaskLists+0x7c>)
 8004b42:	4a05      	ldr	r2, [pc, #20]	@ (8004b58 <prvInitialiseTaskLists+0x68>)
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000820 	.word	0x20000820
 8004b54:	20000c80 	.word	0x20000c80
 8004b58:	20000c94 	.word	0x20000c94
 8004b5c:	20000cb0 	.word	0x20000cb0
 8004b60:	20000cc4 	.word	0x20000cc4
 8004b64:	20000cdc 	.word	0x20000cdc
 8004b68:	20000ca8 	.word	0x20000ca8
 8004b6c:	20000cac 	.word	0x20000cac

08004b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b76:	e019      	b.n	8004bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b78:	f000 fde6 	bl	8005748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7c:	4b10      	ldr	r3, [pc, #64]	@ (8004bc0 <prvCheckTasksWaitingTermination+0x50>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe fc63 	bl	8003454 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <prvCheckTasksWaitingTermination+0x54>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc4 <prvCheckTasksWaitingTermination+0x54>)
 8004b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <prvCheckTasksWaitingTermination+0x58>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <prvCheckTasksWaitingTermination+0x58>)
 8004ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ba2:	f000 fe03 	bl	80057ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f810 	bl	8004bcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <prvCheckTasksWaitingTermination+0x58>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e1      	bne.n	8004b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000cc4 	.word	0x20000cc4
 8004bc4:	20000cf0 	.word	0x20000cf0
 8004bc8:	20000cd8 	.word	0x20000cd8

08004bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 ffa0 	bl	8005b28 <vPortFree>
				vPortFree( pxTCB );
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 ff9d 	bl	8005b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bee:	e019      	b.n	8004c24 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d103      	bne.n	8004c02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 ff94 	bl	8005b28 <vPortFree>
	}
 8004c00:	e010      	b.n	8004c24 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d00b      	beq.n	8004c24 <prvDeleteTCB+0x58>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60fb      	str	r3, [r7, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <prvDeleteTCB+0x54>
	}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c32:	4b0c      	ldr	r3, [pc, #48]	@ (8004c64 <prvResetNextTaskUnblockTime+0x38>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <prvResetNextTaskUnblockTime+0x3c>)
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c44:	e008      	b.n	8004c58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c46:	4b07      	ldr	r3, [pc, #28]	@ (8004c64 <prvResetNextTaskUnblockTime+0x38>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a04      	ldr	r2, [pc, #16]	@ (8004c68 <prvResetNextTaskUnblockTime+0x3c>)
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20000ca8 	.word	0x20000ca8
 8004c68:	20000d10 	.word	0x20000d10

08004c6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <xTaskGetSchedulerState+0x34>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	e008      	b.n	8004c92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c80:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <xTaskGetSchedulerState+0x38>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	e001      	b.n	8004c92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c92:	687b      	ldr	r3, [r7, #4]
	}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20000cfc 	.word	0x20000cfc
 8004ca4:	20000d18 	.word	0x20000d18

08004ca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d058      	beq.n	8004d70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8004d7c <xTaskPriorityDisinherit+0xd4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d00b      	beq.n	8004ce0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60bb      	str	r3, [r7, #8]
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d04:	1e5a      	subs	r2, r3, #1
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d02c      	beq.n	8004d70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d128      	bne.n	8004d70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fb96 	bl	8003454 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d40:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <xTaskPriorityDisinherit+0xd8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <xTaskPriorityDisinherit+0xa8>
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d80 <xTaskPriorityDisinherit+0xd8>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4a09      	ldr	r2, [pc, #36]	@ (8004d84 <xTaskPriorityDisinherit+0xdc>)
 8004d5e:	441a      	add	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fe fb17 	bl	800339a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d70:	697b      	ldr	r3, [r7, #20]
	}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2000081c 	.word	0x2000081c
 8004d80:	20000cf8 	.word	0x20000cf8
 8004d84:	20000820 	.word	0x20000820

08004d88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d92:	4b21      	ldr	r3, [pc, #132]	@ (8004e18 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d98:	4b20      	ldr	r3, [pc, #128]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fb58 	bl	8003454 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d10a      	bne.n	8004dc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4819      	ldr	r0, [pc, #100]	@ (8004e20 <prvAddCurrentTaskToDelayedList+0x98>)
 8004dbc:	f7fe faed 	bl	800339a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dc0:	e026      	b.n	8004e10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dca:	4b14      	ldr	r3, [pc, #80]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d209      	bcs.n	8004dee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b0f      	ldr	r3, [pc, #60]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f7fe fafb 	bl	80033e2 <vListInsert>
}
 8004dec:	e010      	b.n	8004e10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dee:	4b0e      	ldr	r3, [pc, #56]	@ (8004e28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fe faf1 	bl	80033e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e00:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d202      	bcs.n	8004e10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e0a:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20000cf4 	.word	0x20000cf4
 8004e1c:	2000081c 	.word	0x2000081c
 8004e20:	20000cdc 	.word	0x20000cdc
 8004e24:	20000cac 	.word	0x20000cac
 8004e28:	20000ca8 	.word	0x20000ca8
 8004e2c:	20000d10 	.word	0x20000d10

08004e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	@ 0x28
 8004e34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e3a:	f000 fb13 	bl	8005464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb4 <xTimerCreateTimerTask+0x84>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d021      	beq.n	8004e8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e4e:	1d3a      	adds	r2, r7, #4
 8004e50:	f107 0108 	add.w	r1, r7, #8
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fa57 	bl	800330c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	9202      	str	r2, [sp, #8]
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	2302      	movs	r3, #2
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	460a      	mov	r2, r1
 8004e70:	4911      	ldr	r1, [pc, #68]	@ (8004eb8 <xTimerCreateTimerTask+0x88>)
 8004e72:	4812      	ldr	r0, [pc, #72]	@ (8004ebc <xTimerCreateTimerTask+0x8c>)
 8004e74:	f7ff f8d0 	bl	8004018 <xTaskCreateStatic>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a11      	ldr	r2, [pc, #68]	@ (8004ec0 <xTimerCreateTimerTask+0x90>)
 8004e7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <xTimerCreateTimerTask+0x90>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e86:	2301      	movs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	613b      	str	r3, [r7, #16]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ea8:	697b      	ldr	r3, [r7, #20]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000d4c 	.word	0x20000d4c
 8004eb8:	08005e4c 	.word	0x08005e4c
 8004ebc:	08004ffd 	.word	0x08004ffd
 8004ec0:	20000d50 	.word	0x20000d50

08004ec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	@ 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	623b      	str	r3, [r7, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ef4:	4b19      	ldr	r3, [pc, #100]	@ (8004f5c <xTimerGenericCommand+0x98>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02a      	beq.n	8004f52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	dc18      	bgt.n	8004f40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f0e:	f7ff fead 	bl	8004c6c <xTaskGetSchedulerState>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d109      	bne.n	8004f2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f18:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <xTimerGenericCommand+0x98>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	f107 0110 	add.w	r1, r7, #16
 8004f20:	2300      	movs	r3, #0
 8004f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f24:	f7fe fc06 	bl	8003734 <xQueueGenericSend>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f2a:	e012      	b.n	8004f52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <xTimerGenericCommand+0x98>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	f107 0110 	add.w	r1, r7, #16
 8004f34:	2300      	movs	r3, #0
 8004f36:	2200      	movs	r2, #0
 8004f38:	f7fe fbfc 	bl	8003734 <xQueueGenericSend>
 8004f3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f3e:	e008      	b.n	8004f52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f40:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <xTimerGenericCommand+0x98>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	f107 0110 	add.w	r1, r7, #16
 8004f48:	2300      	movs	r3, #0
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	f7fe fcf4 	bl	8003938 <xQueueGenericSendFromISR>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3728      	adds	r7, #40	@ 0x28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000d4c 	.word	0x20000d4c

08004f60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <prvProcessExpiredTimer+0x98>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe fa6b 	bl	8003454 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d023      	beq.n	8004fd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	18d1      	adds	r1, r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	6978      	ldr	r0, [r7, #20]
 8004f9a:	f000 f8d5 	bl	8005148 <prvInsertTimerInActiveList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	2100      	movs	r1, #0
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f7ff ff88 	bl	8004ec4 <xTimerGenericCommand>
 8004fb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d114      	bne.n	8004fe6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	4798      	blx	r3
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000d44 	.word	0x20000d44

08004ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f859 	bl	80050c0 <prvGetNextExpireTime>
 800500e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4619      	mov	r1, r3
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f805 	bl	8005024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800501a:	f000 f8d7 	bl	80051cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800501e:	bf00      	nop
 8005020:	e7f0      	b.n	8005004 <prvTimerTask+0x8>
	...

08005024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800502e:	f7ff fa37 	bl	80044a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f866 	bl	8005108 <prvSampleTimeNow>
 800503c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d130      	bne.n	80050a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <prvProcessTimerOrBlockTask+0x3c>
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	429a      	cmp	r2, r3
 8005050:	d806      	bhi.n	8005060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005052:	f7ff fa33 	bl	80044bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff81 	bl	8004f60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800505e:	e024      	b.n	80050aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005066:	4b13      	ldr	r3, [pc, #76]	@ (80050b4 <prvProcessTimerOrBlockTask+0x90>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <prvProcessTimerOrBlockTask+0x50>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <prvProcessTimerOrBlockTask+0x52>
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005078:	4b0f      	ldr	r3, [pc, #60]	@ (80050b8 <prvProcessTimerOrBlockTask+0x94>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	f7fe ff93 	bl	8003fb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800508a:	f7ff fa17 	bl	80044bc <xTaskResumeAll>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005094:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <prvProcessTimerOrBlockTask+0x98>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
}
 80050a4:	e001      	b.n	80050aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050a6:	f7ff fa09 	bl	80044bc <xTaskResumeAll>
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000d48 	.word	0x20000d48
 80050b8:	20000d4c 	.word	0x20000d4c
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <prvGetNextExpireTime+0x44>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <prvGetNextExpireTime+0x16>
 80050d2:	2201      	movs	r2, #1
 80050d4:	e000      	b.n	80050d8 <prvGetNextExpireTime+0x18>
 80050d6:	2200      	movs	r2, #0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050e4:	4b07      	ldr	r3, [pc, #28]	@ (8005104 <prvGetNextExpireTime+0x44>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e001      	b.n	80050f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000d44 	.word	0x20000d44

08005108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005110:	f7ff fa72 	bl	80045f8 <xTaskGetTickCount>
 8005114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <prvSampleTimeNow+0x3c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d205      	bcs.n	800512c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005120:	f000 f93a 	bl	8005398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e002      	b.n	8005132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005132:	4a04      	ldr	r2, [pc, #16]	@ (8005144 <prvSampleTimeNow+0x3c>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000d54 	.word	0x20000d54

08005148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d812      	bhi.n	8005194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e01b      	b.n	80051ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <prvInsertTimerInActiveList+0x7c>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fe f928 	bl	80033e2 <vListInsert>
 8005192:	e012      	b.n	80051ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d206      	bcs.n	80051aa <prvInsertTimerInActiveList+0x62>
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d302      	bcc.n	80051aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e007      	b.n	80051ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051aa:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <prvInsertTimerInActiveList+0x80>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe f914 	bl	80033e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051ba:	697b      	ldr	r3, [r7, #20]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000d48 	.word	0x20000d48
 80051c8:	20000d44 	.word	0x20000d44

080051cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08e      	sub	sp, #56	@ 0x38
 80051d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051d2:	e0ce      	b.n	8005372 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da19      	bge.n	800520e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	3304      	adds	r3, #4
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61fb      	str	r3, [r7, #28]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005204:	6850      	ldr	r0, [r2, #4]
 8005206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	4611      	mov	r1, r2
 800520c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f2c0 80ae 	blt.w	8005372 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	3304      	adds	r3, #4
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe f914 	bl	8003454 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800522c:	463b      	mov	r3, r7
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff ff6a 	bl	8005108 <prvSampleTimeNow>
 8005234:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b09      	cmp	r3, #9
 800523a:	f200 8097 	bhi.w	800536c <prvProcessReceivedCommands+0x1a0>
 800523e:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <prvProcessReceivedCommands+0x78>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	0800526d 	.word	0x0800526d
 8005248:	0800526d 	.word	0x0800526d
 800524c:	0800526d 	.word	0x0800526d
 8005250:	080052e3 	.word	0x080052e3
 8005254:	080052f7 	.word	0x080052f7
 8005258:	08005343 	.word	0x08005343
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800526d 	.word	0x0800526d
 8005264:	080052e3 	.word	0x080052e3
 8005268:	080052f7 	.word	0x080052f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	18d1      	adds	r1, r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800528c:	f7ff ff5c 	bl	8005148 <prvInsertTimerInActiveList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d06c      	beq.n	8005370 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800529c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d061      	beq.n	8005370 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	441a      	add	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	2100      	movs	r1, #0
 80052bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052be:	f7ff fe01 	bl	8004ec4 <xTimerGenericCommand>
 80052c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d152      	bne.n	8005370 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	61bb      	str	r3, [r7, #24]
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	e7fd      	b.n	80052de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80052f4:	e03d      	b.n	8005372 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	617b      	str	r3, [r7, #20]
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	e7fd      	b.n	800532a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	18d1      	adds	r1, r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800533c:	f7ff ff04 	bl	8005148 <prvInsertTimerInActiveList>
					break;
 8005340:	e017      	b.n	8005372 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005352:	f000 fbe9 	bl	8005b28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005356:	e00c      	b.n	8005372 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800536a:	e002      	b.n	8005372 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800536c:	bf00      	nop
 800536e:	e000      	b.n	8005372 <prvProcessReceivedCommands+0x1a6>
					break;
 8005370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005372:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <prvProcessReceivedCommands+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	1d39      	adds	r1, r7, #4
 8005378:	2200      	movs	r2, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fb7a 	bl	8003a74 <xQueueReceive>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f af26 	bne.w	80051d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	3730      	adds	r7, #48	@ 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000d4c 	.word	0x20000d4c

08005398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800539e:	e049      	b.n	8005434 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a0:	4b2e      	ldr	r3, [pc, #184]	@ (800545c <prvSwitchTimerLists+0xc4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053aa:	4b2c      	ldr	r3, [pc, #176]	@ (800545c <prvSwitchTimerLists+0xc4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe f84b 	bl	8003454 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02f      	beq.n	8005434 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d90e      	bls.n	8005404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053f2:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <prvSwitchTimerLists+0xc4>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fd fff0 	bl	80033e2 <vListInsert>
 8005402:	e017      	b.n	8005434 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005404:	2300      	movs	r3, #0
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2300      	movs	r3, #0
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	2100      	movs	r1, #0
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fd58 	bl	8004ec4 <xTimerGenericCommand>
 8005414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	603b      	str	r3, [r7, #0]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <prvSwitchTimerLists+0xc4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1b0      	bne.n	80053a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800543e:	4b07      	ldr	r3, [pc, #28]	@ (800545c <prvSwitchTimerLists+0xc4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005444:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <prvSwitchTimerLists+0xc8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a04      	ldr	r2, [pc, #16]	@ (800545c <prvSwitchTimerLists+0xc4>)
 800544a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800544c:	4a04      	ldr	r2, [pc, #16]	@ (8005460 <prvSwitchTimerLists+0xc8>)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	6013      	str	r3, [r2, #0]
}
 8005452:	bf00      	nop
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000d44 	.word	0x20000d44
 8005460:	20000d48 	.word	0x20000d48

08005464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800546a:	f000 f96d 	bl	8005748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800546e:	4b15      	ldr	r3, [pc, #84]	@ (80054c4 <prvCheckForValidListAndQueue+0x60>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d120      	bne.n	80054b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005476:	4814      	ldr	r0, [pc, #80]	@ (80054c8 <prvCheckForValidListAndQueue+0x64>)
 8005478:	f7fd ff62 	bl	8003340 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800547c:	4813      	ldr	r0, [pc, #76]	@ (80054cc <prvCheckForValidListAndQueue+0x68>)
 800547e:	f7fd ff5f 	bl	8003340 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005482:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <prvCheckForValidListAndQueue+0x6c>)
 8005484:	4a10      	ldr	r2, [pc, #64]	@ (80054c8 <prvCheckForValidListAndQueue+0x64>)
 8005486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005488:	4b12      	ldr	r3, [pc, #72]	@ (80054d4 <prvCheckForValidListAndQueue+0x70>)
 800548a:	4a10      	ldr	r2, [pc, #64]	@ (80054cc <prvCheckForValidListAndQueue+0x68>)
 800548c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800548e:	2300      	movs	r3, #0
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <prvCheckForValidListAndQueue+0x74>)
 8005494:	4a11      	ldr	r2, [pc, #68]	@ (80054dc <prvCheckForValidListAndQueue+0x78>)
 8005496:	2110      	movs	r1, #16
 8005498:	200a      	movs	r0, #10
 800549a:	f7fe f86f 	bl	800357c <xQueueGenericCreateStatic>
 800549e:	4603      	mov	r3, r0
 80054a0:	4a08      	ldr	r2, [pc, #32]	@ (80054c4 <prvCheckForValidListAndQueue+0x60>)
 80054a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054a4:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <prvCheckForValidListAndQueue+0x60>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <prvCheckForValidListAndQueue+0x60>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	490b      	ldr	r1, [pc, #44]	@ (80054e0 <prvCheckForValidListAndQueue+0x7c>)
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fd52 	bl	8003f5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b8:	f000 f978 	bl	80057ac <vPortExitCritical>
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000d4c 	.word	0x20000d4c
 80054c8:	20000d1c 	.word	0x20000d1c
 80054cc:	20000d30 	.word	0x20000d30
 80054d0:	20000d44 	.word	0x20000d44
 80054d4:	20000d48 	.word	0x20000d48
 80054d8:	20000df8 	.word	0x20000df8
 80054dc:	20000d58 	.word	0x20000d58
 80054e0:	08005e54 	.word	0x08005e54

080054e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3b04      	subs	r3, #4
 80054f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3b04      	subs	r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3b04      	subs	r3, #4
 8005512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005514:	4a0c      	ldr	r2, [pc, #48]	@ (8005548 <pxPortInitialiseStack+0x64>)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b14      	subs	r3, #20
 800551e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b04      	subs	r3, #4
 800552a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f06f 0202 	mvn.w	r2, #2
 8005532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3b20      	subs	r3, #32
 8005538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800553a:	68fb      	ldr	r3, [r7, #12]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	0800554d 	.word	0x0800554d

0800554c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005556:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <prvTaskExitError+0x58>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d00b      	beq.n	8005578 <prvTaskExitError+0x2c>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	60fb      	str	r3, [r7, #12]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <prvTaskExitError+0x28>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60bb      	str	r3, [r7, #8]
}
 800558a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800558c:	bf00      	nop
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0fc      	beq.n	800558e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	2000000c 	.word	0x2000000c
	...

080055b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055b0:	4b07      	ldr	r3, [pc, #28]	@ (80055d0 <pxCurrentTCBConst2>)
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	6808      	ldr	r0, [r1, #0]
 80055b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	f380 8809 	msr	PSP, r0
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8811 	msr	BASEPRI, r0
 80055ca:	4770      	bx	lr
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst2>:
 80055d0:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055d8:	4808      	ldr	r0, [pc, #32]	@ (80055fc <prvPortStartFirstTask+0x24>)
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f380 8808 	msr	MSP, r0
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8814 	msr	CONTROL, r0
 80055ea:	b662      	cpsie	i
 80055ec:	b661      	cpsie	f
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	df00      	svc	0
 80055f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055fa:	bf00      	nop
 80055fc:	e000ed08 	.word	0xe000ed08

08005600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005606:	4b47      	ldr	r3, [pc, #284]	@ (8005724 <xPortStartScheduler+0x124>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a47      	ldr	r2, [pc, #284]	@ (8005728 <xPortStartScheduler+0x128>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d10b      	bne.n	8005628 <xPortStartScheduler+0x28>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005628:	4b3e      	ldr	r3, [pc, #248]	@ (8005724 <xPortStartScheduler+0x124>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a3f      	ldr	r2, [pc, #252]	@ (800572c <xPortStartScheduler+0x12c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10b      	bne.n	800564a <xPortStartScheduler+0x4a>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	613b      	str	r3, [r7, #16]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800564a:	4b39      	ldr	r3, [pc, #228]	@ (8005730 <xPortStartScheduler+0x130>)
 800564c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	22ff      	movs	r2, #255	@ 0xff
 800565a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4b31      	ldr	r3, [pc, #196]	@ (8005734 <xPortStartScheduler+0x134>)
 8005670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005672:	4b31      	ldr	r3, [pc, #196]	@ (8005738 <xPortStartScheduler+0x138>)
 8005674:	2207      	movs	r2, #7
 8005676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005678:	e009      	b.n	800568e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800567a:	4b2f      	ldr	r3, [pc, #188]	@ (8005738 <xPortStartScheduler+0x138>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3b01      	subs	r3, #1
 8005680:	4a2d      	ldr	r2, [pc, #180]	@ (8005738 <xPortStartScheduler+0x138>)
 8005682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005696:	2b80      	cmp	r3, #128	@ 0x80
 8005698:	d0ef      	beq.n	800567a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800569a:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <xPortStartScheduler+0x138>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1c3 0307 	rsb	r3, r3, #7
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d00b      	beq.n	80056be <xPortStartScheduler+0xbe>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60bb      	str	r3, [r7, #8]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056be:	4b1e      	ldr	r3, [pc, #120]	@ (8005738 <xPortStartScheduler+0x138>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005738 <xPortStartScheduler+0x138>)
 80056c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <xPortStartScheduler+0x138>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056d0:	4a19      	ldr	r2, [pc, #100]	@ (8005738 <xPortStartScheduler+0x138>)
 80056d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056dc:	4b17      	ldr	r3, [pc, #92]	@ (800573c <xPortStartScheduler+0x13c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a16      	ldr	r2, [pc, #88]	@ (800573c <xPortStartScheduler+0x13c>)
 80056e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056e8:	4b14      	ldr	r3, [pc, #80]	@ (800573c <xPortStartScheduler+0x13c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a13      	ldr	r2, [pc, #76]	@ (800573c <xPortStartScheduler+0x13c>)
 80056ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056f4:	f000 f8da 	bl	80058ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056f8:	4b11      	ldr	r3, [pc, #68]	@ (8005740 <xPortStartScheduler+0x140>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056fe:	f000 f8f9 	bl	80058f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005702:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <xPortStartScheduler+0x144>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a0f      	ldr	r2, [pc, #60]	@ (8005744 <xPortStartScheduler+0x144>)
 8005708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800570c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800570e:	f7ff ff63 	bl	80055d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005712:	f7ff f83b 	bl	800478c <vTaskSwitchContext>
	prvTaskExitError();
 8005716:	f7ff ff19 	bl	800554c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	e000ed00 	.word	0xe000ed00
 8005728:	410fc271 	.word	0x410fc271
 800572c:	410fc270 	.word	0x410fc270
 8005730:	e000e400 	.word	0xe000e400
 8005734:	20000e48 	.word	0x20000e48
 8005738:	20000e4c 	.word	0x20000e4c
 800573c:	e000ed20 	.word	0xe000ed20
 8005740:	2000000c 	.word	0x2000000c
 8005744:	e000ef34 	.word	0xe000ef34

08005748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005762:	4b10      	ldr	r3, [pc, #64]	@ (80057a4 <vPortEnterCritical+0x5c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	4a0e      	ldr	r2, [pc, #56]	@ (80057a4 <vPortEnterCritical+0x5c>)
 800576a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800576c:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <vPortEnterCritical+0x5c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d110      	bne.n	8005796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <vPortEnterCritical+0x60>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <vPortEnterCritical+0x4e>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	603b      	str	r3, [r7, #0]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vPortEnterCritical+0x4a>
	}
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	2000000c 	.word	0x2000000c
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057b2:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <vPortExitCritical+0x26>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	607b      	str	r3, [r7, #4]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <vPortExitCritical+0x50>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	4a08      	ldr	r2, [pc, #32]	@ (80057fc <vPortExitCritical+0x50>)
 80057da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <vPortExitCritical+0x50>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <vPortExitCritical+0x44>
 80057e4:	2300      	movs	r3, #0
 80057e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f383 8811 	msr	BASEPRI, r3
}
 80057ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2000000c 	.word	0x2000000c

08005800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005800:	f3ef 8009 	mrs	r0, PSP
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <pxCurrentTCBConst>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	f01e 0f10 	tst.w	lr, #16
 8005810:	bf08      	it	eq
 8005812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	6010      	str	r0, [r2, #0]
 800581c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005824:	f380 8811 	msr	BASEPRI, r0
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f7fe ffac 	bl	800478c <vTaskSwitchContext>
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f380 8811 	msr	BASEPRI, r0
 800583c:	bc09      	pop	{r0, r3}
 800583e:	6819      	ldr	r1, [r3, #0]
 8005840:	6808      	ldr	r0, [r1, #0]
 8005842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005846:	f01e 0f10 	tst.w	lr, #16
 800584a:	bf08      	it	eq
 800584c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005850:	f380 8809 	msr	PSP, r0
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst>:
 8005860:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	607b      	str	r3, [r7, #4]
}
 8005880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005882:	f7fe fec9 	bl	8004618 <xTaskIncrementTick>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <xPortSysTickHandler+0x40>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	2300      	movs	r3, #0
 8005896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f383 8811 	msr	BASEPRI, r3
}
 800589e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058b0:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <vPortSetupTimerInterrupt+0x34>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <vPortSetupTimerInterrupt+0x38>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <vPortSetupTimerInterrupt+0x3c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0a      	ldr	r2, [pc, #40]	@ (80058ec <vPortSetupTimerInterrupt+0x40>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	4a09      	ldr	r2, [pc, #36]	@ (80058f0 <vPortSetupTimerInterrupt+0x44>)
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ce:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <vPortSetupTimerInterrupt+0x34>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e010 	.word	0xe000e010
 80058e4:	e000e018 	.word	0xe000e018
 80058e8:	20000000 	.word	0x20000000
 80058ec:	10624dd3 	.word	0x10624dd3
 80058f0:	e000e014 	.word	0xe000e014

080058f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005904 <vPortEnableVFP+0x10>
 80058f8:	6801      	ldr	r1, [r0, #0]
 80058fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058fe:	6001      	str	r1, [r0, #0]
 8005900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005902:	bf00      	nop
 8005904:	e000ed88 	.word	0xe000ed88

08005908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800590e:	f3ef 8305 	mrs	r3, IPSR
 8005912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d915      	bls.n	8005946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <vPortValidateInterruptPriority+0x74>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005924:	4b16      	ldr	r3, [pc, #88]	@ (8005980 <vPortValidateInterruptPriority+0x78>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	7afa      	ldrb	r2, [r7, #11]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20b      	bcs.n	8005946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005946:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <vPortValidateInterruptPriority+0x7c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800594e:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <vPortValidateInterruptPriority+0x80>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d90b      	bls.n	800596e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	603b      	str	r3, [r7, #0]
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	e7fd      	b.n	800596a <vPortValidateInterruptPriority+0x62>
	}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000e3f0 	.word	0xe000e3f0
 8005980:	20000e48 	.word	0x20000e48
 8005984:	e000ed0c 	.word	0xe000ed0c
 8005988:	20000e4c 	.word	0x20000e4c

0800598c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	@ 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005998:	f7fe fd82 	bl	80044a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800599c:	4b5c      	ldr	r3, [pc, #368]	@ (8005b10 <pvPortMalloc+0x184>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059a4:	f000 f924 	bl	8005bf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b14 <pvPortMalloc+0x188>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 8095 	bne.w	8005ae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01e      	beq.n	80059fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80059bc:	2208      	movs	r2, #8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d015      	beq.n	80059fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	3308      	adds	r3, #8
 80059d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <pvPortMalloc+0x6e>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	617b      	str	r3, [r7, #20]
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d06f      	beq.n	8005ae0 <pvPortMalloc+0x154>
 8005a00:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <pvPortMalloc+0x18c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d86a      	bhi.n	8005ae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a0a:	4b44      	ldr	r3, [pc, #272]	@ (8005b1c <pvPortMalloc+0x190>)
 8005a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a0e:	4b43      	ldr	r3, [pc, #268]	@ (8005b1c <pvPortMalloc+0x190>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a14:	e004      	b.n	8005a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d903      	bls.n	8005a32 <pvPortMalloc+0xa6>
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f1      	bne.n	8005a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a32:	4b37      	ldr	r3, [pc, #220]	@ (8005b10 <pvPortMalloc+0x184>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d051      	beq.n	8005ae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2208      	movs	r2, #8
 8005a42:	4413      	add	r3, r2
 8005a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	1ad2      	subs	r2, r2, r3
 8005a56:	2308      	movs	r3, #8
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d920      	bls.n	8005aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4413      	add	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <pvPortMalloc+0xfc>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	e7fd      	b.n	8005a84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a9a:	69b8      	ldr	r0, [r7, #24]
 8005a9c:	f000 f90a 	bl	8005cb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b18 <pvPortMalloc+0x18c>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8005b18 <pvPortMalloc+0x18c>)
 8005aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005aae:	4b1a      	ldr	r3, [pc, #104]	@ (8005b18 <pvPortMalloc+0x18c>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b20 <pvPortMalloc+0x194>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d203      	bcs.n	8005ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aba:	4b17      	ldr	r3, [pc, #92]	@ (8005b18 <pvPortMalloc+0x18c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <pvPortMalloc+0x194>)
 8005ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <pvPortMalloc+0x188>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ad6:	4b13      	ldr	r3, [pc, #76]	@ (8005b24 <pvPortMalloc+0x198>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	4a11      	ldr	r2, [pc, #68]	@ (8005b24 <pvPortMalloc+0x198>)
 8005ade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ae0:	f7fe fcec 	bl	80044bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <pvPortMalloc+0x17a>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <pvPortMalloc+0x176>
	return pvReturn;
 8005b06:	69fb      	ldr	r3, [r7, #28]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3728      	adds	r7, #40	@ 0x28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20004a58 	.word	0x20004a58
 8005b14:	20004a6c 	.word	0x20004a6c
 8005b18:	20004a5c 	.word	0x20004a5c
 8005b1c:	20004a50 	.word	0x20004a50
 8005b20:	20004a60 	.word	0x20004a60
 8005b24:	20004a64 	.word	0x20004a64

08005b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d04f      	beq.n	8005bda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	425b      	negs	r3, r3
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4b25      	ldr	r3, [pc, #148]	@ (8005be4 <vPortFree+0xbc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <vPortFree+0x46>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60fb      	str	r3, [r7, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <vPortFree+0x66>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60bb      	str	r3, [r7, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	4b14      	ldr	r3, [pc, #80]	@ (8005be4 <vPortFree+0xbc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4013      	ands	r3, r2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01e      	beq.n	8005bda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d11a      	bne.n	8005bda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8005be4 <vPortFree+0xbc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	43db      	mvns	r3, r3
 8005bae:	401a      	ands	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bb4:	f7fe fc74 	bl	80044a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <vPortFree+0xc0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4a09      	ldr	r2, [pc, #36]	@ (8005be8 <vPortFree+0xc0>)
 8005bc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bc6:	6938      	ldr	r0, [r7, #16]
 8005bc8:	f000 f874 	bl	8005cb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <vPortFree+0xc4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	4a06      	ldr	r2, [pc, #24]	@ (8005bec <vPortFree+0xc4>)
 8005bd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bd6:	f7fe fc71 	bl	80044bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bda:	bf00      	nop
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20004a6c 	.word	0x20004a6c
 8005be8:	20004a5c 	.word	0x20004a5c
 8005bec:	20004a68 	.word	0x20004a68

08005bf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bf6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005bfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bfc:	4b27      	ldr	r3, [pc, #156]	@ (8005c9c <prvHeapInit+0xac>)
 8005bfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3307      	adds	r3, #7
 8005c0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0307 	bic.w	r3, r3, #7
 8005c16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c9c <prvHeapInit+0xac>)
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <prvHeapInit+0xb0>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca0 <prvHeapInit+0xb0>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <prvHeapInit+0xb4>)
 8005c50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c52:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <prvHeapInit+0xb4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2200      	movs	r2, #0
 8005c58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ca4 <prvHeapInit+0xb4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <prvHeapInit+0xb4>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca8 <prvHeapInit+0xb8>)
 8005c7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a09      	ldr	r2, [pc, #36]	@ (8005cac <prvHeapInit+0xbc>)
 8005c86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c88:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <prvHeapInit+0xc0>)
 8005c8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000e50 	.word	0x20000e50
 8005ca0:	20004a50 	.word	0x20004a50
 8005ca4:	20004a58 	.word	0x20004a58
 8005ca8:	20004a60 	.word	0x20004a60
 8005cac:	20004a5c 	.word	0x20004a5c
 8005cb0:	20004a6c 	.word	0x20004a6c

08005cb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cbc:	4b28      	ldr	r3, [pc, #160]	@ (8005d60 <prvInsertBlockIntoFreeList+0xac>)
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e002      	b.n	8005cc8 <prvInsertBlockIntoFreeList+0x14>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d8f7      	bhi.n	8005cc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	4413      	add	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d108      	bne.n	8005cf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	441a      	add	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	441a      	add	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d118      	bne.n	8005d3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b15      	ldr	r3, [pc, #84]	@ (8005d64 <prvInsertBlockIntoFreeList+0xb0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d00d      	beq.n	8005d32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	441a      	add	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e008      	b.n	8005d44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d32:	4b0c      	ldr	r3, [pc, #48]	@ (8005d64 <prvInsertBlockIntoFreeList+0xb0>)
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e003      	b.n	8005d44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d002      	beq.n	8005d52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20004a50 	.word	0x20004a50
 8005d64:	20004a58 	.word	0x20004a58

08005d68 <memset>:
 8005d68:	4402      	add	r2, r0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <memset+0xa>
 8005d70:	4770      	bx	lr
 8005d72:	f803 1b01 	strb.w	r1, [r3], #1
 8005d76:	e7f9      	b.n	8005d6c <memset+0x4>

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	@ (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f000 f826 	bl	8005ddc <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08005f5c 	.word	0x08005f5c
 8005db4:	08005f5c 	.word	0x08005f5c
 8005db8:	08005f5c 	.word	0x08005f5c
 8005dbc:	08005f60 	.word	0x08005f60

08005dc0 <memcpy>:
 8005dc0:	440a      	add	r2, r1
 8005dc2:	4291      	cmp	r1, r2
 8005dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc8:	d100      	bne.n	8005dcc <memcpy+0xc>
 8005dca:	4770      	bx	lr
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd6:	4291      	cmp	r1, r2
 8005dd8:	d1f9      	bne.n	8005dce <memcpy+0xe>
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <_init>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

08005de8 <_fini>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr
